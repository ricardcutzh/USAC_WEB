
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 25 03:09:38 CST 2018
//----------------------------------------------------

package CJS;

import java_cup.runtime.*;
import AST.*;
import java.util.ArrayList;
import java.util.Date;
import java.text.SimpleDateFormat;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 25 03:09:38 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\042\002\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\005\000\002\004\007\000\002" +
    "\004\010\000\002\004\014\000\002\004\011\000\002\004" +
    "\005\000\002\004\004\000\002\004\005\000\002\005\005" +
    "\000\002\005\003\000\002\005\005\000\002\005\004\000" +
    "\002\032\005\000\002\032\003\000\002\033\006\000\002" +
    "\033\011\000\002\033\010\000\002\034\010\000\002\034" +
    "\011\000\002\034\011\000\002\034\012\000\002\034\005" +
    "\000\002\014\005\000\002\014\006\000\002\014\005\000" +
    "\002\035\011\000\002\035\005\000\002\037\004\000\002" +
    "\037\003\000\002\040\006\000\002\040\005\000\002\041" +
    "\006\000\002\041\003\000\002\036\017\000\002\036\020" +
    "\000\002\036\005\000\002\015\003\000\002\015\003\000" +
    "\002\016\010\000\002\016\011\000\002\016\005\000\002" +
    "\017\007\000\002\020\011\000\002\020\010\000\002\020" +
    "\012\000\002\020\011\000\002\020\005\000\002\021\005" +
    "\000\002\021\005\000\002\022\007\000\002\006\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\005\000\002\011\003\000\002\012\004\000\002\012\004" +
    "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\006\000\002\013\005\000\002\013" +
    "\007\000\002\013\005\000\002\013\007\000\002\013\005" +
    "\000\002\023\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\005\000\002\027\003" +
    "\000\002\030\004\000\002\030\003\000\002\031\003\000" +
    "\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\032\003\000\004\000\006\000\041\000\043" +
    "\000\047\000\051\000\054\000\055\000\056\000\057\000" +
    "\060\000\001\002\000\032\003\025\004\021\006\035\041" +
    "\027\043\022\047\031\051\010\054\007\055\013\056\030" +
    "\057\012\060\033\001\002\000\004\002\006\001\002\000" +
    "\004\002\001\001\002\000\006\003\336\026\337\001\002" +
    "\000\006\003\311\026\312\001\002\000\042\002\uffee\003" +
    "\uffee\004\uffee\006\uffee\041\uffee\042\uffee\043\uffee\047\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\060\uffee\001\002\000\004\026\305\001\002\000\006" +
    "\003\274\026\275\001\002\000\010\007\260\010\064\041" +
    "\257\001\002\000\042\002\ufff2\003\ufff2\004\ufff2\006\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\047\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\001\002" +
    "\000\042\002\uffeb\003\uffeb\004\uffeb\006\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\001\002\000\034\002" +
    "\uffff\003\025\004\021\006\035\041\027\043\022\047\031" +
    "\051\010\054\007\055\013\056\061\057\012\060\033\001" +
    "\002\000\042\002\uffef\003\uffef\004\uffef\006\uffef\041\uffef" +
    "\042\uffef\043\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\001\002\000\006" +
    "\003\227\006\035\001\002\000\022\003\223\006\123\021" +
    "\103\022\111\023\107\024\122\025\117\026\126\001\002" +
    "\000\042\002\uffec\003\uffec\004\uffec\006\uffec\041\uffec\042" +
    "\uffec\043\uffec\047\uffec\051\uffec\052\uffec\053\uffec\054\uffec" +
    "\055\uffec\056\uffec\057\uffec\060\uffec\001\002\000\042\002" +
    "\ufff4\003\ufff4\004\ufff4\006\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\047\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\001\002\000\006\004\222\006\073" +
    "\001\002\000\042\002\uffed\003\uffed\004\uffed\006\uffed\041" +
    "\uffed\042\uffed\043\uffed\047\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\001\002\000" +
    "\004\003\220\001\002\000\042\002\ufff1\003\ufff1\004\ufff1" +
    "\006\ufff1\041\ufff1\042\ufff1\043\ufff1\047\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\001\002\000\006\003\075\026\076\001\002\000\042\002" +
    "\ufff0\003\ufff0\004\ufff0\006\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\047\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\001\002\000\006\003\040\006\041" +
    "\001\002\000\042\002\ufff3\003\ufff3\004\ufff3\006\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\001\002\000" +
    "\016\003\036\005\uffe1\007\uffe1\010\uffe1\027\uffe1\041\uffe1" +
    "\001\002\000\004\010\037\001\002\000\014\005\uffe0\007" +
    "\uffe0\010\uffe0\027\uffe0\041\uffe0\001\002\000\004\042\074" +
    "\001\002\000\004\026\042\001\002\000\010\003\043\006" +
    "\035\027\045\001\002\000\004\006\073\001\002\000\006" +
    "\010\064\027\065\001\002\000\004\041\046\001\002\000" +
    "\034\003\025\004\021\006\035\041\027\042\047\043\022" +
    "\047\031\051\010\054\007\055\013\056\030\057\012\060" +
    "\033\001\002\000\042\002\uffbf\003\uffbf\004\uffbf\006\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\047\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002" +
    "\000\034\003\025\004\021\006\035\041\027\042\051\043" +
    "\022\047\031\051\010\054\007\055\013\056\061\057\012" +
    "\060\033\001\002\000\042\002\uffbd\003\uffbd\004\uffbd\006" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\047\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\001" +
    "\002\000\042\002\ufffb\003\ufffb\004\ufffb\006\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\047\ufffb\051\ufffb\052\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\001\002\000\042" +
    "\002\ufff7\003\ufff7\004\ufff7\006\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\001\002\000\042\002\ufffe\003" +
    "\ufffe\004\ufffe\006\ufffe\041\ufffe\042\ufffe\043\ufffe\047\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\001\002\000\042\002\ufffa\003\ufffa\004\ufffa" +
    "\006\ufffa\041\ufffa\042\ufffa\043\ufffa\047\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\001\002\000\042\002\ufffd\003\ufffd\004\ufffd\006\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\047\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\001\002\000" +
    "\042\002\ufff5\003\ufff5\004\ufff5\006\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\047\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\001\002\000\042\002\ufffc" +
    "\003\ufffc\004\ufffc\006\ufffc\041\ufffc\042\ufffc\043\ufffc\047" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\060\ufffc\001\002\000\042\002\ufff8\003\ufff8\004" +
    "\ufff8\006\ufff8\041\ufff8\042\ufff8\043\ufff8\047\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\001\002\000\042\002\ufff9\003\ufff9\004\ufff9\006\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\047\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\001\002" +
    "\000\042\002\ufff6\003\ufff6\004\ufff6\006\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\047\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\001\002\000\004\006" +
    "\072\001\002\000\004\041\066\001\002\000\034\003\025" +
    "\004\021\006\035\041\027\042\067\043\022\047\031\051" +
    "\010\054\007\055\013\056\030\057\012\060\033\001\002" +
    "\000\042\002\uffc0\003\uffc0\004\uffc0\006\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\001\002\000\034\003" +
    "\025\004\021\006\035\041\027\042\071\043\022\047\031" +
    "\051\010\054\007\055\013\056\061\057\012\060\033\001" +
    "\002\000\042\002\uffbe\003\uffbe\004\uffbe\006\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\001\002\000\014" +
    "\005\uffe2\007\uffe2\010\uffe2\027\uffe2\041\uffe2\001\002\000" +
    "\014\005\uffdf\007\uffdf\010\uffdf\027\uffdf\041\uffdf\001\002" +
    "\000\042\002\uffbc\003\uffbc\004\uffbc\006\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\001\002\000\004\042" +
    "\217\001\002\000\022\006\123\021\103\022\111\023\107" +
    "\024\122\025\117\026\120\040\100\001\002\000\012\005" +
    "\uff91\027\uff91\036\uff91\037\uff91\001\002\000\020\006\123" +
    "\021\103\022\111\023\107\024\122\025\117\026\120\001" +
    "\002\000\044\005\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\205\014\206\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\042\uffb5\001\002" +
    "\000\012\005\uff92\027\uff92\036\uff92\037\uff92\001\002\000" +
    "\052\005\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\015\uffac\017\uffac\020\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\042\uffac\001\002\000\026\005\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\001\002\000\052\005\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\017\214\020\215\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\042\uffad\001\002\000\046\005\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\042\uffb0\001\002\000\052\005\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\017\uffa9\020\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\042\uffa9\001\002" +
    "\000\046\005\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\210\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\042\uffb2\001" +
    "\002\000\052\005\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\017\uffaa\020\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\042\uffaa\001\002\000\040\005\uffb8\007\uffb8\010" +
    "\uffb8\011\202\012\203\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\042\uffb8\001" +
    "\002\000\012\005\uff94\027\uff94\036\uff94\037\uff94\001\002" +
    "\000\012\005\uff96\027\uff96\036\200\037\uff96\001\002\000" +
    "\010\005\uff98\027\uff98\037\176\001\002\000\026\005\uffa0" +
    "\027\uffa0\030\162\031\167\032\166\033\163\034\164\035" +
    "\165\036\uffa0\037\uffa0\001\002\000\052\005\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\017" +
    "\uffa7\020\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\042\uffa7\001\002\000" +
    "\022\006\123\021\103\022\111\023\107\024\122\025\117" +
    "\026\120\040\100\001\002\000\004\027\141\001\002\000" +
    "\052\005\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\017\uffa8\020\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\042\uffa8\001\002\000\056\005\uffab\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\017\uffab\020\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\041\125\042\uffab\046\124\001\002" +
    "\000\006\044\134\045\133\001\002\000\020\006\123\021" +
    "\103\022\111\023\107\024\122\025\117\026\126\001\002" +
    "\000\020\006\123\021\103\022\111\023\107\024\122\025" +
    "\117\026\126\001\002\000\004\042\130\001\002\000\052" +
    "\005\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\017\uffa6\020\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\042" +
    "\uffa6\001\002\000\004\027\132\001\002\000\052\005\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\017\uffa5\020\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\042\uffa5\001" +
    "\002\000\054\005\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\017\uffa1\020\uffa1\026\137\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\042\uffa1\001\002\000\054\005\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\017\uffa3\020\uffa3\026\135\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\042\uffa3" +
    "\001\002\000\004\027\136\001\002\000\052\005\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\017\uffa4\020\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\042\uffa4\001\002" +
    "\000\004\027\140\001\002\000\052\005\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2" +
    "\020\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\042\uffa2\001\002\000\004" +
    "\041\142\001\002\000\034\003\025\004\021\006\035\041" +
    "\027\042\143\043\022\047\031\051\010\054\007\055\013" +
    "\056\030\057\012\060\033\001\002\000\044\002\uffd9\003" +
    "\uffd9\004\uffd9\006\uffd9\041\uffd9\042\uffd9\043\uffd9\047\uffd9" +
    "\050\146\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\001\002\000\034\003\025\004\021" +
    "\006\035\041\027\042\145\043\022\047\031\051\010\054" +
    "\007\055\013\056\061\057\012\060\033\001\002\000\044" +
    "\002\uffd8\003\uffd8\004\uffd8\006\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\047\uffd8\050\146\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\001\002\000\006\003" +
    "\150\041\151\001\002\000\042\002\uffd6\003\uffd6\004\uffd6" +
    "\006\uffd6\041\uffd6\042\uffd6\043\uffd6\047\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\001\002\000\004\042\155\001\002\000\034\003\025\004" +
    "\021\006\035\041\027\042\152\043\022\047\031\051\010" +
    "\054\007\055\013\056\030\057\012\060\033\001\002\000" +
    "\042\002\uffd4\003\uffd4\004\uffd4\006\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\001\002\000\034\003\025" +
    "\004\021\006\035\041\027\042\154\043\022\047\031\051" +
    "\010\054\007\055\013\056\061\057\012\060\033\001\002" +
    "\000\042\002\uffd3\003\uffd3\004\uffd3\006\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\047\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\001\002\000\042\002" +
    "\uffd2\003\uffd2\004\uffd2\006\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\047\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\001\002\000\042\002\uffd7\003\uffd7" +
    "\004\uffd7\006\uffd7\041\uffd7\042\uffd7\043\uffd7\047\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\001\002\000\024\027\132\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\001\002" +
    "\000\004\027\161\001\002\000\012\005\uff90\027\uff90\036" +
    "\uff90\037\uff90\001\002\000\020\006\123\021\103\022\111" +
    "\023\107\024\122\025\117\026\126\001\002\000\020\006" +
    "\123\021\103\022\111\023\107\024\122\025\117\026\126" +
    "\001\002\000\020\006\123\021\103\022\111\023\107\024" +
    "\122\025\117\026\126\001\002\000\020\006\123\021\103" +
    "\022\111\023\107\024\122\025\117\026\126\001\002\000" +
    "\020\006\123\021\103\022\111\023\107\024\122\025\117" +
    "\026\126\001\002\000\020\006\123\021\103\022\111\023" +
    "\107\024\122\025\117\026\126\001\002\000\026\005\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\001\002\000\026\005\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\001\002\000\026\005\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037" +
    "\uff9a\001\002\000\026\005\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\001" +
    "\002\000\026\005\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\001\002\000" +
    "\026\005\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\001\002\000\022\006" +
    "\123\021\103\022\111\023\107\024\122\025\117\026\120" +
    "\040\100\001\002\000\012\005\uff97\027\uff97\036\200\037" +
    "\uff97\001\002\000\022\006\123\021\103\022\111\023\107" +
    "\024\122\025\117\026\120\040\100\001\002\000\012\005" +
    "\uff95\027\uff95\036\uff95\037\uff95\001\002\000\020\006\123" +
    "\021\103\022\111\023\107\024\122\025\117\026\126\001" +
    "\002\000\020\006\123\021\103\022\111\023\107\024\122" +
    "\025\117\026\126\001\002\000\044\005\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\205\014\206\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\042\uffb6\001\002\000\020\006\123\021\103\022\111" +
    "\023\107\024\122\025\117\026\126\001\002\000\020\006" +
    "\123\021\103\022\111\023\107\024\122\025\117\026\126" +
    "\001\002\000\046\005\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\210\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\042" +
    "\uffb3\001\002\000\020\006\123\021\103\022\111\023\107" +
    "\024\122\025\117\026\126\001\002\000\046\005\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\042\uffb1\001\002\000\046\005\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\210\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\042\uffb4\001\002\000\044\005" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\205\014\206" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\042\uffb7\001\002\000\046\005\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\042\uffaf\001\002\000\046\005" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\042\uffae\001\002\000\012" +
    "\005\uff93\027\uff93\036\uff93\037\uff93\001\002\000\042\002" +
    "\uffd5\003\uffd5\004\uffd5\006\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\047\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\001\002\000\004\042\221\001\002" +
    "\000\042\002\uffe3\003\uffe3\004\uffe3\006\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\001\002\000\042\002" +
    "\uffe4\003\uffe4\004\uffe4\006\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\001\002\000\004\005\226\001\002" +
    "\000\004\005\225\001\002\000\042\002\uffbb\003\uffbb\004" +
    "\uffbb\006\uffbb\041\uffbb\042\uffbb\043\uffbb\047\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\001\002\000\042\002\uffba\003\uffba\004\uffba\006\uffba" +
    "\041\uffba\042\uffba\043\uffba\047\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\001\002" +
    "\000\006\005\256\006\073\001\002\000\012\005\231\007" +
    "\233\010\064\041\232\001\002\000\042\002\uffea\003\uffea" +
    "\004\uffea\006\uffea\041\uffea\042\uffea\043\uffea\047\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\001\002\000\020\006\123\021\103\022\111\023" +
    "\107\024\122\025\117\026\126\001\002\000\022\006\123" +
    "\021\103\022\111\023\107\024\122\025\117\026\126\041" +
    "\235\001\002\000\004\005\245\001\002\000\020\006\123" +
    "\021\103\022\111\023\107\024\122\025\117\026\126\001" +
    "\002\000\006\010\240\042\237\001\002\000\004\005\uffdd" +
    "\001\002\000\020\006\123\021\103\022\111\023\107\024" +
    "\122\025\117\026\126\001\002\000\004\005\242\001\002" +
    "\000\042\002\uffe6\003\uffe6\004\uffe6\006\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\001\002\000\006\010" +
    "\240\042\237\001\002\000\004\005\uffde\001\002\000\042" +
    "\002\uffe9\003\uffe9\004\uffe9\006\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\001\002\000\004\042\247\001" +
    "\002\000\006\005\250\007\251\001\002\000\042\002\uffe8" +
    "\003\uffe8\004\uffe8\006\uffe8\041\uffe8\042\uffe8\043\uffe8\047" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\001\002\000\004\041\252\001\002\000" +
    "\020\006\123\021\103\022\111\023\107\024\122\025\117" +
    "\026\126\001\002\000\006\010\240\042\237\001\002\000" +
    "\004\005\255\001\002\000\042\002\uffe7\003\uffe7\004\uffe7" +
    "\006\uffe7\041\uffe7\042\uffe7\043\uffe7\047\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\001\002\000\042\002\uffe5\003\uffe5\004\uffe5\006\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\001\002\000" +
    "\020\006\123\021\103\022\111\023\107\024\122\025\117" +
    "\026\126\001\002\000\022\006\123\021\103\022\111\023" +
    "\107\024\122\025\117\026\126\041\262\001\002\000\004" +
    "\005\266\001\002\000\020\006\123\021\103\022\111\023" +
    "\107\024\122\025\117\026\126\001\002\000\006\010\240" +
    "\042\237\001\002\000\004\005\265\001\002\000\042\002" +
    "\uffda\003\uffda\004\uffda\006\uffda\041\uffda\042\uffda\043\uffda" +
    "\047\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\001\002\000\042\002\uffdc\003\uffdc" +
    "\004\uffdc\006\uffdc\041\uffdc\042\uffdc\043\uffdc\047\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\001\002\000\004\042\270\001\002\000\004\007" +
    "\271\001\002\000\020\006\123\021\103\022\111\023\107" +
    "\024\122\025\117\026\126\001\002\000\004\005\273\001" +
    "\002\000\042\002\uffdb\003\uffdb\004\uffdb\006\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\001\002\000\004" +
    "\042\304\001\002\000\022\006\123\021\103\022\111\023" +
    "\107\024\122\025\117\026\120\040\100\001\002\000\004" +
    "\027\277\001\002\000\004\041\300\001\002\000\034\003" +
    "\025\004\021\006\035\041\027\042\301\043\022\047\031" +
    "\051\010\054\007\055\013\056\030\057\012\060\033\001" +
    "\002\000\042\002\uffc4\003\uffc4\004\uffc4\006\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\001\002\000\034" +
    "\003\025\004\021\006\035\041\027\042\303\043\022\047" +
    "\031\051\010\054\007\055\013\056\061\057\012\060\033" +
    "\001\002\000\042\002\uffc3\003\uffc3\004\uffc3\006\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\001\002\000" +
    "\042\002\uffc2\003\uffc2\004\uffc2\006\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002\000\020\006\123" +
    "\021\103\022\111\023\107\024\122\025\117\026\126\001" +
    "\002\000\004\027\307\001\002\000\004\005\310\001\002" +
    "\000\042\002\uffc1\003\uffc1\004\uffc1\006\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\001\002\000\004\042" +
    "\335\001\002\000\020\006\123\021\103\022\111\023\107" +
    "\024\122\025\117\026\126\001\002\000\004\027\314\001" +
    "\002\000\004\041\315\001\002\000\004\052\317\001\002" +
    "\000\006\042\327\053\331\001\002\000\022\003\322\006" +
    "\123\021\103\022\111\023\107\024\122\025\117\026\126" +
    "\001\002\000\010\042\uffce\052\317\053\uffce\001\002\000" +
    "\006\042\uffcf\053\uffcf\001\002\000\004\007\326\001\002" +
    "\000\004\007\324\001\002\000\032\003\025\004\021\006" +
    "\035\041\027\043\022\047\031\051\010\054\007\055\013" +
    "\056\030\057\012\060\033\001\002\000\040\003\025\004" +
    "\021\006\035\041\027\042\uffcd\043\022\047\031\051\010" +
    "\052\uffcd\053\uffcd\054\007\055\013\056\061\057\012\060" +
    "\033\001\002\000\010\042\uffcc\052\uffcc\053\uffcc\001\002" +
    "\000\042\002\uffca\003\uffca\004\uffca\006\uffca\041\uffca\042" +
    "\uffca\043\uffca\047\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\001\002\000\042\002" +
    "\uffd1\003\uffd1\004\uffd1\006\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\001\002\000\004\007\332\001\002" +
    "\000\032\003\025\004\021\006\035\041\027\043\022\047" +
    "\031\051\010\054\007\055\013\056\030\057\012\060\033" +
    "\001\002\000\034\003\025\004\021\006\035\041\027\042" +
    "\334\043\022\047\031\051\010\054\007\055\013\056\061" +
    "\057\012\060\033\001\002\000\042\002\uffcb\003\uffcb\004" +
    "\uffcb\006\uffcb\041\uffcb\042\uffcb\043\uffcb\047\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\001\002\000\042\002\uffd0\003\uffd0\004\uffd0\006\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\047\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\001\002" +
    "\000\004\042\357\001\002\000\004\006\340\001\002\000" +
    "\004\007\341\001\002\000\020\006\123\021\103\022\111" +
    "\023\107\024\122\025\117\026\126\001\002\000\004\005" +
    "\343\001\002\000\022\006\123\021\103\022\111\023\107" +
    "\024\122\025\117\026\120\040\100\001\002\000\004\005" +
    "\345\001\002\000\004\006\346\001\002\000\006\017\347" +
    "\020\351\001\002\000\004\027\uffc6\001\002\000\004\027" +
    "\352\001\002\000\004\027\uffc5\001\002\000\004\041\353" +
    "\001\002\000\034\003\025\004\021\006\035\041\027\042" +
    "\354\043\022\047\031\051\010\054\007\055\013\056\030" +
    "\057\012\060\033\001\002\000\042\002\uffc9\003\uffc9\004" +
    "\uffc9\006\uffc9\041\uffc9\042\uffc9\043\uffc9\047\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\001\002\000\034\003\025\004\021\006\035\041\027" +
    "\042\356\043\022\047\031\051\010\054\007\055\013\056" +
    "\061\057\012\060\033\001\002\000\042\002\uffc8\003\uffc8" +
    "\004\uffc8\006\uffc8\041\uffc8\042\uffc8\043\uffc8\047\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\001\002\000\042\002\uffc7\003\uffc7\004\uffc7\006" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\006\002\004\042\003\001\001\000\030\003" +
    "\016\004\015\005\013\016\031\017\014\020\033\021\023" +
    "\033\022\034\025\035\010\036\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\053\005\013\016\061\017\052\020\062\021\056\033" +
    "\055\034\057\035\051\036\054\001\001\000\002\001\001" +
    "\000\004\005\227\001\001\000\016\006\223\007\111\010" +
    "\100\011\107\012\105\013\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\047" +
    "\004\015\005\013\016\031\017\014\020\033\021\023\033" +
    "\022\034\025\035\010\036\017\001\001\000\002\001\001" +
    "\000\026\004\053\005\013\016\061\017\052\020\062\021" +
    "\056\033\055\034\057\035\051\036\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\067\004\015\005\013\016\031\017\014\020\033\021" +
    "\023\033\022\034\025\035\010\036\017\001\001\000\002" +
    "\001\001\000\026\004\053\005\013\016\061\017\052\020" +
    "\062\021\056\033\055\034\057\035\051\036\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\103\007\111" +
    "\010\100\011\107\012\105\013\104\023\076\024\115\025" +
    "\120\026\114\027\113\030\112\031\101\001\001\000\002" +
    "\001\001\000\024\006\103\007\111\010\100\011\107\012" +
    "\105\013\104\023\076\024\115\031\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\156\007\111\010" +
    "\100\011\107\012\105\013\104\023\076\024\115\025\157" +
    "\026\114\027\113\030\112\031\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\126\007\111\010\100\011\107\012\105\013" +
    "\104\001\001\000\016\006\130\007\111\010\100\011\107" +
    "\012\105\013\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\143\004\015\005\013\016\031\017\014\020\033\021" +
    "\023\033\022\034\025\035\010\036\017\001\001\000\004" +
    "\014\155\001\001\000\026\004\053\005\013\016\061\017" +
    "\052\020\062\021\056\033\055\034\057\035\051\036\054" +
    "\001\001\000\004\014\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\152\004\015" +
    "\005\013\016\031\017\014\020\033\021\023\033\022\034" +
    "\025\035\010\036\017\001\001\000\002\001\001\000\026" +
    "\004\053\005\013\016\061\017\052\020\062\021\056\033" +
    "\055\034\057\035\051\036\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\103\007\111" +
    "\010\100\011\107\012\105\013\104\024\174\001\001\000" +
    "\020\006\103\007\111\010\100\011\107\012\105\013\104" +
    "\024\173\001\001\000\020\006\103\007\111\010\100\011" +
    "\107\012\105\013\104\024\172\001\001\000\020\006\103" +
    "\007\111\010\100\011\107\012\105\013\104\024\171\001" +
    "\001\000\020\006\103\007\111\010\100\011\107\012\105" +
    "\013\104\024\170\001\001\000\020\006\103\007\111\010" +
    "\100\011\107\012\105\013\104\024\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\103" +
    "\007\111\010\100\011\107\012\105\013\104\023\076\024" +
    "\115\027\176\030\112\031\101\001\001\000\002\001\001" +
    "\000\026\006\103\007\111\010\100\011\107\012\105\013" +
    "\104\023\076\024\115\030\200\031\101\001\001\000\002" +
    "\001\001\000\012\010\212\011\107\012\105\013\104\001" +
    "\001\000\012\010\203\011\107\012\105\013\104\001\001" +
    "\000\002\001\001\000\010\011\211\012\105\013\104\001" +
    "\001\000\010\011\206\012\105\013\104\001\001\000\002" +
    "\001\001\000\006\012\210\013\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\245\007\111\010\100\011\107\012\105\013" +
    "\104\001\001\000\016\006\233\007\111\010\100\011\107" +
    "\012\105\013\104\001\001\000\002\001\001\000\016\006" +
    "\235\007\111\010\100\011\107\012\105\013\104\001\001" +
    "\000\004\032\240\001\001\000\002\001\001\000\016\006" +
    "\242\007\111\010\100\011\107\012\105\013\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\252\007\111\010\100\011\107\012\105\013\104" +
    "\001\001\000\004\032\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\266\007\111" +
    "\010\100\011\107\012\105\013\104\001\001\000\016\006" +
    "\260\007\111\010\100\011\107\012\105\013\104\001\001" +
    "\000\002\001\001\000\016\006\262\007\111\010\100\011" +
    "\107\012\105\013\104\001\001\000\004\032\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\271\007\111" +
    "\010\100\011\107\012\105\013\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\103" +
    "\007\111\010\100\011\107\012\105\013\104\023\076\024" +
    "\115\025\275\026\114\027\113\030\112\031\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\301\004" +
    "\015\005\013\016\031\017\014\020\033\021\023\033\022" +
    "\034\025\035\010\036\017\001\001\000\002\001\001\000" +
    "\026\004\053\005\013\016\061\017\052\020\062\021\056" +
    "\033\055\034\057\035\051\036\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\305\007\111\010\100" +
    "\011\107\012\105\013\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\312\007\111\010\100\011\107\012\105\013\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\315" +
    "\040\317\001\001\000\004\041\327\001\001\000\016\006" +
    "\322\007\111\010\100\011\107\012\105\013\104\001\001" +
    "\000\006\037\320\040\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\324\004\015" +
    "\005\013\016\031\017\014\020\033\021\023\033\022\034" +
    "\025\035\010\036\017\001\001\000\026\004\053\005\013" +
    "\016\061\017\052\020\062\021\056\033\055\034\057\035" +
    "\051\036\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\332\004" +
    "\015\005\013\016\031\017\014\020\033\021\023\033\022" +
    "\034\025\035\010\036\017\001\001\000\026\004\053\005" +
    "\013\016\061\017\052\020\062\021\056\033\055\034\057" +
    "\035\051\036\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\341\007\111\010\100\011\107\012\105\013" +
    "\104\001\001\000\002\001\001\000\034\006\103\007\111" +
    "\010\100\011\107\012\105\013\104\023\076\024\115\025" +
    "\343\026\114\027\113\030\112\031\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\354\004\015\005\013\016\031\017" +
    "\014\020\033\021\023\033\022\034\025\035\010\036\017" +
    "\001\001\000\002\001\001\000\026\004\053\005\013\016" +
    "\061\017\052\020\062\021\056\033\055\034\057\035\051" +
    "\036\054\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ASTNodo raiz;
    int contador;
    public static ArrayList<TError> errores;
    //METODO PARA ERROR RECUPERABLE
    public void syntax_error(Symbol s)
    {
      try
      {
        TError errorSint = new TError(s.value.toString(), "Error Sintactico", "Token no Esperado", (s.right+1), s.left);
        errores.add(errorSint);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR RECUPERADO");
      }

    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      try
      {
        /*String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("--------------Error Sintactico PANICO------------------------");
        System.out.println("Lexema: "+lexema);
        System.out.println("Fila: "+fila);
        System.out.println("Columna: "+columna);*/
        TError errorSint = new TError(s.value.toString(), "Error Sintactico", "Token no Esperado", (s.right+1), s.left);
        errores.add(errorSint);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR IRRECUPERABLE");
      }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  public static boolean es_fecha(String valor)
    {
        try
        {
            SimpleDateFormat d = new SimpleDateFormat("dd/MM/yyyy");
            Date da = d.parse(valor);
            if(valor.equals(d.format(da)))
            {
                return true;
            }
            return false;
        }
        catch(Exception ex)
        {
            return false;
        }
    }
  public static boolean es_fecha_tiempo(String valor)
  {
      try
      {
          SimpleDateFormat d = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
          Date da = d.parse(valor);
          if(valor.equals(d.format(da)))
          {
              return true;
          }
          return false;
      }
      catch(Exception ex)
      {
          return false;
      }
  }

  public static boolean es_booleano(String valor)
    {
        try
        {
            if(valor.equals("false") || valor.equals("true"))
            {
                return true;
            }
            return false;
        }
        catch(Exception ex)
        {
            return false;
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // S ::= oParent EXPLOGICA cParent 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ASTNodo padre = new ASTNodo(parser.contador,"S");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // S ::= RELACIONALES 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador,"S");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // D ::= S 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = h1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // D ::= not S 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "D");
      parser.contador++;
      padre.addHijo(new ASTNodo(parser.contador, "NOT"));
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // C ::= D 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = h1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // C ::= C and D 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "B");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      padre.addHijo(new ASTNodo(parser.contador, "AND"));
      parser.contador++;
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // B ::= C 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = h1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // B ::= B or C 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "B");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      padre.addHijo(new ASTNodo(parser.contador, "OR"));
      parser.contador++;
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPLOGICA ::= B 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "EXPLOGICA");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLOGICA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // A ::= EXP 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "A");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // A ::= A mayorigual A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "A");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        padre.addHijo(new ASTNodo(parser.contador, ">="));
        parser.contador++;
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // A ::= A menorigual A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "A");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        padre.addHijo(new ASTNodo(parser.contador, "<="));
        parser.contador++;
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // A ::= A mayor A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "A");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        padre.addHijo(new ASTNodo(parser.contador, ">"));
        parser.contador++;
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // A ::= A menor A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "A");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        padre.addHijo(new ASTNodo(parser.contador, "<"));
        parser.contador++;
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // A ::= A diferente A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "A");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        padre.addHijo(new ASTNodo(parser.contador, "!="));
        parser.contador++;
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // A ::= A igualacion A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "A");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        padre.addHijo(new ASTNodo(parser.contador, "=="));
        parser.contador++;
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RELACIONALES ::= A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "RELACIONALES");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // H ::= iden punto atexto 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "ATEXTO");
      parser.contador++;
      padre.addHijo(new ASTNodo(parser.contador, ide));
      parser.contador++;
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // H ::= iden punto atexto oParent cParent 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "ATEXTO");
      parser.contador++;
      padre.addHijo(new ASTNodo(parser.contador, ide));
      parser.contador++;
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // H ::= iden punto conteo 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "CONTEO");
      parser.contador++;
      padre.addHijo(new ASTNodo(parser.contador, ide));
      parser.contador++;
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // H ::= iden punto conteo oParent cParent 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "CONTEO");
      parser.contador++;
      padre.addHijo(new ASTNodo(parser.contador, ide));
      parser.contador++;
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // H ::= oParent EXP cParent 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT = h1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // H ::= iden oKey EXP cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "VALOR_VECTOR");
      parser.contador++;
      padre.addHijo(new ASTNodo(parser.contador, ide));
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // H ::= tFalse 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "BOOLEAN");
      parser.contador++;
      padre.addHijo(new ASTNodo(parser.contador, h1));
      parser.contador++;
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // H ::= tTrue 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "BOOLEAN");
      parser.contador++;
      padre.addHijo(new ASTNodo(parser.contador, h1));
      parser.contador++;
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // H ::= cadena2 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre;
      val = val.replace("\'","");
      if(es_fecha(val))
      {padre = new ASTNodo(parser.contador, "DATE");}
      else if(es_fecha_tiempo(val))
      {padre = new ASTNodo(parser.contador, "DATETIME");}
      else if(es_booleano(val))
      {padre = new ASTNodo(parser.contador, "BOOLEAN");}
      else
      {padre = new ASTNodo(parser.contador, "CADENA");}
      parser.contador++;
      ASTNodo valor = new ASTNodo(parser.contador, val);
      parser.contador++;
      padre.addHijo(valor);
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // H ::= cadena1 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre;
      val = val.replace("\"","");
      if(es_fecha(val))
      {padre = new ASTNodo(parser.contador, "DATE");}
      else if(es_fecha_tiempo(val))
      {padre = new ASTNodo(parser.contador, "DATETIME");}
      else if(es_booleano(val))
      {padre = new ASTNodo(parser.contador, "BOOLEAN");}
      else
      {padre = new ASTNodo(parser.contador, "CADENA");}
      parser.contador++;
      ASTNodo valor = new ASTNodo(parser.contador, val);
      parser.contador++;
      padre.addHijo(valor);
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // H ::= iden 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "IDENTIFICADOR");
      parser.contador++;
      ASTNodo valor = new ASTNodo(parser.contador, val);
      parser.contador++;
      padre.addHijo(valor);
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // H ::= numeric 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "NUMERICO");
      parser.contador++;
      ASTNodo valor = new ASTNodo(parser.contador, val);
      parser.contador++;
      padre.addHijo(valor);
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // G ::= H 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      if(h1!=null)
      {RESULT = h1;}
      else
      {RESULT = null;}
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // G ::= H dism 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "G");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      padre.addHijo(new ASTNodo(parser.contador, "--"));
      parser.contador++;
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // G ::= H aum 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "G");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      padre.addHijo(new ASTNodo(parser.contador, "++"));
      parser.contador++;
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // F ::= G 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "F");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // F ::= F elev G 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "F");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      ASTNodo sig = new ASTNodo(parser.contador, "^");
      parser.contador++;
      padre.addHijo(sig);
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // T ::= F 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "T");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // T ::= T divi F 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "T");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      ASTNodo sig = new ASTNodo(parser.contador, "/");
      parser.contador++;
      padre.addHijo(sig);
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // T ::= T por F 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "T");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      ASTNodo sig = new ASTNodo(parser.contador, "*");
      parser.contador++;
      padre.addHijo(sig);
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= T 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "E");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E menos T 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "E");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      ASTNodo sig = new ASTNodo(parser.contador, "-");
      parser.contador++;
      padre.addHijo(sig);
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E mas T 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "E");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      ASTNodo sig = new ASTNodo(parser.contador, "+");
      parser.contador++;
      padre.addHijo(sig);
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "EXP");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MENSAJE ::= mensaje oParent EXP cParent pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "MENSAJE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MENSAJE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RETORNAR ::= retornar error pcoma 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNAR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RETORNAR ::= retornar EXP pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "RETORNAR");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNAR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION ::= funcion error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCION ::= funcion iden oParent cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "FUNCION");
          parser.contador++;
          ASTNodo nom = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(nom);
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCION ::= funcion iden oParent L_ID cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "FUNCION");
          parser.contador++;
          ASTNodo nom = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(nom);
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION ::= funcion iden oParent cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "FUNCION");
          parser.contador++;
          ASTNodo nom = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(nom);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION ::= funcion iden oParent L_ID cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "FUNCION");
          parser.contador++;
          ASTNodo nom = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(nom);
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IMPRIMIR ::= imprimir oParent EXP cParent pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMPRIMIR");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENT_MIENTRAS ::= mientras error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENT_MIENTRAS ::= mientras oParent EXPLOGICA cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 ASTNodo padre = new ASTNodo(parser.contador,"SENT_MIENTRAS");
                 parser.contador++;
                 if(h1!=null)
                 {padre.addHijo(h1);}
                 if(h2!=null)
                 {padre.addHijo(h2);}
                 RESULT = padre;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENT_MIENTRAS ::= mientras oParent EXPLOGICA cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                 ASTNodo padre = new ASTNodo(parser.contador,"SENT_MIENTRAS");
                 parser.contador++;
                 if(h1!=null)
                 {padre.addHijo(h1);}
                 RESULT = padre;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPER ::= dism 
            {
              ASTNodo RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo n = new ASTNodo(parser.contador, dm);
        parser.contador++;
        RESULT = n;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPER ::= aum 
            {
              ASTNodo RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo n = new ASTNodo(parser.contador, am);
        parser.contador++;
        RESULT = n;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENT_PARA ::= para error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_PARA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENT_PARA ::= para oParent iden dosP EXP pcoma EXPLOGICA pcoma iden OPER cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h4 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_PARA");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador,ide));
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            if(h3!=null)
            {padre.addHijo(h3);}
            if(h4!=null)
            {padre.addHijo(h4);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_PARA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENT_PARA ::= para oParent iden dosP EXP pcoma EXPLOGICA pcoma iden OPER cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_PARA");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador,ide));
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            if(h3!=null)
            {padre.addHijo(h3);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_PARA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DEFECTO ::= cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DEFECTO ::= defecto dosP CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "DEFECTO");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASO ::= caso error dosP 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASO ::= caso EXP dosP CUERPO_CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "CASO");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L_CASOS ::= CASO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_CASOS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L_CASOS ::= CASO L_CASOS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_CASOS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SELECCIONA ::= selecciona error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SELECCIONA ::= selecciona oParent EXP cParent oKey L_CASOS DEFECTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SELECCIONA");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            if(h3!=null)
            {padre.addHijo(h3);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SINO ::= sino error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SINO ::= sino oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = h1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SINO ::= sino oKey cKey 
            {
              ASTNodo RESULT =null;
		
          RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT_SI ::= si error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT_SI ::= si oParent EXPLOGICA cParent oKey CUERPO_CJS cKey SINO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_SI");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            if(h3!=null)
            {padre.addHijo(h3);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT_SI ::= si oParent EXPLOGICA cParent oKey cKey SINO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_SI");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT_SI ::= si oParent EXPLOGICA cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_SI");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT_SI ::= si oParent EXPLOGICA cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_SI");//IGUAL QUE 3
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AS_VAR ::= L_ID dosP oKey EXP ARRAY pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "AS_VAR_3");//ASIGNACION DE UN ARRAY A UNA VARIABLE
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        if(h3!=null)
        {padre.addHijo(h3);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AS_VAR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AS_VAR ::= L_ID oKey EXP cKey dosP EXP pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "AS_VAR_2");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        ASTNodo index = new ASTNodo(parser.contador, "INDEX");
        parser.contador++;
        if(h2!=null)
        {index.addHijo(h2);}
        padre.addHijo(index);
        if(h3!=null)
        {padre.addHijo(h3);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AS_VAR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AS_VAR ::= L_ID dosP EXP pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "AS_VAR_1");//ASIGNACION SIMPLE A VARIABLE SIMPLE
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}//ID O IDS
        if(h2!=null)
        {padre.addHijo(h2);}//VALOR DE LA VARIABLE
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AS_VAR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARRAY ::= cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARRAY ::= coma EXP ARRAY 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           ASTNodo padre = new ASTNodo(parser.contador, "ARRAY");
           parser.contador++;
           if(h1!=null)
           {padre.addHijo(h1);}
           if(h2!=null)
           {padre.addHijo(h2);}
           RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_ID ::= error iden 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ID",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_ID ::= iden error coma 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ID",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L_ID ::= iden 
            {
              ASTNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "L_ID");
        parser.contador++;
        ASTNodo ide = new ASTNodo(parser.contador, id);
        parser.contador++;
        padre.addHijo(ide);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ID",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L_ID ::= L_ID coma iden 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "L_ID");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        ASTNodo id = new ASTNodo(parser.contador, ide);
        parser.contador++;
        padre.addHijo(id);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ID",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // C_VAR ::= oKey error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // C_VAR ::= error dimv 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // C_VAR ::= dimv error pcoma 
            {
              ASTNodo RESULT =null;
		
        RESULT = null;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // C_VAR ::= dimv L_ID dosP oKey EXP ARRAY pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_5");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        if(h3!=null)
        {padre.addHijo(h3);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // C_VAR ::= dimv L_ID oKey EXP cKey dosP oKey EXP ARRAY pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h4 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_4");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        ASTNodo di = new ASTNodo(parser.contador, "DIMENSION");
        parser.contador++;
        if(h2!=null)
        {di.addHijo(h2);}
        padre.addHijo(di);
        if(h3!=null)
        {padre.addHijo(h3);}
        if(h4!=null)
        {padre.addHijo(h4);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // C_VAR ::= dimv L_ID oKey EXP cKey pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_3");//VECTOR SIN ASIGNACION
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        ASTNodo di = new ASTNodo(parser.contador, "DIMENSION");
        parser.contador++;
        if(h2!=null)
        {di.addHijo(h2);}
        padre.addHijo(di);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // C_VAR ::= dimv L_ID dosP EXP pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_2");//SIMPLE ASIGNACION
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C_VAR ::= dimv L_ID pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_1");//SIN ASIGNACION
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_CJS ::= C_VAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_CJS ::= AS_VAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_CJS ::= SENT_SI 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_CJS ::= SELECCIONA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_CJS ::= SENT_PARA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_CJS ::= SENT_MIENTRAS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO_CJS ::= detener 
            {
              ASTNodo RESULT =null;
		
                ASTNodo padre = new ASTNodo(parser.contador, "DETENER");
                parser.contador++;
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_CJS ::= IMPRIMIR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_CJS ::= FUNCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_CJS ::= RETORNAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_CJS ::= CUERPO_CJS RETORNAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_CJS ::= CUERPO_CJS FUNCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO_CJS ::= CUERPO_CJS IMPRIMIR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_CJS ::= CUERPO_CJS detener 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                padre.addHijo(new ASTNodo(parser.contador,"DETENER"));
                parser.contador++;
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_CJS ::= CUERPO_CJS SENT_MIENTRAS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_CJS ::= CUERPO_CJS SENT_PARA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_CJS ::= CUERPO_CJS SELECCIONA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_CJS ::= CUERPO_CJS SENT_SI 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO_CJS ::= CUERPO_CJS AS_VAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_CJS ::= CUERPO_CJS C_VAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_CJS ::= NT$0 CUERPO_CJS 
            {
              ASTNodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ASTNodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "INICIO_CJS");
                  parser.contador++;
                  if(h1!=null)
                  {padre.addHijo(h1);}
                  parser.raiz = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CJS",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              ASTNodo RESULT =null;
parser.errores = new ArrayList<>(); parser.contador = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_CJS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo start_val = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

