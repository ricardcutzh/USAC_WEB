
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 27 00:46:48 CST 2018
//----------------------------------------------------

package CJS;

import java_cup.runtime.*;
import AST.*;
import java.util.ArrayList;
import java.util.Date;
import java.text.SimpleDateFormat;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 27 00:46:48 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\034\002\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\005\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\005\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\005\000" +
    "\002\004\007\000\002\004\010\000\002\004\014\000\002" +
    "\004\011\000\002\004\014\000\002\005\005\000\002\005" +
    "\003\000\002\015\005\000\002\015\003\000\002\016\006" +
    "\000\002\016\011\000\002\016\010\000\002\016\013\000" +
    "\002\017\010\000\002\017\011\000\002\017\011\000\002" +
    "\017\012\000\002\017\005\000\002\006\005\000\002\006" +
    "\006\000\002\006\005\000\002\020\011\000\002\020\005" +
    "\000\002\022\004\000\002\022\003\000\002\023\006\000" +
    "\002\023\005\000\002\024\006\000\002\024\003\000\002" +
    "\021\016\000\002\021\017\000\002\021\005\000\002\007" +
    "\003\000\002\007\003\000\002\010\010\000\002\010\011" +
    "\000\002\010\005\000\002\011\007\000\002\012\011\000" +
    "\002\012\010\000\002\012\012\000\002\012\011\000\002" +
    "\012\005\000\002\013\005\000\002\013\005\000\002\014" +
    "\007\000\002\027\013\000\002\027\020\000\002\030\013" +
    "\000\002\030\015\000\002\030\013\000\002\030\015\000" +
    "\002\033\005\000\002\025\005\000\002\025\003\000\002" +
    "\026\005\000\002\026\006\000\002\031\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\006\000\002\032" +
    "\005\000\002\032\007\000\002\032\005\000\002\032\007" +
    "\000\002\032\005\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\034\003\000\004\000\006\000\043\000\050" +
    "\000\052\000\055\000\056\000\057\000\060\000\061\000" +
    "\062\000\063\000\001\002\000\034\003\031\004\025\006" +
    "\043\043\026\050\036\052\011\055\010\056\015\057\035" +
    "\060\014\061\040\062\020\063\033\001\002\000\004\002" +
    "\006\001\002\000\004\002\001\001\002\000\042\002\uffef" +
    "\004\uffef\006\uffef\042\uffef\043\uffef\050\uffef\052\uffef\053" +
    "\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef" +
    "\062\uffef\063\uffef\001\002\000\006\003\u0127\026\u0128\001" +
    "\002\000\006\003\u0112\026\u0113\001\002\000\042\002\uffed" +
    "\004\uffed\006\uffed\042\uffed\043\uffed\050\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\001\002\000\042\002\uffe4\004\uffe4\006" +
    "\uffe4\042\uffe4\043\uffe4\050\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\001\002\000\004\026\u010e\001\002\000\006\003\u0105" +
    "\026\u0106\001\002\000\010\007\362\010\227\041\361\001" +
    "\002\000\042\002\uffe8\004\uffe8\006\uffe8\042\uffe8\043\uffe8" +
    "\050\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\001\002\000\004" +
    "\026\355\001\002\000\042\002\uffe1\004\uffe1\006\uffe1\042" +
    "\uffe1\043\uffe1\050\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\001" +
    "\002\000\042\002\uffee\004\uffee\006\uffee\042\uffee\043\uffee" +
    "\050\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\060\uffee\061\uffee\062\uffee\063\uffee\001\002\000\034" +
    "\002\uffff\004\025\006\043\043\026\050\036\052\011\055" +
    "\010\056\015\057\221\060\014\061\040\062\020\063\033" +
    "\001\002\000\042\002\uffe5\004\uffe5\006\uffe5\042\uffe5\043" +
    "\uffe5\050\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000" +
    "\004\006\177\001\002\000\026\003\314\006\056\012\060" +
    "\021\064\022\061\023\057\024\062\025\052\026\051\040" +
    "\053\001\002\000\042\002\uffe2\004\uffe2\006\uffe2\042\uffe2" +
    "\043\uffe2\050\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\001\002" +
    "\000\042\002\uffea\004\uffea\006\uffea\042\uffea\043\uffea\050" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\001\002\000\042\002" +
    "\uffe0\004\uffe0\006\uffe0\042\uffe0\043\uffe0\050\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\001\002\000\004\005\313\001\002" +
    "\000\004\047\262\001\002\000\042\002\uffe3\004\uffe3\006" +
    "\uffe3\042\uffe3\043\uffe3\050\uffe3\052\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\001\002\000\004\005\261\001\002\000\006\003\237" +
    "\026\240\001\002\000\042\002\uffe6\004\uffe6\006\uffe6\042" +
    "\uffe6\043\uffe6\050\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\001" +
    "\002\000\006\003\174\006\175\001\002\000\042\002\uffe9" +
    "\004\uffe9\006\uffe9\042\uffe9\043\uffe9\050\uffe9\052\uffe9\053" +
    "\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\001\002\000\042\002\uffeb\004\uffeb\006" +
    "\uffeb\042\uffeb\043\uffeb\050\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\001\002\000\020\007\uffd8\010\uffd8\017\044\020\047" +
    "\026\050\041\uffd8\047\045\001\002\000\006\005\uffbe\027" +
    "\uffbe\001\002\000\006\064\151\065\152\001\002\000\004" +
    "\005\150\001\002\000\006\005\uffbd\027\uffbd\001\002\000" +
    "\026\006\056\012\060\021\064\022\061\023\057\024\062" +
    "\025\052\026\051\027\063\040\053\001\002\000\024\006" +
    "\056\012\060\021\064\022\061\023\057\024\062\025\052" +
    "\026\051\040\053\001\002\000\054\005\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c" +
    "\017\uff8c\020\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\042\uff8c\001\002" +
    "\000\024\006\056\012\060\021\064\022\061\023\057\024" +
    "\062\025\052\026\051\040\053\001\002\000\006\010\140" +
    "\027\141\001\002\000\054\005\uff85\007\uff85\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85" +
    "\020\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\036\uff85\037\uff85\042\uff85\001\002\000\062" +
    "\005\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\016\uff90\017\uff90\020\uff90\026\050\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036" +
    "\uff90\037\uff90\041\127\042\uff90\047\126\001\002\000\054" +
    "\005\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\042\uff8e\001\002\000\024\006\056\012\060\021\064" +
    "\022\061\023\057\024\062\025\052\026\051\040\053\001" +
    "\002\000\054\005\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f" +
    "\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\042\uff8f\001\002\000\054\005\uff8d\007" +
    "\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\042\uff8d" +
    "\001\002\000\054\005\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\042\uffa7\001\002\000\054\005\uff91" +
    "\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\027\uff91\030\uff91\031\uff91" +
    "\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\042" +
    "\uff91\001\002\000\006\010\uffa8\027\uffa8\001\002\000\054" +
    "\005\uffa5\007\uffa5\010\uffa5\011\104\012\072\013\101\014" +
    "\067\015\102\016\100\017\076\020\106\027\uffa5\030\077" +
    "\031\075\032\105\033\074\034\103\035\070\036\073\037" +
    "\071\042\uffa5\001\002\000\024\006\056\012\060\021\064" +
    "\022\061\023\057\024\062\025\052\026\051\040\053\001" +
    "\002\000\024\006\056\012\060\021\064\022\061\023\057" +
    "\024\062\025\052\026\051\040\053\001\002\000\024\006" +
    "\056\012\060\021\064\022\061\023\057\024\062\025\052" +
    "\026\051\040\053\001\002\000\024\006\056\012\060\021" +
    "\064\022\061\023\057\024\062\025\052\026\051\040\053" +
    "\001\002\000\024\006\056\012\060\021\064\022\061\023" +
    "\057\024\062\025\052\026\051\040\053\001\002\000\024" +
    "\006\056\012\060\021\064\022\061\023\057\024\062\025" +
    "\052\026\051\040\053\001\002\000\024\006\056\012\060" +
    "\021\064\022\061\023\057\024\062\025\052\026\051\040" +
    "\053\001\002\000\054\005\uff96\007\uff96\010\uff96\011\uff96" +
    "\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\042\uff96\001\002\000\024\006" +
    "\056\012\060\021\064\022\061\023\057\024\062\025\052" +
    "\026\051\040\053\001\002\000\024\006\056\012\060\021" +
    "\064\022\061\023\057\024\062\025\052\026\051\040\053" +
    "\001\002\000\024\006\056\012\060\021\064\022\061\023" +
    "\057\024\062\025\052\026\051\040\053\001\002\000\024" +
    "\006\056\012\060\021\064\022\061\023\057\024\062\025" +
    "\052\026\051\040\053\001\002\000\024\006\056\012\060" +
    "\021\064\022\061\023\057\024\062\025\052\026\051\040" +
    "\053\001\002\000\024\006\056\012\060\021\064\022\061" +
    "\023\057\024\062\025\052\026\051\040\053\001\002\000" +
    "\024\006\056\012\060\021\064\022\061\023\057\024\062" +
    "\025\052\026\051\040\053\001\002\000\054\005\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95" +
    "\016\uff95\017\uff95\020\uff95\027\uff95\030\uff95\031\uff95\032" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\042\uff95" +
    "\001\002\000\054\005\uff9b\007\uff9b\010\uff9b\011\104\012" +
    "\072\013\101\014\067\015\102\016\100\017\uff9b\020\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\042\uff9b\001\002\000\054\005\uffa4" +
    "\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\101\014\067\015" +
    "\102\016\100\017\uffa4\020\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\042" +
    "\uffa4\001\002\000\054\005\uff9a\007\uff9a\010\uff9a\011\104" +
    "\012\072\013\101\014\067\015\102\016\100\017\uff9a\020" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\042\uff9a\001\002\000\054\005" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\102\016\uff9f\017\uff9f\020\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\042\uff9f\001\002\000\054\005\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\102\016\uffa2\017\uffa2" +
    "\020\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\042\uffa2\001\002\000\054" +
    "\005\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\102\016\uffa0\017\uffa0\020\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\042\uffa0\001\002\000\054\005\uff9e\007\uff9e\010\uff9e" +
    "\011\104\012\072\013\101\014\067\015\102\016\100\017" +
    "\uff9e\020\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\042\uff9e\001\002\000" +
    "\054\005\uff9d\007\uff9d\010\uff9d\011\104\012\072\013\101" +
    "\014\067\015\102\016\100\017\uff9d\020\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\042\uff9d\001\002\000\054\005\uff9c\007\uff9c\010" +
    "\uff9c\011\104\012\072\013\101\014\067\015\102\016\100" +
    "\017\uff9c\020\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\042\uff9c\001\002" +
    "\000\054\005\uff98\007\uff98\010\uff98\011\104\012\072\013" +
    "\101\014\067\015\102\016\100\017\uff98\020\uff98\027\uff98" +
    "\030\077\031\075\032\105\033\074\034\103\035\070\036" +
    "\uff98\037\uff98\042\uff98\001\002\000\054\005\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\101\014\067\015\102\016" +
    "\100\017\uffa3\020\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\042\uffa3\001" +
    "\002\000\054\005\uff97\007\uff97\010\uff97\011\104\012\072" +
    "\013\101\014\067\015\102\016\100\017\uff97\020\uff97\027" +
    "\uff97\030\077\031\075\032\105\033\074\034\103\035\070" +
    "\036\073\037\uff97\042\uff97\001\002\000\054\005\uff99\007" +
    "\uff99\010\uff99\011\104\012\072\013\101\014\067\015\102" +
    "\016\100\017\uff99\020\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\042\uff99" +
    "\001\002\000\054\005\uffa1\007\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\015\102\016\uffa1\017\uffa1\020\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\042\uffa1\001\002\000\054\005\uff93" +
    "\007\uff93\010\uff93\011\uff93\012\uff93\013\101\014\067\015" +
    "\102\016\100\017\uff93\020\uff93\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\042" +
    "\uff93\001\002\000\006\045\133\046\132\001\002\000\024" +
    "\006\056\012\060\021\064\022\061\023\057\024\062\025" +
    "\052\026\051\040\053\001\002\000\004\042\131\001\002" +
    "\000\054\005\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\042\uff8b\001\002\000\056\005\uff86\007\uff86" +
    "\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\026\136\027\uff86\030\uff86\031\uff86" +
    "\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\042" +
    "\uff86\001\002\000\056\005\uff88\007\uff88\010\uff88\011\uff88" +
    "\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020" +
    "\uff88\026\134\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88" +
    "\034\uff88\035\uff88\036\uff88\037\uff88\042\uff88\001\002\000" +
    "\004\027\135\001\002\000\054\005\uff89\007\uff89\010\uff89" +
    "\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017" +
    "\uff89\020\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\035\uff89\036\uff89\037\uff89\042\uff89\001\002\000" +
    "\004\027\137\001\002\000\054\005\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017" +
    "\uff87\020\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\034\uff87\035\uff87\036\uff87\037\uff87\042\uff87\001\002\000" +
    "\024\006\056\012\060\021\064\022\061\023\057\024\062" +
    "\025\052\026\051\040\053\001\002\000\054\005\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\017\uffa6\020\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\042\uffa6" +
    "\001\002\000\006\010\uffa9\027\uffa9\001\002\000\054\005" +
    "\uff94\007\uff94\010\uff94\011\104\012\072\013\101\014\067" +
    "\015\102\016\100\017\uff94\020\uff94\027\uff94\030\077\031" +
    "\075\032\105\033\074\034\103\035\070\036\uff94\037\uff94" +
    "\042\uff94\001\002\000\004\027\147\001\002\000\044\011" +
    "\104\012\072\013\101\014\067\015\102\016\100\017\076" +
    "\020\106\027\146\030\077\031\075\032\105\033\074\034" +
    "\103\035\070\036\073\037\071\001\002\000\054\005\uff92" +
    "\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\020\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\042" +
    "\uff92\001\002\000\054\005\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\042\uff8a\001\002\000\042\002" +
    "\uffaa\004\uffaa\006\uffaa\042\uffaa\043\uffaa\050\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\062\uffaa\063\uffaa\001\002\000\004\026\166\001\002" +
    "\000\004\026\153\001\002\000\004\022\154\001\002\000" +
    "\004\010\155\001\002\000\006\006\156\061\040\001\002" +
    "\000\004\026\162\001\002\000\004\027\160\001\002\000" +
    "\004\005\161\001\002\000\042\002\uffac\004\uffac\006\uffac" +
    "\042\uffac\043\uffac\050\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\001\002\000\004\027\163\001\002\000\004\027\164\001" +
    "\002\000\004\005\165\001\002\000\042\002\uffab\004\uffab" +
    "\006\uffab\042\uffab\043\uffab\050\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\001\002\000\004\022\167\001\002\000\004\010" +
    "\170\001\002\000\024\006\056\012\060\021\064\022\061" +
    "\023\057\024\062\025\052\026\051\040\053\001\002\000" +
    "\004\027\172\001\002\000\004\005\173\001\002\000\042" +
    "\002\uffb0\004\uffb0\006\uffb0\042\uffb0\043\uffb0\050\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\001\002\000\004\042\236\001" +
    "\002\000\004\026\176\001\002\000\006\006\177\027\201" +
    "\001\002\000\014\005\uffd8\007\uffd8\010\uffd8\027\uffd8\041" +
    "\uffd8\001\002\000\006\010\227\027\230\001\002\000\004" +
    "\041\202\001\002\000\036\003\031\004\025\006\043\042" +
    "\203\043\026\050\036\052\011\055\010\056\015\057\035" +
    "\060\014\061\040\062\020\063\033\001\002\000\044\002" +
    "\uffb7\004\uffb7\006\uffb7\027\uffb7\042\uffb7\043\uffb7\050\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\001\002\000\034\004\025" +
    "\006\043\042\206\043\026\050\036\052\011\055\010\056" +
    "\015\057\221\060\014\061\040\062\020\063\033\001\002" +
    "\000\042\002\ufff0\004\ufff0\006\ufff0\042\ufff0\043\ufff0\050" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\063\ufff0\001\002\000\044\002" +
    "\uffb5\004\uffb5\006\uffb5\027\uffb5\042\uffb5\043\uffb5\050\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000\042\002\ufff2" +
    "\004\ufff2\006\ufff2\042\ufff2\043\ufff2\050\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\001\002\000\042\002\ufffb\004\ufffb\006" +
    "\ufffb\042\ufffb\043\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\001\002\000\042\002\ufff7\004\ufff7\006\ufff7\042\ufff7" +
    "\043\ufff7\050\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002" +
    "\000\042\002\ufffe\004\ufffe\006\ufffe\042\ufffe\043\ufffe\050" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\063\ufffe\001\002\000\042\002" +
    "\ufff1\004\ufff1\006\ufff1\042\ufff1\043\ufff1\050\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\001\002\000\042\002\ufffa\004\ufffa" +
    "\006\ufffa\042\ufffa\043\ufffa\050\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\001\002\000\042\002\ufffd\004\ufffd\006\ufffd\042" +
    "\ufffd\043\ufffd\050\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\001" +
    "\002\000\042\002\ufff5\004\ufff5\006\ufff5\042\ufff5\043\ufff5" +
    "\050\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\001\002\000\004" +
    "\005\226\001\002\000\042\002\ufffc\004\ufffc\006\ufffc\042" +
    "\ufffc\043\ufffc\050\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\001" +
    "\002\000\004\005\225\001\002\000\042\002\ufff9\004\ufff9" +
    "\006\ufff9\042\ufff9\043\ufff9\050\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\001\002\000\042\002\ufff4\004\ufff4\006\ufff4\042" +
    "\ufff4\043\ufff4\050\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\001" +
    "\002\000\042\002\ufff6\004\ufff6\006\ufff6\042\ufff6\043\ufff6" +
    "\050\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\001\002\000\042" +
    "\002\ufff8\004\ufff8\006\ufff8\042\ufff8\043\ufff8\050\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\001\002\000\042\002\ufff3\004" +
    "\ufff3\006\ufff3\042\ufff3\043\ufff3\050\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\001\002\000\004\006\235\001\002\000\004" +
    "\041\231\001\002\000\036\003\031\004\025\006\043\042" +
    "\232\043\026\050\036\052\011\055\010\056\015\057\035" +
    "\060\014\061\040\062\020\063\033\001\002\000\044\002" +
    "\uffb8\004\uffb8\006\uffb8\027\uffb8\042\uffb8\043\uffb8\050\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\001\002\000\034\004\025" +
    "\006\043\042\234\043\026\050\036\052\011\055\010\056" +
    "\015\057\221\060\014\061\040\062\020\063\033\001\002" +
    "\000\044\002\uffb6\004\uffb6\006\uffb6\027\uffb6\042\uffb6\043" +
    "\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\001\002\000" +
    "\014\005\uffd9\007\uffd9\010\uffd9\027\uffd9\041\uffd9\001\002" +
    "\000\044\002\uffb4\004\uffb4\006\uffb4\027\uffb4\042\uffb4\043" +
    "\uffb4\050\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\001\002\000" +
    "\004\042\260\001\002\000\024\006\056\012\060\021\064" +
    "\022\061\023\057\024\062\025\052\026\051\040\053\001" +
    "\002\000\004\027\242\001\002\000\004\041\243\001\002" +
    "\000\036\003\031\004\025\006\043\042\244\043\026\050" +
    "\036\052\011\055\010\056\015\057\035\060\014\061\040" +
    "\062\020\063\033\001\002\000\044\002\uffd1\004\uffd1\006" +
    "\uffd1\042\uffd1\043\uffd1\050\uffd1\051\247\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\001\002\000\034\004\025\006\043\042\246" +
    "\043\026\050\036\052\011\055\010\056\015\057\221\060" +
    "\014\061\040\062\020\063\033\001\002\000\044\002\uffd0" +
    "\004\uffd0\006\uffd0\042\uffd0\043\uffd0\050\uffd0\051\247\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\001\002\000\006\003\251\041" +
    "\252\001\002\000\042\002\uffce\004\uffce\006\uffce\042\uffce" +
    "\043\uffce\050\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\001\002" +
    "\000\004\042\256\001\002\000\036\003\031\004\025\006" +
    "\043\042\253\043\026\050\036\052\011\055\010\056\015" +
    "\057\035\060\014\061\040\062\020\063\033\001\002\000" +
    "\042\002\uffcc\004\uffcc\006\uffcc\042\uffcc\043\uffcc\050\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\001\002\000\034\004\025" +
    "\006\043\042\255\043\026\050\036\052\011\055\010\056" +
    "\015\057\221\060\014\061\040\062\020\063\033\001\002" +
    "\000\042\002\uffcb\004\uffcb\006\uffcb\042\uffcb\043\uffcb\050" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\061\uffcb\062\uffcb\063\uffcb\001\002\000\042\002" +
    "\uffca\004\uffca\006\uffca\042\uffca\043\uffca\050\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\001\002\000\042\002\uffcf\004\uffcf" +
    "\006\uffcf\042\uffcf\043\uffcf\050\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\001\002\000\042\002\uffcd\004\uffcd\006\uffcd\042" +
    "\uffcd\043\uffcd\050\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\001" +
    "\002\000\042\002\uffe7\004\uffe7\006\uffe7\042\uffe7\043\uffe7" +
    "\050\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002\000\006" +
    "\044\264\065\263\001\002\000\004\026\300\001\002\000" +
    "\004\026\265\001\002\000\004\022\266\001\002\000\004" +
    "\027\267\001\002\000\004\047\270\001\002\000\004\064" +
    "\271\001\002\000\004\026\272\001\002\000\004\022\273" +
    "\001\002\000\004\010\274\001\002\000\024\006\056\012" +
    "\060\021\064\022\061\023\057\024\062\025\052\026\051" +
    "\040\053\001\002\000\004\027\276\001\002\000\004\005" +
    "\277\001\002\000\042\002\uffaf\004\uffaf\006\uffaf\042\uffaf" +
    "\043\uffaf\050\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\001\002" +
    "\000\004\022\301\001\002\000\004\010\302\001\002\000" +
    "\006\006\303\061\040\001\002\000\004\026\307\001\002" +
    "\000\004\027\305\001\002\000\004\005\306\001\002\000" +
    "\042\002\uffae\004\uffae\006\uffae\042\uffae\043\uffae\050\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\001\002\000\004\027\310" +
    "\001\002\000\004\027\311\001\002\000\004\005\312\001" +
    "\002\000\042\002\uffad\004\uffad\006\uffad\042\uffad\043\uffad" +
    "\050\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\001\002\000\042" +
    "\002\uffec\004\uffec\006\uffec\042\uffec\043\uffec\050\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
    "\061\uffec\062\uffec\063\uffec\001\002\000\004\005\317\001" +
    "\002\000\004\005\316\001\002\000\042\002\uffb3\004\uffb3" +
    "\006\uffb3\042\uffb3\043\uffb3\050\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\001\002\000\042\002\uffb2\004\uffb2\006\uffb2\042" +
    "\uffb2\043\uffb2\050\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\001" +
    "\002\000\012\005\321\007\323\010\227\041\322\001\002" +
    "\000\042\002\uffdf\004\uffdf\006\uffdf\042\uffdf\043\uffdf\050" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\001\002\000\024\006" +
    "\056\012\060\021\064\022\061\023\057\024\062\025\052" +
    "\026\051\040\053\001\002\000\030\006\056\012\060\021" +
    "\064\022\061\023\057\024\062\025\052\026\051\040\053" +
    "\041\326\063\324\001\002\000\004\047\337\001\002\000" +
    "\004\005\336\001\002\000\024\006\056\012\060\021\064" +
    "\022\061\023\057\024\062\025\052\026\051\040\053\001" +
    "\002\000\006\010\331\042\330\001\002\000\004\005\uffd6" +
    "\001\002\000\024\006\056\012\060\021\064\022\061\023" +
    "\057\024\062\025\052\026\051\040\053\001\002\000\004" +
    "\005\333\001\002\000\042\002\uffdb\004\uffdb\006\uffdb\042" +
    "\uffdb\043\uffdb\050\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\001" +
    "\002\000\006\010\331\042\330\001\002\000\004\005\uffd7" +
    "\001\002\000\042\002\uffde\004\uffde\006\uffde\042\uffde\043" +
    "\uffde\050\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\001\002\000" +
    "\004\044\340\001\002\000\004\026\341\001\002\000\004" +
    "\022\342\001\002\000\004\027\343\001\002\000\004\005" +
    "\344\001\002\000\042\002\uffda\004\uffda\006\uffda\042\uffda" +
    "\043\uffda\050\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\001\002" +
    "\000\004\042\346\001\002\000\006\005\347\007\350\001" +
    "\002\000\042\002\uffdd\004\uffdd\006\uffdd\042\uffdd\043\uffdd" +
    "\050\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002\000\004" +
    "\041\351\001\002\000\024\006\056\012\060\021\064\022" +
    "\061\023\057\024\062\025\052\026\051\040\053\001\002" +
    "\000\006\010\331\042\330\001\002\000\004\005\354\001" +
    "\002\000\042\002\uffdc\004\uffdc\006\uffdc\042\uffdc\043\uffdc" +
    "\050\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\001\002\000\024" +
    "\006\056\012\060\021\064\022\061\023\057\024\062\025" +
    "\052\026\051\040\053\001\002\000\004\027\357\001\002" +
    "\000\004\005\360\001\002\000\042\002\uffb1\004\uffb1\006" +
    "\uffb1\042\uffb1\043\uffb1\050\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\001\002\000\024\006\056\012\060\021\064\022\061" +
    "\023\057\024\062\025\052\026\051\040\053\001\002\000" +
    "\030\006\056\012\060\021\064\022\061\023\057\024\062" +
    "\025\052\026\051\040\053\041\365\063\363\001\002\000" +
    "\004\047\372\001\002\000\004\005\371\001\002\000\024" +
    "\006\056\012\060\021\064\022\061\023\057\024\062\025" +
    "\052\026\051\040\053\001\002\000\006\010\331\042\330" +
    "\001\002\000\004\005\370\001\002\000\042\002\uffd3\004" +
    "\uffd3\006\uffd3\042\uffd3\043\uffd3\050\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\001\002\000\042\002\uffd5\004\uffd5\006\uffd5" +
    "\042\uffd5\043\uffd5\050\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\001\002\000\004\044\373\001\002\000\004\026\374\001" +
    "\002\000\004\022\375\001\002\000\004\027\376\001\002" +
    "\000\004\005\377\001\002\000\042\002\uffd2\004\uffd2\006" +
    "\uffd2\042\uffd2\043\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\001\002\000\004\042\u0101\001\002\000\004\007\u0102" +
    "\001\002\000\024\006\056\012\060\021\064\022\061\023" +
    "\057\024\062\025\052\026\051\040\053\001\002\000\004" +
    "\005\u0104\001\002\000\042\002\uffd4\004\uffd4\006\uffd4\042" +
    "\uffd4\043\uffd4\050\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\001" +
    "\002\000\004\042\u010d\001\002\000\024\006\056\012\060" +
    "\021\064\022\061\023\057\024\062\025\052\026\051\040" +
    "\053\001\002\000\004\027\u0108\001\002\000\004\041\u0109" +
    "\001\002\000\036\003\031\004\025\006\043\042\u010a\043" +
    "\026\050\036\052\011\055\010\056\015\057\035\060\014" +
    "\061\040\062\020\063\033\001\002\000\042\002\uffbc\004" +
    "\uffbc\006\uffbc\042\uffbc\043\uffbc\050\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\001\002\000\034\004\025\006\043\042\u010c" +
    "\043\026\050\036\052\011\055\010\056\015\057\221\060" +
    "\014\061\040\062\020\063\033\001\002\000\042\002\uffbb" +
    "\004\uffbb\006\uffbb\042\uffbb\043\uffbb\050\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\001\002\000\042\002\uffba\004\uffba\006" +
    "\uffba\042\uffba\043\uffba\050\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\001\002\000\024\006\056\012\060\021\064\022\061" +
    "\023\057\024\062\025\052\026\051\040\053\001\002\000" +
    "\004\027\u0110\001\002\000\004\005\u0111\001\002\000\042" +
    "\002\uffb9\004\uffb9\006\uffb9\042\uffb9\043\uffb9\050\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\001\002\000\004\042\u0126\001" +
    "\002\000\024\006\056\012\060\021\064\022\061\023\057" +
    "\024\062\025\052\026\051\040\053\001\002\000\004\027" +
    "\u0115\001\002\000\004\041\u0116\001\002\000\004\053\u0118" +
    "\001\002\000\006\042\u0120\054\u0122\001\002\000\026\003" +
    "\u011b\006\056\012\060\021\064\022\061\023\057\024\062" +
    "\025\052\026\051\040\053\001\002\000\010\042\uffc6\053" +
    "\u0118\054\uffc6\001\002\000\006\042\uffc7\054\uffc7\001\002" +
    "\000\004\007\u011f\001\002\000\004\007\u011d\001\002\000" +
    "\034\003\031\004\025\006\043\043\026\050\036\052\011" +
    "\055\010\056\015\057\035\060\014\061\040\062\020\063" +
    "\033\001\002\000\040\004\025\006\043\042\uffc5\043\026" +
    "\050\036\052\011\053\uffc5\054\uffc5\055\010\056\015\057" +
    "\221\060\014\061\040\062\020\063\033\001\002\000\010" +
    "\042\uffc4\053\uffc4\054\uffc4\001\002\000\042\002\uffc2\004" +
    "\uffc2\006\uffc2\042\uffc2\043\uffc2\050\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\001\002\000\042\002\uffc9\004\uffc9\006\uffc9" +
    "\042\uffc9\043\uffc9\050\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\001\002\000\004\007\u0123\001\002\000\034\003\031\004" +
    "\025\006\043\043\026\050\036\052\011\055\010\056\015" +
    "\057\035\060\014\061\040\062\020\063\033\001\002\000" +
    "\034\004\025\006\043\042\u0125\043\026\050\036\052\011" +
    "\055\010\056\015\057\221\060\014\061\040\062\020\063" +
    "\033\001\002\000\042\002\uffc3\004\uffc3\006\uffc3\042\uffc3" +
    "\043\uffc3\050\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\001\002" +
    "\000\042\002\uffc8\004\uffc8\006\uffc8\042\uffc8\043\uffc8\050" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\001\002\000\004\042" +
    "\u0135\001\002\000\004\006\u0129\001\002\000\004\007\u012a" +
    "\001\002\000\024\006\056\012\060\021\064\022\061\023" +
    "\057\024\062\025\052\026\051\040\053\001\002\000\004" +
    "\005\u012c\001\002\000\024\006\056\012\060\021\064\022" +
    "\061\023\057\024\062\025\052\026\051\040\053\001\002" +
    "\000\004\005\u012e\001\002\000\006\017\044\020\047\001" +
    "\002\000\004\027\u0130\001\002\000\004\041\u0131\001\002" +
    "\000\036\003\031\004\025\006\043\042\u0132\043\026\050" +
    "\036\052\011\055\010\056\015\057\035\060\014\061\040" +
    "\062\020\063\033\001\002\000\042\002\uffc1\004\uffc1\006" +
    "\uffc1\042\uffc1\043\uffc1\050\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\001\002\000\034\004\025\006\043\042\u0134\043\026" +
    "\050\036\052\011\055\010\056\015\057\221\060\014\061" +
    "\040\062\020\063\033\001\002\000\042\002\uffc0\004\uffc0" +
    "\006\uffc0\042\uffc0\043\uffc0\050\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\001\002\000\042\002\uffbf\004\uffbf\006\uffbf\042" +
    "\uffbf\043\uffbf\050\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\006\002\004\034\003\001\001\000\042\003" +
    "\022\004\020\005\015\010\036\011\016\012\040\013\027" +
    "\014\041\016\026\017\033\020\012\021\023\026\031\027" +
    "\011\030\021\033\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\211\005\015\010\221\011\210\012\223\013\215\014" +
    "\222\016\214\017\217\020\207\021\213\026\216\027\206" +
    "\030\212\033\204\001\001\000\002\001\001\000\004\005" +
    "\317\001\001\000\010\026\054\031\314\032\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\053\026\054\031\064" +
    "\032\065\001\001\000\010\026\054\031\143\032\144\001" +
    "\001\000\002\001\001\000\006\026\054\032\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\054\032\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\054" +
    "\032\123\001\001\000\006\026\054\032\122\001\001\000" +
    "\006\026\054\032\121\001\001\000\006\026\054\032\120" +
    "\001\001\000\006\026\054\032\117\001\001\000\006\026" +
    "\054\032\116\001\001\000\006\026\054\032\115\001\001" +
    "\000\002\001\001\000\006\026\054\032\114\001\001\000" +
    "\006\026\054\032\113\001\001\000\006\026\054\032\112" +
    "\001\001\000\006\026\054\032\111\001\001\000\006\026" +
    "\054\032\110\001\001\000\006\026\054\032\107\001\001" +
    "\000\006\026\054\032\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\054\031\127\032\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\054\031\141\032\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\054\031\170\032\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\203\004\020\005\015\010\036\011\016\012\040\013\027" +
    "\014\041\016\026\017\033\020\012\021\023\026\031\027" +
    "\011\030\021\033\006\001\001\000\002\001\001\000\040" +
    "\004\211\005\015\010\221\011\210\012\223\013\215\014" +
    "\222\016\214\017\217\020\207\021\213\026\216\027\206" +
    "\030\212\033\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\232\004" +
    "\020\005\015\010\036\011\016\012\040\013\027\014\041" +
    "\016\026\017\033\020\012\021\023\026\031\027\011\030" +
    "\021\033\006\001\001\000\002\001\001\000\040\004\211" +
    "\005\015\010\221\011\210\012\223\013\215\014\222\016" +
    "\214\017\217\020\207\021\213\026\216\027\206\030\212" +
    "\033\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\054\031\240" +
    "\032\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\244\004\020\005\015\010\036\011\016\012\040" +
    "\013\027\014\041\016\026\017\033\020\012\021\023\026" +
    "\031\027\011\030\021\033\006\001\001\000\004\006\256" +
    "\001\001\000\040\004\211\005\015\010\221\011\210\012" +
    "\223\013\215\014\222\016\214\017\217\020\207\021\213" +
    "\026\216\027\206\030\212\033\204\001\001\000\004\006" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\253\004\020\005\015\010\036\011" +
    "\016\012\040\013\027\014\041\016\026\017\033\020\012" +
    "\021\023\026\031\027\011\030\021\033\006\001\001\000" +
    "\002\001\001\000\040\004\211\005\015\010\221\011\210" +
    "\012\223\013\215\014\222\016\214\017\217\020\207\021" +
    "\213\026\216\027\206\030\212\033\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\054\031\274\032" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\054\031\344\032\065\001\001\000\010\026\054\031" +
    "\324\032\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\054\031\326\032\065\001\001\000\004\015" +
    "\331\001\001\000\002\001\001\000\010\026\054\031\333" +
    "\032\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\054\031\351\032\065\001\001\000\004" +
    "\015\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\054\031\355\032\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\054\031" +
    "\377\032\065\001\001\000\010\026\054\031\363\032\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\054\031\365\032\065\001\001\000\004\015\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\054\031\u0102\032\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\054\031\u0106\032\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\u010a\004\020\005" +
    "\015\010\036\011\016\012\040\013\027\014\041\016\026" +
    "\017\033\020\012\021\023\026\031\027\011\030\021\033" +
    "\006\001\001\000\002\001\001\000\040\004\211\005\015" +
    "\010\221\011\210\012\223\013\215\014\222\016\214\017" +
    "\217\020\207\021\213\026\216\027\206\030\212\033\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\054\031\u010e\032\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\054\031\u0113\032\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\u0116\023\u0118\001\001\000\004\024" +
    "\u0120\001\001\000\010\026\054\031\u011b\032\065\001\001" +
    "\000\006\022\u0119\023\u0118\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\u011d\004\020" +
    "\005\015\010\036\011\016\012\040\013\027\014\041\016" +
    "\026\017\033\020\012\021\023\026\031\027\011\030\021" +
    "\033\006\001\001\000\040\004\211\005\015\010\221\011" +
    "\210\012\223\013\215\014\222\016\214\017\217\020\207" +
    "\021\213\026\216\027\206\030\212\033\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\u0123\004\020\005\015\010\036\011" +
    "\016\012\040\013\027\014\041\016\026\017\033\020\012" +
    "\021\023\026\031\027\011\030\021\033\006\001\001\000" +
    "\040\004\211\005\015\010\221\011\210\012\223\013\215" +
    "\014\222\016\214\017\217\020\207\021\213\026\216\027" +
    "\206\030\212\033\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\054\031\u012a\032\065\001\001\000\002" +
    "\001\001\000\010\026\054\031\u012c\032\065\001\001\000" +
    "\002\001\001\000\004\007\u012e\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\u0132\004\020\005\015\010" +
    "\036\011\016\012\040\013\027\014\041\016\026\017\033" +
    "\020\012\021\023\026\031\027\011\030\021\033\006\001" +
    "\001\000\002\001\001\000\040\004\211\005\015\010\221" +
    "\011\210\012\223\013\215\014\222\016\214\017\217\020" +
    "\207\021\213\026\216\027\206\030\212\033\204\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ASTNodo raiz;
    int contador;
    public static ArrayList<TError> errores;
    //METODO PARA ERROR RECUPERABLE
    public void syntax_error(Symbol s)
    {
      try
      {
        TError errorSint = new TError(s.value.toString(), "Error Sintactico", "Token no Esperado", (s.right+1), s.left);
        errores.add(errorSint);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR RECUPERADO");
      }

    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      try
      {
        /*String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("--------------Error Sintactico PANICO------------------------");
        System.out.println("Lexema: "+lexema);
        System.out.println("Fila: "+fila);
        System.out.println("Columna: "+columna);*/
        TError errorSint = new TError(s.value.toString(), "Error Sintactico", "Token no Esperado", (s.right+1), s.left);
        errores.add(errorSint);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR IRRECUPERABLE");
      }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  public static boolean es_fecha(String valor)
    {
        try
        {
            SimpleDateFormat d = new SimpleDateFormat("dd/MM/yyyy");
            Date da = d.parse(valor);
            if(valor.equals(d.format(da)))
            {
                return true;
            }
            return false;
        }
        catch(Exception ex)
        {
            return false;
        }
    }
  public static boolean es_fecha_tiempo(String valor)
  {
      try
      {
          SimpleDateFormat d = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
          Date da = d.parse(valor);
          if(valor.equals(d.format(da)))
          {
              return true;
          }
          return false;
      }
      catch(Exception ex)
      {
          return false;
      }
  }

  public static boolean es_booleano(String valor)
    {
        try
        {
            if(valor.equals("false") || valor.equals("true"))
            {
                return true;
            }
            return false;
        }
        catch(Exception ex)
        {
            return false;
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= EXE_FUNC 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(h1!=null)
          {RESULT = h1;}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= iden punto atexto 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "ATEXTO");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, ide));
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= iden punto atexto oParent cParent 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "ATEXTO");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, ide));
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= iden punto conteo 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CONTEO");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, ide));
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= iden punto conteo oParent cParent 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CONTEO");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, ide));
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= oParent EXPRESION cParent 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = h1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= iden oKey EXPRESION cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "VALOR_VECTOR");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, ide));
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= tFalse 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOOLEAN");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, h1));
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= tTrue 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOOLEAN");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, h1));
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= cadena2 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre;
          val = val.replace("\'","");
          if(es_fecha(val))
          {padre = new ASTNodo(parser.contador, "DATE");}
          else if(es_fecha_tiempo(val))
          {padre = new ASTNodo(parser.contador, "DATETIME");}
          else if(es_booleano(val))
          {padre = new ASTNodo(parser.contador, "BOOLEAN");}
          else
          {padre = new ASTNodo(parser.contador, "CADENA");}
          parser.contador++;
          ASTNodo valor = new ASTNodo(parser.contador, val);
          parser.contador++;
          padre.addHijo(valor);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= cadena1 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre;
          val = val.replace("\"","");
          if(es_fecha(val))
          {padre = new ASTNodo(parser.contador, "DATE");}
          else if(es_fecha_tiempo(val))
          {padre = new ASTNodo(parser.contador, "DATETIME");}
          else if(es_booleano(val))
          {padre = new ASTNodo(parser.contador, "BOOLEAN");}
          else
          {padre = new ASTNodo(parser.contador, "CADENA");}
          parser.contador++;
          ASTNodo valor = new ASTNodo(parser.contador, val);
          parser.contador++;
          padre.addHijo(valor);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= iden 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IDENTIFICADOR");
          parser.contador++;
          ASTNodo valor = new ASTNodo(parser.contador, val);
          parser.contador++;
          padre.addHijo(valor);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= numeric 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "NUMERICO");
          parser.contador++;
          ASTNodo valor = new ASTNodo(parser.contador, val);
          parser.contador++;
          padre.addHijo(valor);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= oParent E cParent 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = h1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= menos E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, "MENOS"));
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= not E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, "NOT"));
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E dism 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(new ASTNodo(parser.contador, "--"));
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E aum 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(new ASTNodo(parser.contador, "++"));
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E or E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "OR");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E and E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "AND");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E mayorigual E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, ">=");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= E menorigual E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "<=");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= E mayor E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, ">");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= E menor E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "<");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= E diferente E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "!=");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= E igualacion E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "==");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= E elev E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "^");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= E mod E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "%");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= E divi E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "/");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= E por E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "*");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= E menos E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "-");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= E mas E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "E");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo sig = new ASTNodo(parser.contador, "+");
          parser.contador++;
          padre.addHijo(sig);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "EXPRESION");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXE_FUNC ::= iden oParent PARAMS cParent 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"EXEC_FUNC");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, ide));
          parser.contador++;
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXE_FUNC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXE_FUNC ::= iden oParent cParent 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"EXE_FUNC");
          parser.contador++;
          padre.addHijo(new ASTNodo(parser.contador, ide));
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXE_FUNC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMS ::= EXPRESION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "PARAMS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMS ::= PARAMS coma EXPRESION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "PARAMS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AUM_DISM ::= iden OPER pcoma 
            {
              ASTNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                ASTNodo padre = new ASTNodo(parser.contador,"AUM_DISM");
                parser.contador++;
                padre.addHijo(new ASTNodo(parser.contador,id));
                parser.contador++;
                if(h1!=null)
                {
                  padre.addHijo(h1);
                }
                RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUM_DISM",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OBSERVADOR ::= iden punto observador oParent cadena1 coma iden oParent cParent cParent pcoma 
            {
              ASTNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String fun = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "OBSERVADOR_ID");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador, id));
            parser.contador++;
            tipo = tipo.replace("\"","");
            padre.addHijo(new ASTNodo(parser.contador, tipo));
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador, fun));
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBSERVADOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OBSERVADOR ::= iden punto observador oParent cadena1 coma FUNCION cParent pcoma 
            {
              ASTNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "OBSERVADOR_ID");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador, id));
            parser.contador++;
            tipo = tipo.replace("\"","");
            padre.addHijo(new ASTNodo(parser.contador, tipo));
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBSERVADOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OBSERVADOR ::= documento punto observador oParent cadena1 coma iden oParent cParent cParent pcoma 
            {
              ASTNodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String fun = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "OBSERVADOR_DOC");
            parser.contador++;
            tipo = tipo.replace("\"","");
            padre.addHijo(new ASTNodo(parser.contador, tipo));
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador, fun));
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBSERVADOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OBSERVADOR ::= documento punto observador oParent cadena1 coma FUNCION cParent pcoma 
            {
              ASTNodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "OBSERVADOR_DOC");
            parser.contador++;
            tipo = tipo.replace("\"","");
            padre.addHijo(new ASTNodo(parser.contador, tipo));
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBSERVADOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SETELEMT ::= documento punto obtener oParent cadena1 cParent punto setElemento oParent cadena1 coma EXPRESION cParent pcoma 
            {
              ASTNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String elem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "SETELEMT");
              parser.contador++;
              //tomanod el id
              id = id.replace("\"","");
              padre.addHijo(new ASTNodo(parser.contador, id));
              parser.contador++;
              elem = elem.replace("\"", "");
              //tomando la propiedad
              padre.addHijo(new ASTNodo(parser.contador, elem));
              parser.contador++;
              //tomando el nuevo VALOR
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETELEMT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SETELEMT ::= iden punto setElemento oParent cadena1 coma EXPRESION cParent pcoma 
            {
              ASTNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String elem = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "SETELEMT");
              parser.contador++;
              //tomando id
              padre.addHijo(new ASTNodo(parser.contador, id));
              parser.contador++;
              elem = elem.replace("\"", "");
              //tomando la propiedad
              padre.addHijo(new ASTNodo(parser.contador, elem));
              parser.contador++;
              //tomando el nuevo VALOR
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SETELEMT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MENSAJE ::= mensaje oParent EXPRESION cParent pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "MENSAJE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MENSAJE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETORNAR ::= retornar error pcoma 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNAR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETORNAR ::= retornar EXPRESION pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "RETORNAR");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNAR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCION ::= funcion error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCION ::= funcion iden oParent cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "FUNCION");
          parser.contador++;
          ASTNodo nom = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(nom);
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCION ::= funcion iden oParent L_ID cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "FUNCION");
          parser.contador++;
          ASTNodo nom = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(nom);
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION ::= funcion iden oParent cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "FUNCION");
          parser.contador++;
          ASTNodo nom = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(nom);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCION ::= funcion iden oParent L_ID cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "FUNCION");
          parser.contador++;
          ASTNodo nom = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(nom);
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IMPRIMIR ::= imprimir oParent EXPRESION cParent pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMPRIMIR");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENT_MIENTRAS ::= mientras error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENT_MIENTRAS ::= mientras oParent EXPRESION cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 ASTNodo padre = new ASTNodo(parser.contador,"SENT_MIENTRAS");
                 parser.contador++;
                 if(h1!=null)
                 {padre.addHijo(h1);}
                 if(h2!=null)
                 {padre.addHijo(h2);}
                 RESULT = padre;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENT_MIENTRAS ::= mientras oParent EXPRESION cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                 ASTNodo padre = new ASTNodo(parser.contador,"SENT_MIENTRAS");
                 parser.contador++;
                 if(h1!=null)
                 {padre.addHijo(h1);}
                 RESULT = padre;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_MIENTRAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPER ::= dism 
            {
              ASTNodo RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo n = new ASTNodo(parser.contador, dm);
        parser.contador++;
        RESULT = n;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPER ::= aum 
            {
              ASTNodo RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo n = new ASTNodo(parser.contador, am);
        parser.contador++;
        RESULT = n;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENT_PARA ::= para error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_PARA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENT_PARA ::= para oParent iden dosP EXPRESION pcoma EXPRESION pcoma OPER cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h4 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_PARA");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador,ide));
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            if(h3!=null)
            {padre.addHijo(h3);}
            if(h4!=null)
            {padre.addHijo(h4);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_PARA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENT_PARA ::= para oParent iden dosP EXPRESION pcoma EXPRESION pcoma OPER cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_PARA");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador,ide));
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            if(h3!=null)
            {padre.addHijo(h3);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_PARA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DEFECTO ::= cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DEFECTO ::= defecto dosP CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "DEFECTO");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASO ::= caso error dosP 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASO ::= caso EXPRESION dosP CUERPO_CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "CASO");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // L_CASOS ::= CASO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_CASOS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_CASOS ::= CASO L_CASOS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_CASOS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SELECCIONA ::= selecciona error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SELECCIONA ::= selecciona oParent EXPRESION cParent oKey L_CASOS DEFECTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SELECCIONA");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            if(h3!=null)
            {padre.addHijo(h3);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SINO ::= sino error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SINO ::= sino oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = h1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SINO ::= sino oKey cKey 
            {
              ASTNodo RESULT =null;
		
          RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENT_SI ::= si error cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENT_SI ::= si oParent EXPRESION cParent oKey CUERPO_CJS cKey SINO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_SI");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            if(h3!=null)
            {padre.addHijo(h3);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENT_SI ::= si oParent EXPRESION cParent oKey cKey SINO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_SI");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENT_SI ::= si oParent EXPRESION cParent oKey CUERPO_CJS cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_SI");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENT_SI ::= si oParent EXPRESION cParent oKey cKey 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SENT_SI");//IGUAL QUE 3
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AS_VAR ::= L_ID dosP documento punto obtener oParent cadena1 cParent pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "AS_VAR_4");//ASIGNACION DE UN OBJETO DEL DOCUMENTO
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        cad = cad.replace("\"","");
        padre.addHijo(new ASTNodo(parser.contador, cad));
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AS_VAR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AS_VAR ::= L_ID dosP oKey EXPRESION ARRAY pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "AS_VAR_3");//ASIGNACION DE UN ARRAY A UNA VARIABLE
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        if(h3!=null)
        {padre.addHijo(h3);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AS_VAR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AS_VAR ::= L_ID oKey EXPRESION cKey dosP EXPRESION pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "AS_VAR_2");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        ASTNodo index = new ASTNodo(parser.contador, "INDEX");
        parser.contador++;
        if(h2!=null)
        {index.addHijo(h2);}
        padre.addHijo(index);
        if(h3!=null)
        {padre.addHijo(h3);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AS_VAR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AS_VAR ::= L_ID dosP EXPRESION pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "AS_VAR_1");//ASIGNACION SIMPLE A VARIABLE SIMPLE
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}//ID O IDS
        if(h2!=null)
        {padre.addHijo(h2);}//VALOR DE LA VARIABLE
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AS_VAR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARRAY ::= cKey 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARRAY ::= coma EXPRESION ARRAY 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           ASTNodo padre = new ASTNodo(parser.contador, "ARRAY");
           parser.contador++;
           if(h1!=null)
           {padre.addHijo(h1);}
           if(h2!=null)
           {padre.addHijo(h2);}
           RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L_ID ::= iden 
            {
              ASTNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "L_ID");
        parser.contador++;
        ASTNodo ide = new ASTNodo(parser.contador, id);
        parser.contador++;
        padre.addHijo(ide);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ID",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L_ID ::= L_ID coma iden 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "L_ID");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        ASTNodo id = new ASTNodo(parser.contador, ide);
        parser.contador++;
        padre.addHijo(id);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ID",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // C_VAR ::= dimv L_ID dosP documento punto obtener oParent cadena1 cParent pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_6");//ASIGNACION DE UN OBJETO CHTML
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        cad = cad.replace("\"","");
        padre.addHijo(new ASTNodo(parser.contador, cad));
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // C_VAR ::= dimv L_ID dosP oKey EXPRESION ARRAY pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_5");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        if(h3!=null)
        {padre.addHijo(h3);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // C_VAR ::= dimv L_ID oKey EXPRESION cKey dosP oKey EXPRESION ARRAY pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h4 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_4");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        ASTNodo di = new ASTNodo(parser.contador, "DIMENSION");
        parser.contador++;
        if(h2!=null)
        {di.addHijo(h2);}
        padre.addHijo(di);
        if(h3!=null)
        {padre.addHijo(h3);}
        if(h4!=null)
        {padre.addHijo(h4);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // C_VAR ::= dimv L_ID oKey EXPRESION cKey pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_3");//VECTOR SIN ASIGNACION
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        ASTNodo di = new ASTNodo(parser.contador, "DIMENSION");
        parser.contador++;
        if(h2!=null)
        {di.addHijo(h2);}
        padre.addHijo(di);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // C_VAR ::= dimv L_ID dosP EXPRESION pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_2");//SIMPLE ASIGNACION
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // C_VAR ::= dimv L_ID pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "C_VAR_1");//SIN ASIGNACION
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_VAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_CJS ::= error 
            {
              ASTNodo RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_CJS ::= C_VAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_CJS ::= AS_VAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_CJS ::= SENT_SI 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_CJS ::= SELECCIONA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_CJS ::= SENT_PARA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_CJS ::= SENT_MIENTRAS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_CJS ::= detener pcoma 
            {
              ASTNodo RESULT =null;
		
                ASTNodo padre = new ASTNodo(parser.contador, "DETENER");
                parser.contador++;
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_CJS ::= IMPRIMIR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_CJS ::= FUNCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_CJS ::= RETORNAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_CJS ::= MENSAJE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_CJS ::= EXE_FUNC pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_CJS ::= SETELEMT 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_CJS ::= OBSERVADOR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_CJS ::= AUM_DISM 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_CJS ::= CUERPO_CJS AUM_DISM 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO_CJS ::= CUERPO_CJS OBSERVADOR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_CJS ::= CUERPO_CJS SETELEMT 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_CJS ::= CUERPO_CJS EXE_FUNC pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_CJS ::= CUERPO_CJS MENSAJE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_CJS ::= CUERPO_CJS RETORNAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_CJS ::= CUERPO_CJS FUNCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO_CJS ::= CUERPO_CJS IMPRIMIR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_CJS ::= CUERPO_CJS detener pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                padre.addHijo(new ASTNodo(parser.contador,"DETENER"));
                parser.contador++;
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_CJS ::= CUERPO_CJS SENT_MIENTRAS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_CJS ::= CUERPO_CJS SENT_PARA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_CJS ::= CUERPO_CJS SELECCIONA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_CJS ::= CUERPO_CJS SENT_SI 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO_CJS ::= CUERPO_CJS AS_VAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_CJS ::= CUERPO_CJS C_VAR 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "CUERPO_CJS");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_CJS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_CJS ::= NT$0 CUERPO_CJS 
            {
              ASTNodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ASTNodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "INICIO_CJS");
                  parser.contador++;
                  if(h1!=null)
                  {padre.addHijo(h1);}
                  parser.raiz = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CJS",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              ASTNodo RESULT =null;
parser.errores = new ArrayList<>(); parser.contador = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_CJS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo start_val = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

