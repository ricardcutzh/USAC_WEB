
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 21 18:46:28 CST 2018
//----------------------------------------------------

package CCSS;

import java_cup.runtime.*;
import AST.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 21 18:46:28 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\040\002\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\006\000\002\004\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\003\000\002\011\003\000\002" +
    "\012\010\000\002\012\007\000\002\013\010\000\002\013" +
    "\007\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\007\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\022\007" +
    "\000\002\023\007\000\002\023\004\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\025\007" +
    "\000\002\026\007\000\002\027\007\000\002\032\013\000" +
    "\002\033\007\000\002\034\014\000\002\035\007\000\002" +
    "\036\007\000\002\005\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\005\000\002\017\003\000\002" +
    "\020\005\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\003\000\004\000\001\002\000\004\002" +
    "\244\001\002\000\006\003\006\004\010\001\002\000\004" +
    "\006\243\001\002\000\010\002\ufffd\003\ufffd\004\ufffd\001" +
    "\002\000\004\005\013\001\002\000\010\002\uffff\003\006" +
    "\004\010\001\002\000\010\002\ufffe\003\ufffe\004\ufffe\001" +
    "\002\000\010\006\016\022\020\023\021\001\002\000\010" +
    "\006\241\022\020\023\021\001\002\000\010\006\ufff6\022" +
    "\ufff6\023\ufff6\001\002\000\010\002\ufffc\003\ufffc\004\ufffc" +
    "\001\002\000\010\006\ufff7\022\ufff7\023\ufff7\001\002\000" +
    "\004\020\233\001\002\000\004\020\022\001\002\000\004" +
    "\004\023\001\002\000\004\021\024\001\002\000\004\024" +
    "\025\001\002\000\040\003\050\006\ufff2\022\ufff2\023\ufff2" +
    "\025\044\035\030\036\040\045\045\046\027\047\031\052" +
    "\053\053\033\054\056\055\037\056\026\001\002\000\004" +
    "\032\227\001\002\000\004\032\223\001\002\000\004\032" +
    "\217\001\002\000\004\032\213\001\002\000\040\003\uffe1" +
    "\006\uffe1\022\uffe1\023\uffe1\025\uffe1\035\uffe1\036\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\001\002\000\004\032\207\001\002\000\040\003" +
    "\050\006\ufff3\022\ufff3\023\ufff3\025\044\035\030\036\040" +
    "\045\045\046\027\047\031\052\053\053\033\054\056\055" +
    "\037\056\026\001\002\000\040\003\uffdf\006\uffdf\022\uffdf" +
    "\023\uffdf\025\uffdf\035\uffdf\036\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\001\002" +
    "\000\040\003\uffe6\006\uffe6\022\uffe6\023\uffe6\025\uffe6\035" +
    "\uffe6\036\uffe6\045\uffe6\046\uffe6\047\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\001\002\000\004\032\170\001" +
    "\002\000\004\032\151\001\002\000\040\003\uffe2\006\uffe2" +
    "\022\uffe2\023\uffe2\025\uffe2\035\uffe2\036\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\001\002\000\040\003\uffde\006\uffde\022\uffde\023\uffde\025" +
    "\uffde\035\uffde\036\uffde\045\uffde\046\uffde\047\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\001\002\000\040\003" +
    "\uffe4\006\uffe4\022\uffe4\023\uffe4\025\uffe4\035\uffe4\036\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\001\002\000\004\032\141\001\002\000\004" +
    "\032\135\001\002\000\040\003\uffdc\006\uffdc\022\uffdc\023" +
    "\uffdc\025\uffdc\035\uffdc\036\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000" +
    "\040\003\uffdd\006\uffdd\022\uffdd\023\uffdd\025\uffdd\035\uffdd" +
    "\036\uffdd\045\uffdd\046\uffdd\047\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\001\002\000\006\024\134\033\133" +
    "\001\002\000\040\003\uffe0\006\uffe0\022\uffe0\023\uffe0\025" +
    "\uffe0\035\uffe0\036\uffe0\045\uffe0\046\uffe0\047\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002\000\040\003" +
    "\uffe3\006\uffe3\022\uffe3\023\uffe3\025\uffe3\035\uffe3\036\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\001\002\000\004\032\121\001\002\000\040" +
    "\003\uffe5\006\uffe5\022\uffe5\023\uffe5\025\uffe5\035\uffe5\036" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\001\002\000\040\003\uffda\006\uffda\022" +
    "\uffda\023\uffda\025\uffda\035\uffda\036\uffda\045\uffda\046\uffda" +
    "\047\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\001" +
    "\002\000\004\032\057\001\002\000\004\033\060\001\002" +
    "\000\004\005\061\001\002\000\012\007\064\012\063\013" +
    "\062\020\071\001\002\000\020\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\021\uffb8\024\uffb8\044\uffb8\001\002\000\020\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\024\uffb9\044\uffb9" +
    "\001\002\000\020\014\uffb7\015\uffb7\016\uffb7\017\uffb7\021" +
    "\uffb7\024\uffb7\044\uffb7\001\002\000\020\014\uffbd\015\uffbd" +
    "\016\077\017\100\021\uffbd\024\uffbd\044\uffbd\001\002\000" +
    "\020\014\uffba\015\uffba\016\uffba\017\uffba\021\uffba\024\uffba" +
    "\044\uffba\001\002\000\004\044\104\001\002\000\012\014" +
    "\073\015\074\024\uffc0\044\uffc0\001\002\000\012\007\064" +
    "\012\063\013\062\020\071\001\002\000\010\014\073\015" +
    "\074\021\075\001\002\000\012\007\064\012\063\013\062" +
    "\020\071\001\002\000\012\007\064\012\063\013\062\020" +
    "\071\001\002\000\020\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\021\uffb6\024\uffb6\044\uffb6\001\002\000\020\014\uffbe\015" +
    "\uffbe\016\077\017\100\021\uffbe\024\uffbe\044\uffbe\001\002" +
    "\000\012\007\064\012\063\013\062\020\071\001\002\000" +
    "\012\007\064\012\063\013\062\020\071\001\002\000\020" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb\024\uffbb\044" +
    "\uffbb\001\002\000\020\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\021\uffbc\024\uffbc\044\uffbc\001\002\000\020\014\uffbf\015" +
    "\uffbf\016\077\017\100\021\uffbf\024\uffbf\044\uffbf\001\002" +
    "\000\006\007\107\034\110\001\002\000\010\014\117\024" +
    "\uffb5\044\uffb5\001\002\000\004\044\112\001\002\000\010" +
    "\014\uffb2\024\uffb2\044\uffb2\001\002\000\010\014\uffb1\024" +
    "\uffb1\044\uffb1\001\002\000\010\014\uffb3\024\uffb3\044\uffb3" +
    "\001\002\000\006\010\114\011\113\001\002\000\010\006" +
    "\uffb0\024\uffb0\044\uffb0\001\002\000\010\006\uffaf\024\uffaf" +
    "\044\uffaf\001\002\000\004\006\116\001\002\000\040\003" +
    "\uffc3\006\uffc3\022\uffc3\023\uffc3\025\uffc3\035\uffc3\036\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\001\002\000\006\007\107\034\110\001\002" +
    "\000\010\014\uffb4\024\uffb4\044\uffb4\001\002\000\004\033" +
    "\122\001\002\000\004\005\123\001\002\000\006\010\114" +
    "\011\113\001\002\000\004\044\125\001\002\000\006\050" +
    "\127\051\130\001\002\000\004\006\131\001\002\000\004" +
    "\006\uffae\001\002\000\004\006\uffad\001\002\000\004\024" +
    "\132\001\002\000\040\003\uffc5\006\uffc5\022\uffc5\023\uffc5" +
    "\025\uffc5\035\uffc5\036\uffc5\045\uffc5\046\uffc5\047\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\001\002\000\040" +
    "\003\uffd3\006\uffd3\022\uffd3\023\uffd3\025\uffd3\035\uffd3\036" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\001\002\000\040\003\uffac\006\uffac\022" +
    "\uffac\023\uffac\025\uffac\035\uffac\036\uffac\045\uffac\046\uffac" +
    "\047\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\001" +
    "\002\000\004\033\136\001\002\000\006\007\107\034\110" +
    "\001\002\000\004\024\140\001\002\000\040\003\uffc8\006" +
    "\uffc8\022\uffc8\023\uffc8\025\uffc8\035\uffc8\036\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\001\002\000\004\033\142\001\002\000\012\026\145" +
    "\027\144\030\146\031\147\001\002\000\004\024\150\001" +
    "\002\000\004\024\uffd8\001\002\000\004\024\uffd9\001\002" +
    "\000\004\024\uffd6\001\002\000\004\024\uffd7\001\002\000" +
    "\040\003\uffdb\006\uffdb\022\uffdb\023\uffdb\025\uffdb\035\uffdb" +
    "\036\uffdb\045\uffdb\046\uffdb\047\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\001\002\000\004\033\152\001\002" +
    "\000\014\037\153\040\155\041\157\042\156\043\160\001" +
    "\002\000\006\024\uffcd\044\uffcd\001\002\000\006\024\162" +
    "\044\161\001\002\000\006\024\uffcc\044\uffcc\001\002\000" +
    "\006\024\uffca\044\uffca\001\002\000\006\024\uffcb\044\uffcb" +
    "\001\002\000\006\024\uffc9\044\uffc9\001\002\000\014\037" +
    "\163\040\164\041\166\042\165\043\167\001\002\000\040" +
    "\003\uffd4\006\uffd4\022\uffd4\023\uffd4\025\uffd4\035\uffd4\036" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\001\002\000\006\024\uffd2\044\uffd2\001" +
    "\002\000\006\024\uffd1\044\uffd1\001\002\000\006\024\uffcf" +
    "\044\uffcf\001\002\000\006\024\uffd0\044\uffd0\001\002\000" +
    "\006\024\uffce\044\uffce\001\002\000\004\033\171\001\002" +
    "\000\006\010\114\011\113\001\002\000\004\024\173\001" +
    "\002\000\040\003\uffc2\006\uffc2\022\uffc2\023\uffc2\025\uffc2" +
    "\035\uffc2\036\uffc2\045\uffc2\046\uffc2\047\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\001\002\000\040\003\uffec" +
    "\006\uffec\022\uffec\023\uffec\025\uffec\035\uffec\036\uffec\045" +
    "\uffec\046\uffec\047\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\056\uffec\001\002\000\040\003\uffee\006\uffee\022\uffee\023" +
    "\uffee\025\uffee\035\uffee\036\uffee\045\uffee\046\uffee\047\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\001\002\000" +
    "\040\003\uffe7\006\uffe7\022\uffe7\023\uffe7\025\uffe7\035\uffe7" +
    "\036\uffe7\045\uffe7\046\uffe7\047\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\001\002\000\040\003\uffeb\006\uffeb" +
    "\022\uffeb\023\uffeb\025\uffeb\035\uffeb\036\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\001\002\000\040\003\uffef\006\uffef\022\uffef\023\uffef\025" +
    "\uffef\035\uffef\036\uffef\045\uffef\046\uffef\047\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\001\002\000\040\003" +
    "\uffe9\006\uffe9\022\uffe9\023\uffe9\025\uffe9\035\uffe9\036\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\001\002\000\040\003\ufff1\006\ufff1\022\ufff1" +
    "\023\ufff1\025\ufff1\035\ufff1\036\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002" +
    "\000\040\003\ufff0\006\ufff0\022\ufff0\023\ufff0\025\ufff0\035" +
    "\ufff0\036\ufff0\045\ufff0\046\ufff0\047\ufff0\052\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\001\002\000\040\003\uffed\006" +
    "\uffed\022\uffed\023\uffed\025\uffed\035\uffed\036\uffed\045\uffed" +
    "\046\uffed\047\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\001\002\000\040\003\uffea\006\uffea\022\uffea\023\uffea" +
    "\025\uffea\035\uffea\036\uffea\045\uffea\046\uffea\047\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\001\002\000\040" +
    "\003\uffe8\006\uffe8\022\uffe8\023\uffe8\025\uffe8\035\uffe8\036" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\001\002\000\004\033\210\001\002\000" +
    "\006\010\114\011\113\001\002\000\004\024\212\001\002" +
    "\000\040\003\uffc4\006\uffc4\022\uffc4\023\uffc4\025\uffc4\035" +
    "\uffc4\036\uffc4\045\uffc4\046\uffc4\047\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\001\002\000\004\033\214\001" +
    "\002\000\006\007\107\034\110\001\002\000\004\024\216" +
    "\001\002\000\040\003\uffc6\006\uffc6\022\uffc6\023\uffc6\025" +
    "\uffc6\035\uffc6\036\uffc6\045\uffc6\046\uffc6\047\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\004\033" +
    "\220\001\002\000\006\007\107\034\110\001\002\000\004" +
    "\024\222\001\002\000\040\003\uffd5\006\uffd5\022\uffd5\023" +
    "\uffd5\025\uffd5\035\uffd5\036\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\001\002\000" +
    "\004\033\224\001\002\000\012\007\064\012\063\013\062" +
    "\020\071\001\002\000\004\024\226\001\002\000\040\003" +
    "\uffc7\006\uffc7\022\uffc7\023\uffc7\025\uffc7\035\uffc7\036\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\001\002\000\004\033\230\001\002\000\006" +
    "\007\107\034\110\001\002\000\004\024\232\001\002\000" +
    "\040\003\uffc1\006\uffc1\022\uffc1\023\uffc1\025\uffc1\035\uffc1" +
    "\036\uffc1\045\uffc1\046\uffc1\047\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\001\002\000\004\004\234\001\002" +
    "\000\004\021\235\001\002\000\004\024\236\001\002\000" +
    "\040\003\050\006\ufff4\022\ufff4\023\ufff4\025\044\035\030" +
    "\036\040\045\045\046\027\047\031\052\053\053\033\054" +
    "\056\055\037\056\026\001\002\000\040\003\050\006\ufff5" +
    "\022\ufff5\023\ufff5\025\044\035\030\036\040\045\045\046" +
    "\027\047\031\052\053\053\033\054\056\055\037\056\026" +
    "\001\002\000\010\006\ufff8\022\ufff8\023\ufff8\001\002\000" +
    "\010\002\ufffb\003\ufffb\004\ufffb\001\002\000\010\006\ufff9" +
    "\022\ufff9\023\ufff9\001\002\000\010\002\ufffa\003\ufffa\004" +
    "\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\002\003\040\004\001\001\000\002\001" +
    "\001\000\006\003\010\004\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\011\001" +
    "\001\000\002\001\001\000\010\011\013\012\016\013\014" +
    "\001\001\000\006\012\241\013\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\014\033\015\045\022\046\023\041" +
    "\025\034\026\050\027\031\032\040\033\051\034\042\035" +
    "\053\036\035\037\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\015\201\022\202\023\177" +
    "\025\174\026\203\027\173\032\176\033\204\034\200\035" +
    "\205\036\175\037\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\066" +
    "\006\067\007\064\010\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\071\007\064\010\065\001\001\000\002\001\001\000\006" +
    "\007\102\010\065\001\001\000\006\007\075\010\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\101" +
    "\001\001\000\004\010\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\105\020\104" +
    "\021\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\123\001\001\000\002\001\001\000\004\031\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\136\020" +
    "\104\021\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\214\020\104\021\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\220\020\104" +
    "\021\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\224\006\067\007\064\010\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\230\020\104\021\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\014\236\015\045\022\046" +
    "\023\041\025\034\026\050\027\031\032\040\033\051\034" +
    "\042\035\053\036\035\037\054\001\001\000\032\015\201" +
    "\022\202\023\177\025\174\026\203\027\173\032\176\033" +
    "\204\034\200\035\205\036\175\037\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ASTNodo raiz;
    int contador;
    public static ArrayList<TError> errores;
    //METODO PARA ERROR RECUPERABLE
    public void syntax_error(Symbol s)
    {
      try
      {
        TError errorSint = new TError(s.value.toString(), "Error Sintactico", "Token no Esperado", (s.right+1), s.left);
        errores.add(errorSint);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR RECUPERADO");
      }
      /*String lexema = s.value.toString();
      int fila = s.right;
      int columna = s.left;

      System.out.println("--------------Error Sintactico Recuperado------------------------");
      System.out.println("Lexema: "+lexema);
      System.out.println("Fila: "+fila);
      System.out.println("Columna: "+columna);*/

    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      try
      {
        /*String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("--------------Error Sintactico PANICO------------------------");
        System.out.println("Lexema: "+lexema);
        System.out.println("Fila: "+fila);
        System.out.println("Columna: "+columna);*/
        TError errorSint = new TError(s.value.toString(), "Error Sintactico", "Token no Esperado", (s.right+1), s.left);
        errores.add(errorSint);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR IRRECUPERABLE");
      }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PERROR ::= error pcoma 
            {
              ASTNodo RESULT =null;
		
          RESULT = null;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PERROR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DIRECCION ::= vertical 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "DIRECCION");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador, h1));
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIRECCION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DIRECCION ::= horizontal 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "DIRECCION");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador, h1));
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIRECCION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BOOLEAN ::= Ttrue 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "BOOLEAN");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador, h1));
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BOOLEAN ::= Tfalse 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "BOOLEAN");
            parser.contador++;
            padre.addHijo(new ASTNodo(parser.contador, h1));
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // B ::= cadena2 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "CADENA");
        parser.contador++;
        cad = cad.replace("\'","");
        ASTNodo cade = new ASTNodo(parser.contador, cad);
        parser.contador++;
        padre.addHijo(cade);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // B ::= cadena 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "CADENA");
        parser.contador++;
        cad = cad.replace("\"","");
        ASTNodo cade = new ASTNodo(parser.contador, cad);
        parser.contador++;
        padre.addHijo(cade);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // A ::= B 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = h1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // A ::= A mas B 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "EXPCAD");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      padre.addHijo(new ASTNodo(parser.contador, "+"));
      parser.contador++;
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPCAD ::= A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "EXPCAD");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPCAD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // F ::= op E cp 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT = h1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // F ::= cadena 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "CADENA");
      parser.contador++;
      cad = cad.replace("\"","");
      ASTNodo hijo = new ASTNodo(parser.contador,cad);
      parser.contador++;
      padre.addHijo(hijo);
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // F ::= decimal 
            {
              ASTNodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "DECIMAL");
      parser.contador++;
      ASTNodo hijo = new ASTNodo(parser.contador,dec);
      parser.contador++;
      padre.addHijo(hijo);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // F ::= entero 
            {
              ASTNodo RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "ENTERO");
      parser.contador++;
      ASTNodo hijo = new ASTNodo(parser.contador,ent);
      parser.contador++;
      padre.addHijo(hijo);
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // T ::= F 
            {
              ASTNodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo f = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T ::= T div F 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "T");
      parser.contador++;
      ASTNodo oper = new ASTNodo(parser.contador, "/");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      padre.addHijo(oper);
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // T ::= T por F 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "T");
      parser.contador++;
      ASTNodo oper = new ASTNodo(parser.contador, "*");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      padre.addHijo(oper);
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= T 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = h1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E menos T 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "E");
      parser.contador++;
      ASTNodo oper = new ASTNodo(parser.contador, "-");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      padre.addHijo(oper);
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E mas T 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "E");
      parser.contador++;
      ASTNodo oper = new ASTNodo(parser.contador, "+");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      padre.addHijo(oper);
      if(h2!=null)
      {padre.addHijo(h2);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= E 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ASTNodo padre = new ASTNodo(parser.contador, "EXP");
      parser.contador++;
      if(h1!=null)
      {padre.addHijo(h1);}
      RESULT = padre;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COLORTEXT ::= colortext dosP igual EXPCAD pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "COLORTEXT");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLORTEXT",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPAQUE ::= opaque dosP igual BOOLEAN pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "OPAQUE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPAQUE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BORDE ::= borde dosP igual oBracket EXP coma EXPCAD coma BOOLEAN cBracket 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h3 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BORDE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          if(h3!=null)
          {padre.addHijo(h3);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BORDE",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VISIBLE ::= visible dosP igual BOOLEAN pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "VISIBLE");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBLE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AUTOREM ::= autoRed dosP igual oBracket BOOLEAN coma DIRECCION cBracket pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "AUTOREM");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUTOREM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FONDOELEM ::= felemento dosP igual EXPCAD pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDOELEM");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDOELEM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TAMTEXT ::= tamtext dosP igual EXP pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "TAMTEXT");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TAMTEXT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LETRA ::= letra dosP igual EXPCAD pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "LETRA");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LETRA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // L_FORMATO ::= capital 
            {
              ASTNodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              padre.addHijo(new ASTNodo(parser.contador, n1));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L_FORMATO ::= minus 
            {
              ASTNodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              padre.addHijo(new ASTNodo(parser.contador, n1));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L_FORMATO ::= mayus 
            {
              ASTNodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              padre.addHijo(new ASTNodo(parser.contador, n1));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // L_FORMATO ::= cursiva 
            {
              ASTNodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              padre.addHijo(new ASTNodo(parser.contador, n1));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L_FORMATO ::= negrilla 
            {
              ASTNodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              padre.addHijo(new ASTNodo(parser.contador, n1));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L_FORMATO ::= L_FORMATO coma capital 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              padre.addHijo(new ASTNodo(parser.contador, n));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L_FORMATO ::= L_FORMATO coma minus 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              padre.addHijo(new ASTNodo(parser.contador, n));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // L_FORMATO ::= L_FORMATO coma mayus 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              padre.addHijo(new ASTNodo(parser.contador, n));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // L_FORMATO ::= L_FORMATO coma cursiva 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              padre.addHijo(new ASTNodo(parser.contador, n));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // L_FORMATO ::= L_FORMATO coma negrilla 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "L_FORMATO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              padre.addHijo(new ASTNodo(parser.contador, n));
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FORMATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FORMATO ::= error igual 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FORMATO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMATO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FORMATO ::= formato dosP igual L_FORMATO pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FORMATO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMATO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TEXTO ::= texto dosP igual EXPCAD pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "TEXTO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ALINEACIONES ::= justificado 
            {
              ASTNodo RESULT =null;
		int jsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String js = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo al = new ASTNodo(parser.contador, js);
                parser.contador++;
                RESULT = al;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ALINEACIONES ::= centrado 
            {
              ASTNodo RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ce = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo al = new ASTNodo(parser.contador, ce);
                parser.contador++;
                RESULT = al;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ALINEACIONES ::= derecha 
            {
              ASTNodo RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String der = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo al = new ASTNodo(parser.contador, der);
                parser.contador++;
                RESULT = al;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ALINEACIONES ::= izquierda 
            {
              ASTNodo RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String iz = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo al = new ASTNodo(parser.contador, iz);
                parser.contador++;
                RESULT = al;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ALINEADO ::= PERROR 
            {
              ASTNodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEADO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ALINEADO ::= alineado dosP igual ALINEACIONES pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "ALINEADO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEADO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRODIEDADES ::= ALINEADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRODIEDADES ::= TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRODIEDADES ::= FORMATO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRODIEDADES ::= LETRA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRODIEDADES ::= TAMTEXT 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRODIEDADES ::= FONDOELEM 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PRODIEDADES ::= AUTOREM 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PRODIEDADES ::= VISIBLE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRODIEDADES ::= BORDE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PRODIEDADES ::= OPAQUE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PRODIEDADES ::= COLORTEXT 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PRODIEDADES ::= PRODIEDADES COLORTEXT 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PRODIEDADES ::= PRODIEDADES OPAQUE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PRODIEDADES ::= PRODIEDADES BORDE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PRODIEDADES ::= PRODIEDADES VISIBLE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PRODIEDADES ::= PRODIEDADES AUTOREM 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PRODIEDADES ::= PRODIEDADES FONDOELEM 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PRODIEDADES ::= PRODIEDADES TAMTEXT 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PRODIEDADES ::= PRODIEDADES LETRA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PRODIEDADES ::= PRODIEDADES FORMATO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PRODIEDADES ::= PRODIEDADES TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PRODIEDADES ::= PRODIEDADES ALINEADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "PRODIEDADES");
                parser.contador++;
                if(h1!=null)
                {padre.addHijo(h1);}
                if(h2!=null)
                {padre.addHijo(h2);}
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODIEDADES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ID ::= id op identificador cp pcoma 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
       ASTNodo padre = new ASTNodo(parser.contador, "ID");
       parser.contador++;
       ASTNodo hij = new ASTNodo(parser.contador, ide);
       parser.contador++;
       padre.addHijo(hij);
       RESULT = padre;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ID ::= id op identificador cp pcoma PRODIEDADES 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       ASTNodo padre = new ASTNodo(parser.contador, "ID");
       parser.contador++;
       ASTNodo hij = new ASTNodo(parser.contador, ide);
       parser.contador++;
       padre.addHijo(hij);
       if(h2!=null)
       {padre.addHijo(h2);}
       RESULT = padre;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GRUPO ::= grupo op identificador cp pcoma 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "GRUPO");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRUPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GRUPO ::= grupo op identificador cp pcoma PRODIEDADES 
            {
              ASTNodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "GRUPO");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, ide);
          parser.contador++;
          padre.addHijo(hij);
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRUPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // C_DEF ::= ID 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "C_DEF");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_DEF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // C_DEF ::= GRUPO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "C_DEF");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_DEF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // C_DEF ::= C_DEF ID 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "C_DEF");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_DEF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // C_DEF ::= C_DEF GRUPO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "C_DEF");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_DEF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEF ::= error cBracket 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "DEF");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEF ::= identificador oBracket C_DEF cBracket 
            {
              ASTNodo RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "DEF");
          parser.contador++;
          ASTNodo nombre = new ASTNodo(parser.contador, nom);
          parser.contador++;
          padre.addHijo(nombre);
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEF ::= identificador oBracket cBracket 
            {
              ASTNodo RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "DEF");
          parser.contador++;
          ASTNodo nombre = new ASTNodo(parser.contador, nom);
          parser.contador++;
          padre.addHijo(nombre);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_CSS ::= DEF 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_CSS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CSS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_CSS ::= L_CSS DEF 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_CSS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CSS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_CSS ::= NT$0 L_CSS 
            {
              ASTNodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ASTNodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "INICIO_CSS");
                  parser.contador++;
                  if(h1!=null)
                  {padre.addHijo(h1);}
                  parser.raiz = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CSS",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              ASTNodo RESULT =null;
parser.errores = new ArrayList<>(); parser.contador = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_CSS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo start_val = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

