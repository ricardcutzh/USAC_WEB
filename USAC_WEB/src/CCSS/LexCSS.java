/* The following code was generated by JFlex 1.4.3 on 2/27/18 1:26 PM */

/*----------AREA DE COLDIGO DE USUARIO---------------------------------------------------------------*/
//------->PAQUETES E IMPORTACIONES
package CCSS;
import java_cup.runtime.*;
import AST.TError;
import java.util.ArrayList;

/*----------AREA DE OPCIONES Y DECLARACIONES---------------------------------------------------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/27/18 1:26 PM from the specification file
 * <tt>lexCSS.jflex</tt>
 */
public class LexCSS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\7\1\0\2\55\22\0\1\55\1\0\1\11\4\0"+
    "\1\13\1\46\1\47\1\6\1\50\1\54\1\4\1\10\1\5\12\2"+
    "\1\51\1\53\1\0\1\52\3\0\1\14\1\43\1\27\1\21\1\20"+
    "\1\34\1\35\1\30\1\16\1\32\1\1\1\15\1\40\1\17\1\22"+
    "\1\36\1\24\1\26\1\33\1\31\1\25\1\41\1\1\1\37\1\42"+
    "\1\23\1\44\1\12\1\45\1\0\1\3\1\0\1\14\1\43\1\27"+
    "\1\21\1\20\1\34\1\35\1\30\1\16\1\32\1\1\1\15\1\40"+
    "\1\17\1\22\1\36\1\24\1\26\1\33\1\31\1\25\1\41\1\1"+
    "\1\37\1\42\1\23\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\1\17\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\0\1\21\2\0\1\22\3\0"+
    "\1\23\3\2\1\24\25\2\1\25\1\0\31\2\1\21"+
    "\16\2\1\26\14\2\1\27\12\2\1\30\1\2\1\31"+
    "\2\2\1\32\4\2\1\33\5\2\1\34\5\2\1\35"+
    "\13\2\1\36\3\2\1\37\3\2\1\40\2\2\1\41"+
    "\1\2\1\42\2\2\1\43\1\2\1\44\6\2\1\45"+
    "\1\2\1\46\1\47\1\50\3\2\1\51\1\52\1\2"+
    "\1\53\3\2\1\54\4\2\1\55\1\2\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\56\0\270\0\56\0\56"+
    "\0\346\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\56\0\56\0\56\0\56\0\56\0\56\0\56"+
    "\0\56\0\56\0\u03f4\0\u0422\0\u0450\0\346\0\56\0\u047e"+
    "\0\u0114\0\u04ac\0\56\0\u04da\0\u0508\0\u0536\0\134\0\u0564"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844"+
    "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u03f4\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0450"+
    "\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18"+
    "\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\134\0\u105a"+
    "\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca"+
    "\0\u11f8\0\u1226\0\u1254\0\134\0\u1282\0\u12b0\0\u12de\0\u130c"+
    "\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\134\0\u144e"+
    "\0\134\0\u147c\0\u14aa\0\134\0\u14d8\0\u1506\0\u1534\0\u1562"+
    "\0\134\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\134\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\134\0\u175c\0\u178a\0\u17b8"+
    "\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928"+
    "\0\134\0\u1956\0\u1984\0\u19b2\0\134\0\u19e0\0\u1a0e\0\u1a3c"+
    "\0\134\0\u1a6a\0\u1a98\0\134\0\u1ac6\0\134\0\u1af4\0\u1b22"+
    "\0\134\0\u1b50\0\134\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36"+
    "\0\u1c64\0\134\0\u1c92\0\134\0\134\0\134\0\u1cc0\0\u1cee"+
    "\0\u1d1c\0\134\0\134\0\u1d4a\0\134\0\u1d78\0\u1da6\0\u1dd4"+
    "\0\134\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\134\0\u1eba\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\3\1\17\1\20\4\3\1\21\1\22\1\23\1\24"+
    "\1\3\1\25\1\26\2\3\1\27\1\30\1\3\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\10\57\0\4\3\7\0\30\3\14\0\1\4"+
    "\5\0\1\43\52\0\1\44\1\45\47\0\11\46\1\47"+
    "\1\50\43\46\12\51\1\52\1\53\42\51\1\0\4\3"+
    "\7\0\1\3\1\54\7\3\1\55\16\3\13\0\4\3"+
    "\7\0\4\3\1\56\23\3\13\0\4\3\7\0\5\3"+
    "\1\57\1\3\1\60\20\3\13\0\4\3\7\0\4\3"+
    "\1\61\23\3\13\0\4\3\7\0\4\3\1\62\23\3"+
    "\13\0\4\3\7\0\22\3\1\63\5\3\13\0\4\3"+
    "\7\0\1\64\3\3\1\65\1\3\1\66\2\3\1\67"+
    "\16\3\13\0\4\3\7\0\6\3\1\70\21\3\13\0"+
    "\4\3\7\0\1\71\3\3\1\72\5\3\1\73\15\3"+
    "\13\0\4\3\7\0\11\3\1\74\16\3\13\0\4\3"+
    "\7\0\1\75\5\3\1\76\21\3\13\0\4\3\7\0"+
    "\12\3\1\77\15\3\13\0\4\3\7\0\1\100\1\3"+
    "\1\101\25\3\13\0\4\3\7\0\2\3\1\102\1\3"+
    "\1\103\23\3\13\0\4\3\7\0\6\3\1\104\21\3"+
    "\14\0\1\105\53\0\7\44\1\0\46\44\6\45\1\106"+
    "\47\45\7\46\1\0\46\46\7\51\1\0\46\51\1\0"+
    "\4\3\7\0\2\3\1\107\25\3\13\0\4\3\7\0"+
    "\15\3\1\110\12\3\13\0\4\3\7\0\15\3\1\111"+
    "\12\3\13\0\4\3\7\0\10\3\1\112\17\3\13\0"+
    "\4\3\7\0\21\3\1\113\6\3\13\0\4\3\7\0"+
    "\12\3\1\114\15\3\13\0\4\3\7\0\1\115\27\3"+
    "\13\0\4\3\7\0\22\3\1\116\5\3\13\0\4\3"+
    "\7\0\3\3\1\117\24\3\13\0\4\3\7\0\1\3"+
    "\1\120\26\3\13\0\4\3\7\0\12\3\1\121\15\3"+
    "\13\0\4\3\7\0\12\3\1\122\15\3\13\0\4\3"+
    "\7\0\24\3\1\123\3\3\13\0\4\3\7\0\23\3"+
    "\1\124\4\3\13\0\4\3\7\0\11\3\1\125\16\3"+
    "\13\0\4\3\7\0\17\3\1\126\10\3\13\0\4\3"+
    "\7\0\1\3\1\127\26\3\13\0\4\3\7\0\3\3"+
    "\1\130\6\3\1\131\15\3\13\0\4\3\7\0\11\3"+
    "\1\132\16\3\13\0\4\3\7\0\26\3\1\133\1\3"+
    "\13\0\4\3\7\0\3\3\1\134\24\3\13\0\4\3"+
    "\7\0\17\3\1\135\10\3\13\0\4\3\7\0\12\3"+
    "\1\136\15\3\13\0\4\3\7\0\12\3\1\137\15\3"+
    "\12\0\5\45\1\140\1\106\47\45\1\0\4\3\7\0"+
    "\3\3\1\141\24\3\13\0\4\3\7\0\6\3\1\142"+
    "\21\3\13\0\4\3\7\0\12\3\1\143\15\3\13\0"+
    "\4\3\7\0\11\3\1\144\16\3\13\0\4\3\7\0"+
    "\12\3\1\145\15\3\13\0\4\3\7\0\4\3\1\146"+
    "\23\3\13\0\4\3\7\0\10\3\1\147\17\3\13\0"+
    "\4\3\7\0\2\3\1\150\25\3\13\0\4\3\7\0"+
    "\15\3\1\151\12\3\13\0\4\3\7\0\6\3\1\152"+
    "\21\3\13\0\4\3\7\0\17\3\1\153\10\3\13\0"+
    "\4\3\7\0\2\3\1\154\25\3\13\0\4\3\7\0"+
    "\15\3\1\155\12\3\13\0\4\3\7\0\15\3\1\156"+
    "\12\3\13\0\4\3\7\0\4\3\1\157\23\3\13\0"+
    "\4\3\7\0\15\3\1\160\12\3\13\0\4\3\7\0"+
    "\17\3\1\161\10\3\13\0\4\3\7\0\5\3\1\162"+
    "\22\3\13\0\4\3\7\0\24\3\1\163\3\3\13\0"+
    "\4\3\7\0\22\3\1\164\5\3\13\0\4\3\7\0"+
    "\11\3\1\165\16\3\13\0\4\3\7\0\11\3\1\166"+
    "\16\3\13\0\4\3\7\0\2\3\1\167\25\3\13\0"+
    "\4\3\7\0\15\3\1\170\12\3\13\0\4\3\7\0"+
    "\5\3\1\171\22\3\13\0\4\3\7\0\4\3\1\172"+
    "\23\3\13\0\4\3\7\0\12\3\1\173\15\3\13\0"+
    "\4\3\7\0\1\174\27\3\13\0\4\3\7\0\2\3"+
    "\1\175\25\3\13\0\4\3\7\0\2\3\1\176\25\3"+
    "\13\0\4\3\7\0\13\3\1\177\14\3\13\0\4\3"+
    "\7\0\11\3\1\200\16\3\13\0\4\3\7\0\15\3"+
    "\1\201\12\3\13\0\4\3\7\0\12\3\1\202\15\3"+
    "\13\0\4\3\7\0\12\3\1\203\15\3\13\0\4\3"+
    "\7\0\2\3\1\204\25\3\13\0\4\3\7\0\7\3"+
    "\1\205\20\3\13\0\4\3\7\0\4\3\1\206\23\3"+
    "\13\0\4\3\7\0\6\3\1\207\21\3\13\0\4\3"+
    "\7\0\2\3\1\210\25\3\13\0\4\3\7\0\4\3"+
    "\1\211\23\3\13\0\4\3\7\0\6\3\1\212\21\3"+
    "\13\0\4\3\7\0\1\213\27\3\13\0\4\3\7\0"+
    "\6\3\1\214\21\3\13\0\4\3\7\0\17\3\1\215"+
    "\10\3\13\0\4\3\7\0\17\3\1\216\10\3\13\0"+
    "\4\3\7\0\27\3\1\217\13\0\4\3\7\0\2\3"+
    "\1\220\25\3\13\0\4\3\7\0\4\3\1\221\23\3"+
    "\13\0\4\3\7\0\1\222\27\3\13\0\4\3\7\0"+
    "\4\3\1\223\23\3\13\0\4\3\7\0\4\3\1\224"+
    "\23\3\13\0\4\3\7\0\1\3\1\225\26\3\13\0"+
    "\4\3\7\0\14\3\1\226\13\3\13\0\4\3\7\0"+
    "\4\3\1\227\23\3\13\0\4\3\7\0\1\230\27\3"+
    "\13\0\4\3\7\0\1\231\27\3\13\0\4\3\7\0"+
    "\15\3\1\232\12\3\13\0\4\3\7\0\25\3\1\233"+
    "\2\3\13\0\4\3\7\0\6\3\1\234\21\3\13\0"+
    "\4\3\7\0\23\3\1\235\4\3\13\0\4\3\7\0"+
    "\20\3\1\236\7\3\13\0\4\3\7\0\4\3\1\237"+
    "\23\3\13\0\4\3\7\0\15\3\1\240\12\3\13\0"+
    "\4\3\7\0\13\3\1\241\14\3\13\0\4\3\7\0"+
    "\13\3\1\242\14\3\13\0\4\3\7\0\1\3\1\243"+
    "\26\3\13\0\4\3\7\0\13\3\1\244\14\3\13\0"+
    "\4\3\7\0\5\3\1\245\22\3\13\0\4\3\7\0"+
    "\5\3\1\246\22\3\13\0\4\3\7\0\12\3\1\247"+
    "\15\3\13\0\4\3\7\0\1\3\1\250\26\3\13\0"+
    "\4\3\7\0\1\251\27\3\13\0\4\3\7\0\1\3"+
    "\1\252\26\3\13\0\4\3\7\0\5\3\1\253\22\3"+
    "\13\0\4\3\7\0\4\3\1\254\23\3\13\0\4\3"+
    "\7\0\1\255\27\3\13\0\4\3\7\0\3\3\1\256"+
    "\24\3\13\0\4\3\7\0\2\3\1\257\25\3\13\0"+
    "\4\3\7\0\1\3\1\260\26\3\13\0\4\3\7\0"+
    "\6\3\1\261\21\3\13\0\4\3\7\0\11\3\1\262"+
    "\16\3\13\0\4\3\7\0\11\3\1\263\16\3\13\0"+
    "\4\3\7\0\4\3\1\264\23\3\13\0\4\3\7\0"+
    "\1\265\27\3\13\0\4\3\7\0\6\3\1\266\21\3"+
    "\13\0\4\3\7\0\2\3\1\267\25\3\13\0\4\3"+
    "\7\0\5\3\1\270\22\3\13\0\4\3\7\0\1\271"+
    "\27\3\13\0\3\3\1\272\7\0\30\3\13\0\4\3"+
    "\7\0\6\3\1\273\21\3\13\0\4\3\7\0\23\3"+
    "\1\274\4\3\13\0\4\3\7\0\15\3\1\275\12\3"+
    "\13\0\4\3\7\0\13\3\1\276\14\3\13\0\4\3"+
    "\7\0\4\3\1\277\23\3\13\0\4\3\7\0\1\3"+
    "\1\300\26\3\13\0\4\3\7\0\1\3\1\301\26\3"+
    "\13\0\4\3\7\0\1\3\1\302\26\3\13\0\4\3"+
    "\7\0\24\3\1\303\3\3\13\0\4\3\7\0\1\304"+
    "\27\3\13\0\4\3\7\0\15\3\1\305\12\3\13\0"+
    "\4\3\7\0\15\3\1\306\12\3\13\0\4\3\7\0"+
    "\1\307\27\3\13\0\4\3\7\0\1\310\27\3\13\0"+
    "\4\3\7\0\24\3\1\311\3\3\13\0\4\3\7\0"+
    "\1\312\27\3\13\0\4\3\7\0\1\313\27\3\13\0"+
    "\4\3\7\0\4\3\1\314\23\3\13\0\4\3\7\0"+
    "\1\3\1\315\26\3\13\0\4\3\7\0\5\3\1\316"+
    "\22\3\13\0\4\3\7\0\4\3\1\317\23\3\13\0"+
    "\4\3\7\0\3\3\1\320\24\3\13\0\4\3\7\0"+
    "\6\3\1\321\21\3\13\0\4\3\7\0\3\3\1\322"+
    "\24\3\13\0\4\3\7\0\17\3\1\323\10\3\13\0"+
    "\4\3\7\0\15\3\1\324\12\3\13\0\4\3\7\0"+
    "\2\3\1\325\25\3\13\0\4\3\7\0\6\3\1\326"+
    "\21\3\13\0\4\3\7\0\6\3\1\327\21\3\13\0"+
    "\4\3\7\0\3\3\1\330\24\3\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\2\11\21\1\11\11"+
    "\1\0\1\1\2\0\1\11\3\0\1\11\32\1\1\0"+
    "\222\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //CODIGO DE USUARIO EN SINTAXIS JAVA
    public ArrayList<TError> LexError = new ArrayList<>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexCSS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexCSS(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
          }
        case 47: break;
        case 35: 
          { return new Symbol(Simbolos.negrilla, yycolumn, yyline, yytext());
          }
        case 48: break;
        case 10: 
          { return new Symbol(Simbolos.op, yycolumn, yyline, yytext());
          }
        case 49: break;
        case 42: 
          { return new Symbol(Simbolos.minus, yycolumn, yyline, yytext());
          }
        case 50: break;
        case 44: 
          { return new Symbol(Simbolos.justificado, yycolumn, yyline, yytext());
          }
        case 51: break;
        case 38: 
          { return new Symbol(Simbolos.izquierda, yycolumn, yyline, yytext());
          }
        case 52: break;
        case 30: 
          { return new Symbol(Simbolos.derecha, yycolumn, yyline, yytext());
          }
        case 53: break;
        case 40: 
          { return new Symbol(Simbolos.colortext, yycolumn, yyline, yytext());
          }
        case 54: break;
        case 19: 
          { return new Symbol(Simbolos.cadena2, yycolumn, yyline, yytext());
          }
        case 55: break;
        case 6: 
          { return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
          }
        case 56: break;
        case 45: 
          { return new Symbol(Simbolos.felemento, yycolumn, yyline, yytext());
          }
        case 57: break;
        case 17: 
          { /*System.out.println(yytext());/*IGNORA LOS COMENTARIOS*/
          }
        case 58: break;
        case 27: 
          { return new Symbol(Simbolos.borde, yycolumn, yyline, yytext());
          }
        case 59: break;
        case 28: 
          { return new Symbol(Simbolos.opaque, yycolumn, yyline, yytext());
          }
        case 60: break;
        case 26: 
          { return new Symbol(Simbolos.grupo, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 22: 
          { return new Symbol(Simbolos.Ttrue, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 37: 
          { return new Symbol(Simbolos.vertical, yycolumn, yyline, yytext());
          }
        case 63: break;
        case 5: 
          { return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 20: 
          { return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 25: 
          { return new Symbol(Simbolos.Tfalse, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 36: 
          { return new Symbol(Simbolos.centrado, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 13: 
          { return new Symbol(Simbolos.dosP, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 7: 
          { /*NO HAGO NADA*/
          }
        case 69: break;
        case 43: 
          { return new Symbol(Simbolos.horizontal, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 15: 
          { return new Symbol(Simbolos.pcoma, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 14: 
          { return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 33: 
          { return new Symbol(Simbolos.visible, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 32: 
          { return new Symbol(Simbolos.formato, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 46: 
          { return new Symbol(Simbolos.autoRed, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 41: 
          { return new Symbol(Simbolos.mayus, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 23: 
          { return new Symbol(Simbolos.letra, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 29: 
          { return new Symbol(Simbolos.tamtext, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 2: 
          { return new Symbol(Simbolos.identificador, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 9: 
          { return new Symbol(Simbolos.cBracket, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 3: 
          { return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 24: 
          { return new Symbol(Simbolos.texto, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 11: 
          { return new Symbol(Simbolos.cp, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 8: 
          { return new Symbol(Simbolos.oBracket, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 39: 
          { return new Symbol(Simbolos.capital, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 12: 
          { return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 31: 
          { return new Symbol(Simbolos.cursiva, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 4: 
          { return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 1: 
          { TError errorlex = new TError(yytext(),"Error Lexico","Caracter no Reconocido", yyline, yycolumn);
                                    LexError.add(errorlex);
          }
        case 89: break;
        case 16: 
          { return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 34: 
          { return new Symbol(Simbolos.alineado, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 21: 
          { return new Symbol(Simbolos.decimal, yycolumn, yyline, yytext());
          }
        case 92: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
