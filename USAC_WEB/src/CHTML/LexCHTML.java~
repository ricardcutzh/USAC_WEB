/* The following code was generated by JFlex 1.4.3 on 2/19/18 9:19 PM */

/*----------AREA DE COLDIGO DE USUARIO---------------------------------------------------------------*/
//------->PAQUETES E IMPORTACIONES
package CHTML;
import java_cup.runtime.*;
import AST.TError;
import java.util.ArrayList;

/*----------AREA DE OPCIONES Y DECLARACIONES---------------------------------------------------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/19/18 9:19 PM from the specification file
 * <tt>lex2.jflex</tt>
 */
public class LexCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\7\1\0\2\47\22\0\1\47\1\0\1\5\7\0"+
    "\1\20\1\0\1\45\1\4\1\0\1\11\12\2\1\17\1\44\1\10"+
    "\1\43\1\12\2\0\1\32\1\33\1\23\1\35\1\14\1\27\1\42"+
    "\1\24\1\30\1\41\1\46\1\26\1\25\1\31\1\16\1\40\1\1"+
    "\1\37\1\21\1\13\1\36\2\1\1\15\1\1\1\34\1\0\1\6"+
    "\2\0\1\3\1\0\1\32\1\33\1\23\1\35\1\14\1\27\1\42"+
    "\1\24\1\30\1\41\1\46\1\26\1\25\1\31\1\16\1\40\1\1"+
    "\1\37\1\22\1\13\1\36\2\1\1\15\1\1\1\34\1\0\1\20"+
    "\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\12\2"+
    "\1\6\1\7\1\10\1\2\2\0\1\11\4\0\3\2"+
    "\1\12\3\2\1\13\5\2\1\14\6\2\3\0\10\2"+
    "\1\15\13\2\2\16\2\0\4\2\1\17\7\2\1\20"+
    "\3\2\1\21\2\2\4\0\1\2\1\22\2\2\1\23"+
    "\1\24\1\2\1\25\1\26\11\2\1\27\1\30\1\31"+
    "\1\32\4\0\1\33\1\2\1\34\1\35\3\2\1\36"+
    "\2\2\1\37\6\2\1\40\1\2\3\0\1\41\10\2"+
    "\1\42\5\2\1\43\2\0\5\2\1\44\6\2\1\45"+
    "\1\43\1\0\2\2\1\46\2\2\1\47\1\2\1\50"+
    "\1\2\1\51\1\52\1\41\1\53\1\54\1\2\1\55"+
    "\1\56\1\57\3\2\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\50\0\240\0\50\0\310"+
    "\0\360\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208"+
    "\0\u0230\0\50\0\50\0\50\0\u0258\0\u0280\0\170\0\50"+
    "\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398\0\u0258"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0258\0\u0438\0\u0460\0\u0488\0\u04b0"+
    "\0\u04d8\0\u0258\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8"+
    "\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u0258\0\u07a8\0\u07d0\0\u07f8\0\u0820"+
    "\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960"+
    "\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0258"+
    "\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0258"+
    "\0\u0bb8\0\u0be0\0\u0c08\0\u0258\0\u0c30\0\u0c58\0\u0c80\0\u0ca8"+
    "\0\u0cd0\0\u0cf8\0\u0d20\0\u0258\0\u0d48\0\u0d70\0\u0258\0\u0258"+
    "\0\u0d98\0\u0258\0\u0258\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60"+
    "\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0258\0\u0258\0\u0258\0\u0258"+
    "\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0258\0\u0fc8\0\u0258\0\u0258"+
    "\0\u0ff0\0\u1018\0\u1040\0\u0258\0\u1068\0\u1090\0\u0258\0\u10b8"+
    "\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u0258\0\u11a8\0\u11d0"+
    "\0\u11f8\0\u1220\0\u0fa0\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8"+
    "\0\u1310\0\u1338\0\u1360\0\u0258\0\u1388\0\u13b0\0\u13d8\0\u1400"+
    "\0\u1428\0\u09b0\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518"+
    "\0\u1540\0\u0258\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630"+
    "\0\u0258\0\u0ca8\0\u1658\0\u1680\0\u16a8\0\u0258\0\u16d0\0\u16f8"+
    "\0\u0258\0\u1720\0\u0258\0\u1748\0\u0258\0\u0258\0\u1658\0\u0258"+
    "\0\u0258\0\u1770\0\u0258\0\u0258\0\u0258\0\u1798\0\u17c0\0\u17e8"+
    "\0\u0258";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\2\1\4\1\2\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\2\3\2\2\2\3\1\12\3\3"+
    "\1\13\1\14\1\3\1\15\1\16\3\3\1\17\1\20"+
    "\1\3\1\21\1\22\1\23\1\24\1\3\1\5\51\0"+
    "\4\25\6\0\4\25\1\26\1\0\22\25\3\0\1\25"+
    "\1\0\5\27\1\30\1\31\41\27\7\32\1\0\1\32"+
    "\1\33\1\32\1\34\34\32\1\0\4\25\6\0\4\25"+
    "\1\26\1\0\7\25\1\35\1\25\1\36\10\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\1\26\1\0\10\25"+
    "\1\37\11\25\3\0\1\25\2\0\4\25\6\0\1\40"+
    "\3\25\1\26\1\0\2\25\1\41\1\42\1\25\1\43"+
    "\4\25\1\44\2\25\1\45\2\25\1\46\1\25\3\0"+
    "\1\25\2\0\4\25\6\0\3\25\1\47\1\26\1\0"+
    "\7\25\1\50\12\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\1\26\1\0\4\25\1\51\7\25\1\52\5\25"+
    "\3\0\1\25\2\0\4\25\6\0\4\25\1\26\1\0"+
    "\5\25\1\53\2\25\1\54\11\25\3\0\1\25\2\0"+
    "\4\25\6\0\3\25\1\55\1\26\1\0\22\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\1\26\1\0\15\25"+
    "\1\56\4\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\1\26\1\0\11\25\1\57\10\25\3\0\1\25\2\0"+
    "\4\25\6\0\4\25\1\26\1\0\16\25\1\60\3\25"+
    "\3\0\1\25\2\0\4\25\6\0\4\25\2\0\22\25"+
    "\3\0\1\25\12\0\1\61\36\0\7\27\1\0\40\27"+
    "\7\32\1\0\3\32\1\34\43\32\1\0\1\32\1\62"+
    "\1\32\1\34\43\32\1\0\3\32\1\34\1\63\33\32"+
    "\1\0\4\25\6\0\1\64\3\25\2\0\22\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\2\0\12\25\1\65"+
    "\7\25\3\0\1\25\2\0\4\25\6\0\4\25\2\0"+
    "\2\25\1\66\2\25\1\67\14\25\3\0\1\25\2\0"+
    "\4\25\6\0\4\25\2\0\2\70\20\25\3\0\1\25"+
    "\2\0\4\25\6\0\1\71\3\25\2\0\22\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\2\0\7\25\1\72"+
    "\12\25\3\0\1\25\2\0\4\25\6\0\1\25\1\73"+
    "\2\25\2\0\22\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\2\74\20\25\3\0\1\25\2\0\4\25"+
    "\6\0\4\25\2\0\10\25\1\75\11\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\5\25\1\76\2\25"+
    "\1\77\11\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\11\25\1\100\10\25\3\0\1\25\2\0\4\25"+
    "\6\0\1\101\3\25\2\0\7\25\1\102\12\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\2\0\2\25\1\103"+
    "\17\25\3\0\1\25\2\0\4\25\6\0\1\104\3\25"+
    "\2\0\22\25\3\0\1\25\2\0\4\25\6\0\1\105"+
    "\3\25\2\0\22\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\10\25\1\106\11\25\3\0\1\25\2\0"+
    "\4\25\6\0\4\25\2\0\15\25\1\107\4\25\3\0"+
    "\1\25\1\0\6\110\1\111\1\0\10\110\2\111\26\110"+
    "\4\32\1\112\2\32\1\0\3\32\1\34\43\32\1\0"+
    "\3\32\1\34\1\32\1\113\32\32\1\0\4\25\6\0"+
    "\4\25\2\0\15\25\1\114\4\25\3\0\1\25\2\0"+
    "\4\25\6\0\4\25\2\0\5\25\1\115\14\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\2\0\11\25\1\116"+
    "\10\25\3\0\1\25\2\0\4\25\6\0\4\25\2\0"+
    "\11\25\1\117\10\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\2\120\20\25\3\0\1\25\2\0\4\25"+
    "\6\0\4\25\2\0\4\25\1\121\15\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\2\25\1\122\17\25"+
    "\3\0\1\25\2\0\4\25\6\0\4\25\2\0\16\25"+
    "\1\123\3\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\14\25\1\124\5\25\3\0\1\25\2\0\2\25"+
    "\1\125\1\25\6\0\4\25\2\0\22\25\3\0\1\25"+
    "\2\0\3\25\1\126\6\0\4\25\2\0\22\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\2\0\21\25\1\127"+
    "\3\0\1\25\2\0\4\25\6\0\3\25\1\130\2\0"+
    "\22\25\3\0\1\25\2\0\4\25\6\0\4\25\2\0"+
    "\10\25\1\131\11\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\3\25\1\132\16\25\3\0\1\25\2\0"+
    "\4\25\6\0\3\25\1\133\2\0\22\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\11\25\1\134\10\25"+
    "\3\0\1\25\2\0\4\25\6\0\1\25\1\135\2\25"+
    "\2\0\22\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\17\25\1\136\2\25\3\0\1\25\1\0\10\110"+
    "\1\0\1\110\1\0\7\110\1\0\75\110\4\112\1\137"+
    "\2\112\1\140\3\112\1\141\34\112\7\32\1\0\3\32"+
    "\1\142\34\32\1\0\4\25\6\0\4\25\2\0\5\25"+
    "\1\143\14\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\11\25\1\144\10\25\3\0\1\25\2\0\4\25"+
    "\6\0\4\25\2\0\12\25\1\145\7\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\2\25\1\146\17\25"+
    "\3\0\1\25\2\0\4\25\6\0\4\25\2\0\5\25"+
    "\1\147\14\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\22\25\3\0\1\150\2\0\4\25\6\0\4\25"+
    "\2\0\17\25\1\151\2\25\3\0\1\25\2\0\4\25"+
    "\6\0\3\25\1\152\2\0\22\25\3\0\1\25\2\0"+
    "\4\25\6\0\1\153\3\25\2\0\22\25\3\0\1\25"+
    "\2\0\4\25\6\0\1\154\1\155\2\25\2\0\2\25"+
    "\1\156\3\25\1\157\1\160\2\25\1\161\4\25\1\162"+
    "\2\25\3\0\1\25\2\0\4\25\6\0\1\25\1\163"+
    "\2\25\2\0\22\25\3\0\1\25\2\0\4\25\6\0"+
    "\1\25\1\164\2\25\2\0\22\25\3\0\1\25\2\0"+
    "\4\25\6\0\3\25\1\165\2\0\22\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\10\25\1\166\11\25"+
    "\3\0\1\25\2\0\4\25\6\0\4\25\2\0\5\25"+
    "\1\167\14\25\3\0\1\25\2\0\4\25\6\0\3\25"+
    "\1\170\2\0\22\25\3\0\1\25\1\0\4\112\1\137"+
    "\2\112\1\140\1\112\1\171\1\112\1\141\34\112\4\140"+
    "\1\172\43\140\4\112\1\137\2\112\1\140\3\112\1\141"+
    "\1\173\33\112\7\32\1\0\3\32\1\34\1\63\1\32"+
    "\1\174\31\32\1\0\4\25\6\0\3\25\1\175\2\0"+
    "\22\25\3\0\1\25\2\0\4\25\6\0\1\25\1\176"+
    "\2\25\2\0\22\25\3\0\1\25\2\0\4\25\6\0"+
    "\1\25\1\177\2\25\2\0\22\25\3\0\1\25\2\0"+
    "\4\25\6\0\3\25\1\200\2\0\22\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\7\25\1\201\1\25"+
    "\1\202\10\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\10\25\1\203\11\25\3\0\1\25\2\0\4\25"+
    "\6\0\1\204\3\25\2\0\2\25\1\205\1\206\6\25"+
    "\1\207\2\25\1\210\2\25\1\211\1\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\7\25\1\212\12\25"+
    "\3\0\1\25\2\0\4\25\6\0\4\25\2\0\4\25"+
    "\1\213\15\25\3\0\1\25\2\0\4\25\6\0\3\25"+
    "\1\214\2\0\22\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\11\25\1\215\10\25\3\0\1\25\2\0"+
    "\4\25\6\0\4\25\2\0\10\25\1\216\11\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\2\0\11\25\1\217"+
    "\10\25\3\0\1\25\1\0\4\112\1\137\2\112\1\140"+
    "\1\112\1\220\1\112\1\141\34\112\4\140\1\172\4\140"+
    "\1\221\36\140\4\112\1\137\2\112\1\140\3\112\1\141"+
    "\1\112\1\222\32\112\7\174\1\0\2\174\1\223\35\174"+
    "\1\0\4\25\6\0\4\25\2\0\13\25\1\224\6\25"+
    "\3\0\1\25\2\0\4\25\6\0\1\225\3\25\2\0"+
    "\22\25\3\0\1\25\2\0\4\25\6\0\4\25\2\0"+
    "\12\25\1\226\7\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\2\25\1\227\2\25\1\230\14\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\2\0\2\231\20\25"+
    "\3\0\1\25\2\0\4\25\6\0\1\232\3\25\2\0"+
    "\22\25\3\0\1\25\2\0\4\25\6\0\1\25\1\233"+
    "\2\25\2\0\22\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\2\234\20\25\3\0\1\25\2\0\4\25"+
    "\6\0\4\25\2\0\5\25\1\235\14\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\11\25\1\236\10\25"+
    "\3\0\1\25\2\0\4\25\6\0\1\237\3\25\2\0"+
    "\22\25\3\0\1\25\2\0\4\25\6\0\4\25\2\0"+
    "\10\25\1\240\11\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\14\25\1\241\5\25\3\0\1\25\1\0"+
    "\4\112\1\137\2\112\1\140\2\112\1\242\1\141\34\112"+
    "\4\140\1\172\4\140\1\243\36\140\4\112\1\137\2\112"+
    "\1\140\3\112\1\244\34\112\1\0\4\25\6\0\4\25"+
    "\2\0\11\25\1\245\10\25\3\0\1\25\2\0\4\25"+
    "\6\0\4\25\2\0\15\25\1\246\4\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\5\25\1\247\14\25"+
    "\3\0\1\25\2\0\4\25\6\0\4\25\2\0\11\25"+
    "\1\250\10\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\11\25\1\251\10\25\3\0\1\25\2\0\4\25"+
    "\6\0\4\25\2\0\2\252\20\25\3\0\1\25\2\0"+
    "\4\25\6\0\4\25\2\0\4\25\1\253\15\25\3\0"+
    "\1\25\2\0\4\25\6\0\4\25\2\0\16\25\1\254"+
    "\3\25\3\0\1\25\2\0\2\25\1\255\1\25\6\0"+
    "\4\25\2\0\22\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\21\25\1\256\3\0\1\25\2\0\4\25"+
    "\6\0\3\25\1\257\2\0\22\25\3\0\1\25\2\0"+
    "\4\25\6\0\1\25\1\260\2\25\2\0\22\25\3\0"+
    "\1\25\2\0\4\25\6\0\3\25\1\261\2\0\22\25"+
    "\3\0\1\25\1\0\4\140\1\172\5\140\1\262\35\140"+
    "\4\112\1\137\2\112\1\140\3\112\1\141\1\173\1\112"+
    "\1\263\31\112\1\0\4\25\6\0\4\25\2\0\14\25"+
    "\1\264\5\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\5\25\1\265\14\25\3\0\1\25\2\0\4\25"+
    "\6\0\4\25\2\0\11\25\1\266\10\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\12\25\1\267\7\25"+
    "\3\0\1\25\2\0\4\25\6\0\4\25\2\0\2\25"+
    "\1\270\17\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\5\25\1\271\14\25\3\0\1\25\2\0\4\25"+
    "\6\0\4\25\2\0\17\25\1\272\2\25\3\0\1\25"+
    "\2\0\4\25\6\0\1\273\3\25\2\0\22\25\3\0"+
    "\1\25\2\0\4\25\6\0\1\25\1\274\2\25\2\0"+
    "\22\25\3\0\1\25\2\0\4\25\6\0\4\25\2\0"+
    "\10\25\1\275\11\25\3\0\1\25\2\0\4\25\6\0"+
    "\4\25\2\0\5\25\1\276\14\25\3\0\1\25\1\0"+
    "\7\263\1\140\2\263\1\277\35\263\1\0\4\25\6\0"+
    "\3\25\1\300\2\0\22\25\3\0\1\25\2\0\4\25"+
    "\6\0\3\25\1\301\2\0\22\25\3\0\1\25\2\0"+
    "\4\25\6\0\1\25\1\302\2\25\2\0\22\25\3\0"+
    "\1\25\2\0\4\25\6\0\1\25\1\303\2\25\2\0"+
    "\22\25\3\0\1\25\2\0\4\25\6\0\3\25\1\304"+
    "\2\0\22\25\3\0\1\25\2\0\4\25\6\0\4\25"+
    "\2\0\10\25\1\305\11\25\3\0\1\25\2\0\4\25"+
    "\6\0\4\25\2\0\13\25\1\306\6\25\3\0\1\25"+
    "\2\0\4\25\6\0\4\25\2\0\11\25\1\307\10\25"+
    "\3\0\1\25\2\0\4\25\6\0\4\25\2\0\14\25"+
    "\1\310\5\25\3\0\1\25\2\0\4\25\6\0\3\25"+
    "\1\311\2\0\22\25\3\0\1\25\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\12\1\3\11"+
    "\1\1\2\0\1\11\4\0\24\1\3\0\26\1\2\0"+
    "\23\1\4\0\26\1\4\0\23\1\3\0\20\1\2\0"+
    "\16\1\1\0\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //CODIGO DE USUARIO EN SINTAXIS JAVA
    public ArrayList<TError> LexError = new ArrayList<>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexCHTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexCHTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /*System.out.println("Encontre:  opentag");*/ return new Symbol(Simbolos.opentag, yycolumn, yyline, yytext());
          }
        case 49: break;
        case 31: 
          { /*System.out.println("Encontre:  fin-cb"); */return new Symbol(Simbolos.finCb, yycolumn, yyline, yytext());
          }
        case 50: break;
        case 44: 
          { /*System.out.println("Encontre:  fin-titulo "+yytext());*/ return new Symbol(Simbolos.finTitulo, yycolumn, yyline, yytext());
          }
        case 51: break;
        case 9: 
          { /*System.out.println("Encontre cadena: "+yytext());*/ return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
          }
        case 52: break;
        case 5: 
          { /*System.out.println("Encontre:  closetag");*/ return new Symbol(Simbolos.closetag, yycolumn, yyline, yytext());
          }
        case 53: break;
        case 12: 
          { /*System.out.println("Encontre:  id");*/ return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
          }
        case 54: break;
        case 27: 
          { /*System.out.println("Encontre:  titulo "+yytext());*/ return new Symbol(Simbolos.titulo, yycolumn, yyline, yytext());
          }
        case 55: break;
        case 42: 
          { /*System.out.println("Encontre:  fin-panel"); */return new Symbol(Simbolos.finPanel, yycolumn, yyline, yytext());
          }
        case 56: break;
        case 15: 
          { /*System.out.println("Encontre:  ccss");*/ return new Symbol(Simbolos.ccss, yycolumn, yyline, yytext());
          }
        case 57: break;
        case 33: 
          { System.out.println("Encontre Token texto: "+yytext()); return new Symbol(Simbolos.tTexto, yycolumn, yyline, yytext());
          }
        case 58: break;
        case 16: 
          { /*System.out.println("Encontre:  alto");*/ return new Symbol(Simbolos.alto, yycolumn, yyline, yytext());
          }
        case 59: break;
        case 30: 
          { /*System.out.println("Encontre:  fin-ct");*/ return new Symbol(Simbolos.finCt, yycolumn, yyline, yytext());
          }
        case 60: break;
        case 1: 
          { TError errorlex = new TError(yytext(),"Error Lexico","Caracter no Reconocido", yyline, yycolumn);
                                  LexError.add(errorlex);
          }
        case 61: break;
        case 38: 
          { /*System.out.println("Encontre:  fin-tabla");*/ return new Symbol(Simbolos.finTabla, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 45: 
          { /*System.out.println("Encontre:  fin-enlace");*/ return new Symbol(Simbolos.finEnlace, yycolumn, yyline, yytext());
          }
        case 63: break;
        case 23: 
          { /*System.out.println("Encontre:  ancho"); */return new Symbol(Simbolos.ancho, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 18: 
          { /*System.out.println("Encontre:  tabla");*/ return new Symbol(Simbolos.tabla, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 24: 
          { /*System.out.println("Encontre:  boton");*/ return new Symbol(Simbolos.boton, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 34: 
          { /*System.out.println("Encontre:  fin-cjs");*/ return new Symbol(Simbolos.finCjs, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 32: 
          { /*System.out.println("Encontre:  imagen");*/ return new Symbol(Simbolos.imagen, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 2: 
          { /*System.out.println("Encontre Token titulo: "+yytext());*/ return new Symbol(Simbolos.palabra, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 28: 
          { /*System.out.println("Encontre:  enlace");*/ return new Symbol(Simbolos.enlace, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 8: 
          { /*System.out.println("Encontre:  coma");*/ return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 3: 
          { /*System.out.println("Encontre delimitador: "+yytext()); return new Symbol(Simbolos.delim, yycolumn, yyline, yytext());*/
          }
        case 72: break;
        case 40: 
          { /*System.out.println("Encontre:  fin-fil_t");*/ return new Symbol(Simbolos.finFil_t, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 10: 
          { /*System.out.println("Encontre:  ct");*/ return new Symbol(Simbolos.ct, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 20: 
          { /*System.out.println("Encontre:  click");*/ return new Symbol(Simbolos.click, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 19: 
          { /*System.out.println("Encontre:  chtml "+yytext());*/ return new Symbol(Simbolos.chtml, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 46: 
          { /*System.out.println("Encontre:  fin-cuerpo "+yytext());*/ return new Symbol(Simbolos.finCuerpo, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 43: 
          { /*System.out.println("Encontre:  encabezado "+yytext());*/ return new Symbol(Simbolos.encabezado, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 48: 
          { /*System.out.println("Encontre:  fin-encabezado "+yytext());*/ return new Symbol(Simbolos.finEncabezado, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 26: 
          { /*System.out.println("Encontre:  grupo");*/ return new Symbol(Simbolos.grupo, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 14: 
          { System.out.println("Encontre Token PATH: "+yytext()); return new Symbol(Simbolos.path, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 47: 
          { /*System.out.println("Encontre:  fin-imagen");*/ return new Symbol(Simbolos.finImagen, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 39: 
          { /*System.out.println("Encontre:  fin-chtml "+yytext());*/ return new Symbol(Simbolos.finChtml, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 21: 
          { /*System.out.println("Encontre:  fondo");*/ return new Symbol(Simbolos.fondo, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 29: 
          { /*System.out.println("Encontre:  cuerpo "+yytext());*/ return new Symbol(Simbolos.cuerpo, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 17: 
          { /*System.out.println("Encontre:  ruta");*/ return new Symbol(Simbolos.ruta, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 41: 
          { /*System.out.println("Encontre:  fin-boton");*/ return new Symbol(Simbolos.finBoton, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 36: 
          { /*System.out.println("Encontre:  fin-ccss");*/ return new Symbol(Simbolos.finCcss, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 37: 
          { /*System.out.println("Encontre:  alineado");*/ return new Symbol(Simbolos.alineado, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 7: 
          { /*System.out.println("Encontre:  pcoma");*/ return new Symbol(Simbolos.pcoma, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 6: 
          { /*System.out.println("Encontre:  igual");*/ return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 25: 
          { /*System.out.println("Encontre:  panel");*/ return new Symbol(Simbolos.panel, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 35: 
          { /*System.out.println("Encontre comentario: "+yytext());*/ /*return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());*/
          }
        case 93: break;
        case 13: 
          { /*System.out.println("Encontre:  cjs");*/ return new Symbol(Simbolos.cjs, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 22: 
          { /*System.out.println("Encontre:  fil_t");*/ return new Symbol(Simbolos.fil_t, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 11: 
          { /*System.out.println("Encontre:  cb"); */return new Symbol(Simbolos.cb, yycolumn, yyline, yytext());
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
