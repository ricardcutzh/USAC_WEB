/* The following code was generated by JFlex 1.4.3 on 2/20/18 5:32 PM */

/*----------AREA DE COLDIGO DE USUARIO---------------------------------------------------------------*/
//------->PAQUETES E IMPORTACIONES
package CHTML;
import java_cup.runtime.*;
import AST.TError;
import java.util.ArrayList;

/*----------AREA DE OPCIONES Y DECLARACIONES---------------------------------------------------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/20/18 5:32 PM from the specification file
 * <tt>lex2.jflex</tt>
 */
public class LexCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\7\1\0\2\50\22\0\1\50\1\0\1\5\7\0"+
    "\1\24\1\0\1\45\1\4\1\0\1\11\12\1\1\23\1\44\1\10"+
    "\1\43\1\12\2\0\1\22\1\33\1\27\1\35\1\14\1\17\1\42"+
    "\1\30\1\20\1\41\1\47\1\32\1\31\1\21\1\16\1\40\1\2"+
    "\1\37\1\25\1\13\1\36\1\46\1\2\1\15\1\2\1\34\1\0"+
    "\1\6\2\0\1\3\1\0\1\22\1\33\1\27\1\35\1\14\1\17"+
    "\1\42\1\30\1\20\1\41\1\47\1\32\1\31\1\21\1\16\1\40"+
    "\1\2\1\37\1\26\1\13\1\36\1\46\1\2\1\15\1\2\1\34"+
    "\1\0\1\24\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\14\3\1\7\1\10\1\11\2\3\2\0\1\12\3\0"+
    "\7\3\1\13\4\3\1\14\4\3\1\15\7\3\3\0"+
    "\23\3\1\16\5\3\2\17\2\0\12\3\1\20\3\3"+
    "\1\21\1\22\4\3\1\23\3\3\2\0\1\3\1\24"+
    "\3\3\1\25\11\3\1\26\1\3\1\27\4\3\1\30"+
    "\1\31\1\3\1\32\1\33\1\34\1\35\2\0\1\36"+
    "\1\3\1\37\1\40\7\3\1\41\3\3\1\42\4\3"+
    "\1\43\4\3\1\44\4\0\15\3\1\45\4\3\1\46"+
    "\1\3\1\47\2\0\11\3\1\50\1\51\4\3\1\52"+
    "\2\3\2\0\2\3\1\53\3\3\1\54\3\3\1\55"+
    "\1\3\1\56\1\57\1\60\1\3\2\0\1\61\1\62"+
    "\1\3\1\63\1\64\1\65\2\3\1\66\1\67\2\0"+
    "\1\3\1\70\1\3\2\0\2\3\2\0\2\3\2\0"+
    "\1\71\1\72\3\0\1\73\2\0\1\73\1\0\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\51\0\315\0\51"+
    "\0\366\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\51\0\51\0\51\0\u02e2"+
    "\0\u030b\0\u0334\0\244\0\51\0\u035d\0\u0386\0\u03af\0\u03d8"+
    "\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u030b\0\u04f7"+
    "\0\u0520\0\u0549\0\u0572\0\u030b\0\u059b\0\u05c4\0\u05ed\0\u0616"+
    "\0\u030b\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735"+
    "\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d"+
    "\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5"+
    "\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u030b\0\u0ae4"+
    "\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c"+
    "\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74"+
    "\0\u0d9d\0\u0dc6\0\u030b\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u030b"+
    "\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u030b\0\u0f37\0\u0f60\0\u0f89"+
    "\0\u0fb2\0\u0fdb\0\u1004\0\u030b\0\u102d\0\u1056\0\u107f\0\u030b"+
    "\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7"+
    "\0\u11f0\0\u030b\0\u1219\0\u030b\0\u1242\0\u126b\0\u1294\0\u12bd"+
    "\0\u030b\0\u030b\0\u12e6\0\u030b\0\u030b\0\u030b\0\u030b\0\u130f"+
    "\0\u1338\0\u030b\0\u1361\0\u030b\0\u030b\0\u138a\0\u13b3\0\u13dc"+
    "\0\u1405\0\u142e\0\u1457\0\u1480\0\u030b\0\u14a9\0\u14d2\0\u14fb"+
    "\0\u030b\0\u1524\0\u154d\0\u1576\0\u159f\0\u030b\0\u15c8\0\u15f1"+
    "\0\u161a\0\u1643\0\u030b\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710"+
    "\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858"+
    "\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u030b\0\u1925\0\u194e\0\u1977"+
    "\0\u19a0\0\u030b\0\u19c9\0\u0c03\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d"+
    "\0\u1a96\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5"+
    "\0\u030b\0\u1bde\0\u1c07\0\u1c30\0\u1c59\0\u030b\0\u1c82\0\u1cab"+
    "\0\u1cd4\0\u1cfd\0\u1d26\0\u1d4f\0\u030b\0\u1d78\0\u1da1\0\u1dca"+
    "\0\u030b\0\u1df3\0\u1e1c\0\u1e45\0\u030b\0\u1e6e\0\u030b\0\u030b"+
    "\0\u030b\0\u1e97\0\u1ec0\0\u1ee9\0\u030b\0\u030b\0\u1f12\0\u030b"+
    "\0\u030b\0\u030b\0\u1f3b\0\u1f64\0\u030b\0\u030b\0\u1f8d\0\u1fb6"+
    "\0\u1fdf\0\u030b\0\u2008\0\u2031\0\u205a\0\u2083\0\u20ac\0\u20d5"+
    "\0\u20fe\0\u2127\0\u2150\0\u2179\0\u21a2\0\u030b\0\u030b\0\u21cb"+
    "\0\u21f4\0\u221d\0\u1695\0\u2246\0\u226f\0\u19f2\0\u2298\0\u19f2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\1\2\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\4\1\13\1\14\1\15"+
    "\1\4\1\16\2\2\2\17\1\20\3\4\1\21\3\4"+
    "\1\22\1\23\1\4\1\24\1\25\1\26\1\27\1\30"+
    "\1\4\1\6\52\0\1\3\50\0\4\31\6\0\10\31"+
    "\1\32\1\0\16\31\3\0\2\31\1\0\5\33\1\34"+
    "\1\35\42\33\11\0\1\36\1\0\1\37\36\0\4\31"+
    "\6\0\5\31\1\40\1\31\1\41\1\32\1\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\6\31\1\42\1\31"+
    "\1\32\1\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\10\31\1\32\1\0\13\31\1\43\2\31\3\0\2\31"+
    "\2\0\4\31\6\0\3\31\1\44\1\31\1\45\2\31"+
    "\1\32\1\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\10\31\1\32\1\0\4\31\1\46\3\31\1\47\5\31"+
    "\3\0\2\31\2\0\4\31\6\0\6\31\1\50\1\31"+
    "\1\32\1\0\5\31\1\51\10\31\3\0\2\31\2\0"+
    "\4\31\6\0\7\31\1\52\1\32\1\0\13\31\1\53"+
    "\2\31\3\0\2\31\2\0\4\31\6\0\1\54\6\31"+
    "\1\55\1\32\1\0\2\31\1\56\1\57\1\31\1\60"+
    "\1\61\2\31\1\62\2\31\1\63\1\31\3\0\2\31"+
    "\2\0\4\31\6\0\3\31\1\64\4\31\1\32\1\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\10\31\1\32"+
    "\1\0\11\31\1\65\4\31\3\0\2\31\2\0\4\31"+
    "\6\0\7\31\1\66\1\32\1\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\10\31\1\32\1\0\12\31\1\67"+
    "\3\31\3\0\2\31\2\0\4\31\6\0\7\31\1\70"+
    "\1\32\1\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\10\31\2\0\16\31\3\0\2\31\12\0\1\71\37\0"+
    "\7\33\1\0\41\33\11\0\1\72\53\0\1\73\35\0"+
    "\4\31\6\0\1\74\7\31\2\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\10\31\2\0\6\31\1\75\7\31"+
    "\3\0\2\31\2\0\4\31\6\0\10\31\2\0\2\31"+
    "\1\76\2\31\1\77\10\31\3\0\2\31\2\0\4\31"+
    "\6\0\10\31\2\0\2\31\1\100\13\31\3\0\2\31"+
    "\2\0\4\31\6\0\6\31\1\101\1\31\2\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\6\31\1\102\1\31"+
    "\2\0\5\31\1\103\10\31\3\0\2\31\2\0\4\31"+
    "\6\0\7\31\1\104\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\10\31\2\0\2\31\1\105\13\31\3\0"+
    "\2\31\2\0\4\31\6\0\1\106\4\31\1\107\2\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\5\31\1\110\10\31\3\0\2\31\2\0\4\31"+
    "\6\0\5\31\1\111\2\31\2\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\10\31\2\0\14\31\1\112\1\31"+
    "\3\0\2\31\2\0\4\31\6\0\10\31\2\0\2\113"+
    "\14\31\3\0\2\31\2\0\4\31\6\0\1\114\7\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\5\31"+
    "\1\115\2\31\2\0\16\31\3\0\2\31\2\0\4\31"+
    "\6\0\1\31\1\116\6\31\2\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\10\31\2\0\2\117\14\31\3\0"+
    "\2\31\2\0\4\31\6\0\1\120\7\31\2\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\1\121\7\31\2\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\6\31\1\122"+
    "\1\31\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\10\31\2\0\11\31\1\123\4\31\3\0\2\31\2\0"+
    "\4\31\6\0\10\31\2\0\5\31\1\124\10\31\3\0"+
    "\2\31\1\0\6\125\1\126\1\0\14\125\2\126\23\125"+
    "\4\0\1\127\61\0\1\130\34\0\4\31\6\0\10\31"+
    "\2\0\11\31\1\131\4\31\3\0\2\31\2\0\4\31"+
    "\6\0\10\31\2\0\5\31\1\132\10\31\3\0\2\31"+
    "\2\0\4\31\6\0\7\31\1\133\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\7\31\1\134\2\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\5\31\1\135\2\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\10\31\1\136\5\31\3\0\2\31\2\0\3\31"+
    "\1\137\6\0\10\31\2\0\16\31\3\0\2\31\2\0"+
    "\2\31\1\140\1\31\6\0\10\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\10\31\2\0\15\31\1\141"+
    "\3\0\2\31\2\0\4\31\6\0\10\31\2\0\3\31"+
    "\1\142\12\31\3\0\2\31\2\0\4\31\6\0\3\31"+
    "\1\143\4\31\2\0\16\31\3\0\2\31\2\0\4\31"+
    "\6\0\6\31\1\144\1\31\2\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\1\145\7\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\6\31\1\146\1\31\2\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\7\31\1\147"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\2\150\14\31\3\0\2\31\2\0\4\31\6\0"+
    "\10\31\2\0\4\31\1\151\11\31\3\0\2\31\2\0"+
    "\4\31\6\0\10\31\2\0\2\31\1\152\13\31\3\0"+
    "\2\31\2\0\4\31\6\0\10\31\2\0\12\31\1\153"+
    "\3\31\3\0\2\31\2\0\4\31\6\0\3\31\1\154"+
    "\4\31\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\7\31\1\155\2\0\16\31\3\0\2\31\2\0\4\31"+
    "\6\0\1\31\1\156\6\31\2\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\10\31\2\0\13\31\1\157\2\31"+
    "\3\0\2\31\2\0\4\31\6\0\3\31\1\160\4\31"+
    "\2\0\16\31\3\0\2\31\1\0\10\125\1\0\1\125"+
    "\1\0\13\125\1\0\73\125\4\127\1\161\44\127\13\0"+
    "\1\162\36\0\4\31\6\0\10\31\2\0\5\31\1\163"+
    "\10\31\3\0\2\31\2\0\4\31\6\0\7\31\1\164"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\6\31\1\165\7\31\3\0\2\31\2\0\4\31"+
    "\6\0\10\31\2\0\2\31\1\166\13\31\3\0\2\31"+
    "\2\0\4\31\6\0\3\31\1\167\4\31\2\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\3\31\1\170\4\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\1\171"+
    "\1\172\1\31\1\173\1\174\1\175\2\31\2\0\2\176"+
    "\1\177\3\31\1\200\4\31\1\201\2\31\3\0\2\31"+
    "\2\0\4\31\6\0\1\202\7\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\1\31\1\203\6\31\2\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\3\31\1\204"+
    "\4\31\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\1\31\1\205\6\31\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\3\31\1\206\4\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\6\31\1\207\1\31\2\0"+
    "\16\31\3\0\2\31\2\0\2\31\1\210\1\31\6\0"+
    "\10\31\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\10\31\2\0\5\31\1\211\10\31\3\0\2\31\2\0"+
    "\4\31\6\0\10\31\2\0\16\31\3\0\1\31\1\212"+
    "\2\0\4\31\6\0\10\31\2\0\13\31\1\213\2\31"+
    "\3\0\2\31\2\0\4\31\6\0\6\31\1\214\1\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\5\31\1\215\10\31\3\0\2\31\2\0\4\31"+
    "\6\0\3\31\1\216\4\31\2\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\10\31\2\0\12\31\1\217\3\31"+
    "\3\0\2\31\1\0\4\127\1\161\4\127\1\220\37\127"+
    "\16\0\1\221\33\0\4\31\6\0\3\31\1\222\4\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\1\31"+
    "\1\223\6\31\2\0\16\31\3\0\2\31\2\0\4\31"+
    "\6\0\1\31\1\224\6\31\2\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\6\31\1\225\1\31\2\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\5\31\1\226\1\31"+
    "\1\227\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\6\31\1\230\1\31\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\10\31\2\0\13\31\1\231\2\31\3\0"+
    "\2\31\2\0\4\31\6\0\5\31\1\232\2\31\2\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\10\31\2\0"+
    "\4\31\1\233\11\31\3\0\2\31\2\0\4\31\6\0"+
    "\10\31\2\0\13\31\1\234\2\31\3\0\2\31\2\0"+
    "\4\31\6\0\1\235\6\31\1\236\2\0\2\31\1\237"+
    "\1\240\2\31\1\241\2\31\1\242\2\31\1\243\1\31"+
    "\3\0\2\31\2\0\4\31\6\0\3\31\1\244\4\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\7\31"+
    "\1\245\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\6\31\1\246\1\31\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\7\31\1\247\2\0\16\31\3\0\2\31"+
    "\2\0\3\31\1\250\6\0\10\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\1\31\1\251\6\31\2\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\1\252\7\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\3\31"+
    "\1\253\4\31\2\0\16\31\3\0\2\31\1\0\4\127"+
    "\1\161\4\127\1\254\37\127\3\255\1\256\13\255\1\257"+
    "\31\255\1\0\4\31\6\0\10\31\2\0\7\31\1\260"+
    "\6\31\3\0\2\31\2\0\4\31\6\0\1\261\7\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\6\31\1\262\7\31\3\0\2\31\2\0\4\31"+
    "\6\0\10\31\2\0\2\31\1\263\2\31\1\264\10\31"+
    "\3\0\2\31\2\0\4\31\6\0\10\31\2\0\2\31"+
    "\1\265\13\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\5\31\1\266\10\31\3\0\2\31\2\0\4\31"+
    "\6\0\7\31\1\267\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\5\31\1\270\2\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\10\31\2\0\14\31\1\271"+
    "\1\31\3\0\2\31\2\0\4\31\6\0\10\31\2\0"+
    "\2\272\14\31\3\0\2\31\2\0\4\31\6\0\1\273"+
    "\7\31\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\1\31\1\274\6\31\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\10\31\2\0\2\275\14\31\3\0\2\31"+
    "\2\0\4\31\6\0\1\276\7\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\6\31\1\277\1\31\2\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\10\31\2\0"+
    "\10\31\1\300\5\31\3\0\2\31\2\0\4\31\6\0"+
    "\4\31\1\301\3\31\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\10\31\2\0\12\31\1\302\3\31\3\0"+
    "\2\31\2\0\4\31\6\0\1\31\1\303\6\31\2\0"+
    "\16\31\3\0\2\31\1\0\4\127\1\161\5\127\1\304"+
    "\36\127\17\255\1\257\50\255\1\257\2\255\1\305\45\255"+
    "\1\257\1\306\30\255\1\0\4\31\6\0\7\31\1\307"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\11\31\1\310\4\31\3\0\2\31\2\0\4\31"+
    "\6\0\10\31\2\0\5\31\1\311\10\31\3\0\2\31"+
    "\2\0\4\31\6\0\7\31\1\312\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\7\31\1\313\2\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\5\31\1\314\2\31"+
    "\2\0\16\31\3\0\2\31\2\0\2\31\1\315\1\31"+
    "\6\0\10\31\2\0\16\31\3\0\2\31\2\0\4\31"+
    "\6\0\10\31\2\0\15\31\1\316\3\0\2\31\2\0"+
    "\4\31\6\0\6\31\1\317\1\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\7\31\1\320\2\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\10\31\2\0\2\321"+
    "\14\31\3\0\2\31\2\0\4\31\6\0\10\31\2\0"+
    "\4\31\1\322\11\31\3\0\2\31\2\0\4\31\6\0"+
    "\10\31\2\0\12\31\1\323\3\31\3\0\2\31\2\0"+
    "\4\31\6\0\3\31\1\324\4\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\1\31\1\325\6\31\2\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\3\31\1\326"+
    "\4\31\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\5\31\1\327\2\31\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\2\31\1\330\5\31\2\0\16\31\3\0"+
    "\2\31\1\0\17\305\1\331\31\305\17\255\1\257\1\255"+
    "\1\332\27\255\1\0\4\31\6\0\10\31\2\0\10\31"+
    "\1\333\5\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\5\31\1\334\10\31\3\0\2\31\2\0\4\31"+
    "\6\0\7\31\1\335\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\10\31\2\0\6\31\1\336\7\31\3\0"+
    "\2\31\2\0\4\31\6\0\10\31\2\0\2\31\1\337"+
    "\13\31\3\0\2\31\2\0\4\31\6\0\3\31\1\340"+
    "\4\31\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\1\341\7\31\2\0\16\31\3\0\2\31\2\0\4\31"+
    "\6\0\1\31\1\342\6\31\2\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\6\31\1\343\1\31\2\0\16\31"+
    "\3\0\2\31\2\0\2\31\1\344\1\31\6\0\10\31"+
    "\2\0\16\31\3\0\2\31\2\0\4\31\6\0\10\31"+
    "\2\0\5\31\1\345\10\31\3\0\2\31\2\0\4\31"+
    "\6\0\10\31\2\0\13\31\1\346\2\31\3\0\2\31"+
    "\2\0\4\31\6\0\6\31\1\347\1\31\2\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\10\31\2\0\5\31"+
    "\1\350\10\31\3\0\2\31\2\0\4\31\6\0\6\31"+
    "\1\351\1\31\2\0\16\31\3\0\2\31\2\0\4\31"+
    "\6\0\1\352\7\31\2\0\16\31\3\0\2\31\1\0"+
    "\17\305\1\331\1\353\30\305\4\255\1\354\12\255\1\257"+
    "\31\255\1\0\4\31\6\0\3\31\1\355\4\31\2\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\3\31\1\356"+
    "\4\31\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\1\31\1\357\6\31\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\1\31\1\360\6\31\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\6\31\1\361\1\31\2\0"+
    "\16\31\3\0\2\31\2\0\4\31\6\0\6\31\1\362"+
    "\1\31\2\0\16\31\3\0\2\31\2\0\4\31\6\0"+
    "\1\31\1\363\6\31\2\0\16\31\3\0\2\31\2\0"+
    "\4\31\6\0\1\364\7\31\2\0\16\31\3\0\2\31"+
    "\2\0\4\31\6\0\3\31\1\365\4\31\2\0\16\31"+
    "\3\0\2\31\2\0\4\31\6\0\3\31\1\366\4\31"+
    "\2\0\16\31\3\0\2\31\1\0\17\305\1\331\1\305"+
    "\1\367\27\305\13\255\1\370\3\255\1\257\31\255\1\0"+
    "\4\31\6\0\10\31\2\0\7\31\1\371\6\31\3\0"+
    "\2\31\2\0\4\31\6\0\10\31\2\0\12\31\1\372"+
    "\3\31\3\0\2\31\2\0\4\31\6\0\1\31\1\373"+
    "\6\31\2\0\16\31\3\0\2\31\1\0\4\305\1\374"+
    "\12\305\1\331\31\305\14\255\1\375\2\255\1\257\31\255"+
    "\1\0\4\31\6\0\7\31\1\376\2\0\16\31\3\0"+
    "\2\31\2\0\4\31\6\0\2\31\1\377\5\31\2\0"+
    "\16\31\3\0\2\31\1\0\13\305\1\u0100\3\305\1\331"+
    "\31\305\15\255\1\u0101\1\255\1\257\31\255\1\0\4\31"+
    "\6\0\10\31\2\0\10\31\1\u0102\5\31\3\0\2\31"+
    "\2\0\4\31\6\0\1\u0103\7\31\2\0\16\31\3\0"+
    "\2\31\1\0\14\305\1\u0104\2\305\1\331\31\305\13\255"+
    "\1\u0105\3\255\1\257\31\255\1\0\4\31\6\0\3\31"+
    "\1\u0106\4\31\2\0\16\31\3\0\2\31\2\0\4\31"+
    "\6\0\3\31\1\u0107\4\31\2\0\16\31\3\0\2\31"+
    "\1\0\15\305\1\u0108\1\305\1\331\31\305\16\255\1\u0109"+
    "\1\257\31\255\13\305\1\u010a\3\305\1\331\31\305\12\255"+
    "\1\u010b\4\255\1\257\31\255\16\305\1\u010c\1\331\34\305"+
    "\1\u010d\6\305\1\u010e\4\305\1\331\50\305\1\331\2\305"+
    "\1\u010f\40\305\1\u0110\4\305\1\331\31\305";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8897];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\14\1\3\11"+
    "\2\1\2\0\1\11\3\0\31\1\3\0\33\1\2\0"+
    "\30\1\2\0\35\1\2\0\32\1\4\0\25\1\2\0"+
    "\22\1\2\0\20\1\2\0\12\1\2\0\3\1\2\0"+
    "\2\1\2\0\2\1\2\0\2\1\3\0\1\1\2\0"+
    "\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //CODIGO DE USUARIO EN SINTAXIS JAVA
    public ArrayList<TError> LexError = new ArrayList<>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexCHTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexCHTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { /*System.out.println("Encontre:  opentag");*/ return new Symbol(Simbolos.opentag, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 34: 
          { /*System.out.println("Encontre:  fin-cb"); */return new Symbol(Simbolos.finCb, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 50: 
          { /*System.out.println("Encontre:  fin-titulo "+yytext());*/ return new Symbol(Simbolos.finTitulo, yycolumn, yyline, yytext());
          }
        case 63: break;
        case 10: 
          { /*System.out.println("Encontre cadena: "+yytext());*/ return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 6: 
          { /*System.out.println("Encontre:  closetag");*/ return new Symbol(Simbolos.closetag, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 11: 
          { /*System.out.println("Encontre:  id");*/ return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 30: 
          { /*System.out.println("Encontre:  titulo "+yytext());*/ return new Symbol(Simbolos.titulo, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 47: 
          { /*System.out.println("Encontre:  fin-panel"); */return new Symbol(Simbolos.finPanel, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 18: 
          { /*System.out.println("Encontre:  ccss");*/ return new Symbol(Simbolos.ccss, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 17: 
          { /*System.out.println("Encontre:  caja");*/ return new Symbol(Simbolos.caja, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 59: 
          { System.out.println("Encontre Token texto: "+yytext()); return new Symbol(Simbolos.tTexto, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 52: 
          { /*System.out.println("Encontre:  fin-opcion"); */return new Symbol(Simbolos.finOpcion, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 16: 
          { /*System.out.println("Encontre:  alto");*/ return new Symbol(Simbolos.alto, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 33: 
          { /*System.out.println("Encontre:  fin-ct");*/ return new Symbol(Simbolos.finCt, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 1: 
          { TError errorlex = new TError(yytext(),"Error Lexico","Caracter no Reconocido", yyline, yycolumn);
                                  LexError.add(errorlex);
          }
        case 75: break;
        case 60: 
          { System.out.println("Encontre Token Texto_A: "+yytext()); return new Symbol(Simbolos.tTexA, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 32: 
          { /*System.out.println("Encontre:  opcion"); */return new Symbol(Simbolos.opcion, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 43: 
          { /*System.out.println("Encontre:  fin-tabla");*/ return new Symbol(Simbolos.finTabla, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 51: 
          { /*System.out.println("Encontre:  fin-enlace");*/ return new Symbol(Simbolos.finEnlace, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 58: 
          { /*System.out.println("Encontre:  fin-caja_texto");*/ return new Symbol(Simbolos.finCaja_texto, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 38: 
          { /*System.out.println("Encontre:  spinner");*/ return new Symbol(Simbolos.spinner, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 23: 
          { /*System.out.println("Encontre:  ancho"); */return new Symbol(Simbolos.ancho, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 20: 
          { /*System.out.println("Encontre:  tabla");*/ return new Symbol(Simbolos.tabla, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 26: 
          { /*System.out.println("Encontre:  boton");*/ return new Symbol(Simbolos.boton, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 37: 
          { /*System.out.println("Encontre:  fin-cjs");*/ return new Symbol(Simbolos.finCjs, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 40: 
          { /*System.out.println("Encontre:  fin-caja");*/ return new Symbol(Simbolos.finCaja, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 35: 
          { /*System.out.println("Encontre:  imagen");*/ return new Symbol(Simbolos.imagen, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 3: 
          { /*System.out.println("Encontre Token titulo: "+yytext());*/ return new Symbol(Simbolos.palabra, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 56: 
          { /*System.out.println("Encontre:  fin-spinner");*/ return new Symbol(Simbolos.finSpinner, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 48: 
          { /*System.out.println("Encontre:  salto-fin");*/ return new Symbol(Simbolos.saltoFin, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 31: 
          { /*System.out.println("Encontre:  enlace");*/ return new Symbol(Simbolos.enlace, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 9: 
          { /*System.out.println("Encontre:  coma");*/ return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 4: 
          { /*System.out.println("Encontre delimitador: "+yytext()); return new Symbol(Simbolos.delim, yycolumn, yyline, yytext());*/
          }
        case 93: break;
        case 44: 
          { /*System.out.println("Encontre:  fin-fil_t");*/ return new Symbol(Simbolos.finFil_t, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 12: 
          { /*System.out.println("Encontre:  ct");*/ return new Symbol(Simbolos.ct, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 25: 
          { /*System.out.println("Encontre:  click");*/ return new Symbol(Simbolos.click, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 24: 
          { /*System.out.println("Encontre:  chtml "+yytext());*/ return new Symbol(Simbolos.chtml, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 54: 
          { /*System.out.println("Encontre:  fin-cuerpo "+yytext());*/ return new Symbol(Simbolos.finCuerpo, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 49: 
          { /*System.out.println("Encontre:  encabezado "+yytext());*/ return new Symbol(Simbolos.encabezado, yycolumn, yyline, yytext());
          }
        case 99: break;
        case 29: 
          { /*System.out.println("Encontre:  fondo");*/ return new Symbol(Simbolos.valor, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 57: 
          { /*System.out.println("Encontre:  fin-encabezado "+yytext());*/ return new Symbol(Simbolos.finEncabezado, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 28: 
          { /*System.out.println("Encontre:  grupo");*/ return new Symbol(Simbolos.grupo, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 15: 
          { System.out.println("Encontre Token PATH: "+yytext()); return new Symbol(Simbolos.path, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 53: 
          { /*System.out.println("Encontre:  fin-imagen");*/ return new Symbol(Simbolos.finImagen, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 45: 
          { /*System.out.println("Encontre:  fin-chtml "+yytext());*/ return new Symbol(Simbolos.finChtml, yycolumn, yyline, yytext());
          }
        case 105: break;
        case 55: 
          { /*System.out.println("Encontre:  caja_texto");*/ return new Symbol(Simbolos.caja_texto, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 21: 
          { /*System.out.println("Encontre:  fondo");*/ return new Symbol(Simbolos.fondo, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 36: 
          { /*System.out.println("Encontre:  cuerpo "+yytext());*/ return new Symbol(Simbolos.cuerpo, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 19: 
          { /*System.out.println("Encontre:  ruta");*/ return new Symbol(Simbolos.ruta, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 46: 
          { /*System.out.println("Encontre:  fin-boton");*/ return new Symbol(Simbolos.finBoton, yycolumn, yyline, yytext());
          }
        case 110: break;
        case 41: 
          { /*System.out.println("Encontre:  fin-ccss");*/ return new Symbol(Simbolos.finCcss, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 2: 
          { /*System.out.println("Encontre cadena: "+yytext());*/ return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 42: 
          { /*System.out.println("Encontre:  alineado");*/ return new Symbol(Simbolos.alineado, yycolumn, yyline, yytext());
          }
        case 113: break;
        case 8: 
          { /*System.out.println("Encontre:  pcoma");*/ return new Symbol(Simbolos.pcoma, yycolumn, yyline, yytext());
          }
        case 114: break;
        case 7: 
          { /*System.out.println("Encontre:  igual");*/ return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 39: 
          { /*System.out.println("Encontre comentario: "+yytext());*/ /*return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());*/
          }
        case 116: break;
        case 27: 
          { /*System.out.println("Encontre:  panel");*/ return new Symbol(Simbolos.panel, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 14: 
          { /*System.out.println("Encontre:  cjs");*/ return new Symbol(Simbolos.cjs, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 22: 
          { /*System.out.println("Encontre:  fil_t");*/ return new Symbol(Simbolos.fil_t, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 13: 
          { /*System.out.println("Encontre:  cb"); */return new Symbol(Simbolos.cb, yycolumn, yyline, yytext());
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
