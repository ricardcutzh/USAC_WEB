
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 07 02:02:19 CST 2018
//----------------------------------------------------

package CHTML;

import java_cup.runtime.Symbol;
import AST.*;
import java.util.ArrayList;
import CHTML.Auxiliares.*;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 07 02:02:19 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\004\000\002\043\002\000\002\002" +
    "\013\000\002\002\005\000\002\003\011\000\002\003\010" +
    "\000\002\003\005\000\002\004\012\000\002\004\011\000" +
    "\002\004\005\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\011\000\002\007\005\000\002\011\011" +
    "\000\002\011\005\000\002\012\011\000\002\012\012\000" +
    "\002\012\005\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\014\011\000\002\014\010\000\002\014\012\000" +
    "\002\014\011\000\002\021\010\000\002\021\011\000\002" +
    "\021\011\000\002\021\012\000\002\021\005\000\002\022" +
    "\010\000\002\022\011\000\002\022\011\000\002\022\012" +
    "\000\002\022\012\000\002\022\011\000\002\022\005\000" +
    "\002\023\011\000\002\023\012\000\002\024\010\000\002" +
    "\024\011\000\002\024\011\000\002\024\012\000\002\024" +
    "\005\000\002\025\010\000\002\025\011\000\002\025\011" +
    "\000\002\025\012\000\002\025\005\000\002\026\010\000" +
    "\002\026\012\000\002\026\011\000\002\026\011\000\002" +
    "\026\012\000\002\026\011\000\002\026\012\000\002\026" +
    "\011\000\002\026\012\000\002\026\011\000\002\026\005" +
    "\000\002\027\010\000\002\027\011\000\002\027\012\000" +
    "\002\027\011\000\002\027\012\000\002\027\011\000\002" +
    "\027\012\000\002\027\011\000\002\027\012\000\002\027" +
    "\011\000\002\027\005\000\002\030\004\000\002\030\004" +
    "\000\002\030\003\000\002\030\003\000\002\031\004\000" +
    "\002\031\003\000\002\032\010\000\002\032\011\000\002" +
    "\032\011\000\002\032\012\000\002\032\005\000\002\033" +
    "\010\000\002\033\011\000\002\033\011\000\002\033\012" +
    "\000\002\033\005\000\002\034\010\000\002\034\011\000" +
    "\002\034\011\000\002\034\012\000\002\034\005\000\002" +
    "\035\004\000\002\035\003\000\002\036\010\000\002\036" +
    "\011\000\002\036\011\000\002\036\012\000\002\036\012" +
    "\000\002\036\011\000\002\036\005\000\002\037\005\000" +
    "\002\037\005\000\002\040\005\000\002\040\006\000\002" +
    "\041\005\000\002\041\006\000\002\005\006\000\002\005" +
    "\002\000\002\005\004\000\002\010\006\000\002\015\006" +
    "\000\002\015\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\003\000\002\020\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\006\003\004\004\000\001\002\000\004\014" +
    "\u01d6\001\002\000\004\004\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\013\011\001" +
    "\002\000\004\005\012\001\002\000\006\003\013\004\015" +
    "\001\002\000\004\016\u01d4\001\002\000\006\003\151\004" +
    "\152\001\002\000\004\015\016\001\002\000\004\005\017" +
    "\001\002\000\006\003\021\004\024\001\002\000\006\003" +
    "\ufff2\004\ufff2\001\002\000\010\023\144\025\145\027\143" +
    "\001\002\000\006\003\ufff4\004\ufff4\001\002\000\006\003" +
    "\021\004\137\001\002\000\012\016\030\022\031\024\027" +
    "\026\026\001\002\000\006\003\ufff3\004\ufff3\001\002\000" +
    "\026\003\061\005\057\042\033\044\063\045\052\046\064" +
    "\047\065\050\055\051\062\076\054\001\002\000\004\042" +
    "\033\001\002\000\004\005\043\001\002\000\004\042\033" +
    "\001\002\000\004\005\037\001\002\000\004\006\034\001" +
    "\002\000\004\011\035\001\002\000\004\007\036\001\002" +
    "\000\032\003\uff7b\005\uff7b\040\uff7b\042\uff7b\044\uff7b\045" +
    "\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\076\uff7b\101\uff7b" +
    "\001\002\000\004\004\040\001\002\000\004\023\041\001" +
    "\002\000\004\005\042\001\002\000\006\003\ufff1\004\ufff1" +
    "\001\002\000\006\003\ufffc\004\ufffc\001\002\000\004\005" +
    "\045\001\002\000\004\004\046\001\002\000\004\025\047" +
    "\001\002\000\004\005\050\001\002\000\006\003\uffef\004" +
    "\uffef\001\002\000\032\003\uff75\005\uff75\040\uff75\042\uff75" +
    "\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\076" +
    "\uff75\101\uff75\001\002\000\004\006\uff73\001\002\000\032" +
    "\003\uff76\005\uff76\040\uff76\042\uff76\044\uff76\045\uff76\046" +
    "\uff76\047\uff76\050\uff76\051\uff76\076\uff76\101\uff76\001\002" +
    "\000\004\006\uff6e\001\002\000\004\006\uff70\001\002\000" +
    "\004\006\132\001\002\000\050\013\105\015\113\017\074" +
    "\021\107\022\100\024\075\026\102\030\103\032\106\034" +
    "\104\042\073\043\112\053\110\055\115\057\076\072\101" +
    "\074\116\077\114\100\072\001\002\000\026\003\061\005" +
    "\071\042\033\044\063\045\052\046\064\047\065\050\055" +
    "\051\062\076\054\001\002\000\004\007\066\001\002\000" +
    "\004\006\uff6f\001\002\000\004\006\uff74\001\002\000\004" +
    "\006\uff72\001\002\000\004\006\uff71\001\002\000\032\003" +
    "\uff79\005\uff79\040\uff79\042\uff79\044\uff79\045\uff79\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\076\uff79\101\uff79\001\002\000" +
    "\032\003\uff77\005\uff77\040\uff77\042\uff77\044\uff77\045\uff77" +
    "\046\uff77\047\uff77\050\uff77\051\uff77\076\uff77\101\uff77\001" +
    "\002\000\032\003\uff78\005\uff78\040\uff78\042\uff78\044\uff78" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\076\uff78\101" +
    "\uff78\001\002\000\050\013\105\015\113\017\074\021\107" +
    "\022\100\024\075\026\102\030\103\032\106\034\104\042" +
    "\073\043\112\053\110\055\115\057\076\072\101\074\116" +
    "\077\114\100\072\001\002\000\052\004\uff57\013\uff57\015" +
    "\uff57\017\uff57\021\uff57\022\uff57\024\uff57\026\uff57\030\uff57" +
    "\032\uff57\034\uff57\042\uff57\043\uff57\053\uff57\055\uff57\057" +
    "\uff57\072\uff57\074\uff57\077\uff57\100\uff57\001\002\000\052" +
    "\004\uff56\013\uff56\015\uff56\017\uff56\021\uff56\022\uff56\024" +
    "\uff56\026\uff56\030\uff56\032\uff56\034\uff56\042\uff56\043\uff56" +
    "\053\uff56\055\uff56\057\uff56\072\uff56\074\uff56\077\uff56\100" +
    "\uff56\001\002\000\052\004\uff63\013\uff63\015\uff63\017\uff63" +
    "\021\uff63\022\uff63\024\uff63\026\uff63\030\uff63\032\uff63\034" +
    "\uff63\042\uff63\043\uff63\053\uff63\055\uff63\057\uff63\072\uff63" +
    "\074\uff63\077\uff63\100\uff63\001\002\000\052\004\uff61\013" +
    "\uff61\015\uff61\017\uff61\021\uff61\022\uff61\024\uff61\026\uff61" +
    "\030\uff61\032\uff61\034\uff61\042\uff61\043\uff61\053\uff61\055" +
    "\uff61\057\uff61\072\uff61\074\uff61\077\uff61\100\uff61\001\002" +
    "\000\052\004\uff58\013\uff58\015\uff58\017\uff58\021\uff58\022" +
    "\uff58\024\uff58\026\uff58\030\uff58\032\uff58\034\uff58\042\uff58" +
    "\043\uff58\053\uff58\055\uff58\057\uff58\072\uff58\074\uff58\077" +
    "\uff58\100\uff58\001\002\000\052\004\uff66\013\uff66\015\uff66" +
    "\017\uff66\021\uff66\022\uff66\024\uff66\026\uff66\030\uff66\032" +
    "\uff66\034\uff66\042\uff66\043\uff66\053\uff66\055\uff66\057\uff66" +
    "\072\uff66\074\uff66\077\uff66\100\uff66\001\002\000\052\004" +
    "\uff62\013\uff62\015\uff62\017\uff62\021\uff62\022\uff62\024\uff62" +
    "\026\uff62\030\uff62\032\uff62\034\uff62\042\uff62\043\uff62\053" +
    "\uff62\055\uff62\057\uff62\072\uff62\074\uff62\077\uff62\100\uff62" +
    "\001\002\000\052\004\uff5a\013\uff5a\015\uff5a\017\uff5a\021" +
    "\uff5a\022\uff5a\024\uff5a\026\uff5a\030\uff5a\032\uff5a\034\uff5a" +
    "\042\uff5a\043\uff5a\053\uff5a\055\uff5a\057\uff5a\072\uff5a\074" +
    "\uff5a\077\uff5a\100\uff5a\001\002\000\052\004\uff60\013\uff60" +
    "\015\uff60\017\uff60\021\uff60\022\uff60\024\uff60\026\uff60\030" +
    "\uff60\032\uff60\034\uff60\042\uff60\043\uff60\053\uff60\055\uff60" +
    "\057\uff60\072\uff60\074\uff60\077\uff60\100\uff60\001\002\000" +
    "\052\004\uff5f\013\uff5f\015\uff5f\017\uff5f\021\uff5f\022\uff5f" +
    "\024\uff5f\026\uff5f\030\uff5f\032\uff5f\034\uff5f\042\uff5f\043" +
    "\uff5f\053\uff5f\055\uff5f\057\uff5f\072\uff5f\074\uff5f\077\uff5f" +
    "\100\uff5f\001\002\000\052\004\uff5c\013\uff5c\015\uff5c\017" +
    "\uff5c\021\uff5c\022\uff5c\024\uff5c\026\uff5c\030\uff5c\032\uff5c" +
    "\034\uff5c\042\uff5c\043\uff5c\053\uff5c\055\uff5c\057\uff5c\072" +
    "\uff5c\074\uff5c\077\uff5c\100\uff5c\001\002\000\052\004\uff65" +
    "\013\uff65\015\uff65\017\uff65\021\uff65\022\uff65\024\uff65\026" +
    "\uff65\030\uff65\032\uff65\034\uff65\042\uff65\043\uff65\053\uff65" +
    "\055\uff65\057\uff65\072\uff65\074\uff65\077\uff65\100\uff65\001" +
    "\002\000\052\004\uff5e\013\uff5e\015\uff5e\017\uff5e\021\uff5e" +
    "\022\uff5e\024\uff5e\026\uff5e\030\uff5e\032\uff5e\034\uff5e\042" +
    "\uff5e\043\uff5e\053\uff5e\055\uff5e\057\uff5e\072\uff5e\074\uff5e" +
    "\077\uff5e\100\uff5e\001\002\000\052\004\uff67\013\uff67\015" +
    "\uff67\017\uff67\021\uff67\022\uff67\024\uff67\026\uff67\030\uff67" +
    "\032\uff67\034\uff67\042\uff67\043\uff67\053\uff67\055\uff67\057" +
    "\uff67\072\uff67\074\uff67\077\uff67\100\uff67\001\002\000\052" +
    "\004\uff5d\013\uff5d\015\uff5d\017\uff5d\021\uff5d\022\uff5d\024" +
    "\uff5d\026\uff5d\030\uff5d\032\uff5d\034\uff5d\042\uff5d\043\uff5d" +
    "\053\uff5d\055\uff5d\057\uff5d\072\uff5d\074\uff5d\077\uff5d\100" +
    "\uff5d\001\002\000\052\004\117\013\105\015\113\017\074" +
    "\021\121\022\100\024\075\026\102\030\103\032\106\034" +
    "\104\042\073\043\122\053\110\055\115\057\076\072\101" +
    "\074\116\077\123\100\072\001\002\000\052\004\uff68\013" +
    "\uff68\015\uff68\017\uff68\021\uff68\022\uff68\024\uff68\026\uff68" +
    "\030\uff68\032\uff68\034\uff68\042\uff68\043\uff68\053\uff68\055" +
    "\uff68\057\uff68\072\uff68\074\uff68\077\uff68\100\uff68\001\002" +
    "\000\052\004\uff64\013\uff64\015\uff64\017\uff64\021\uff64\022" +
    "\uff64\024\uff64\026\uff64\030\uff64\032\uff64\034\uff64\042\uff64" +
    "\043\uff64\053\uff64\055\uff64\057\uff64\072\uff64\074\uff64\077" +
    "\uff64\100\uff64\001\002\000\052\004\uff69\013\uff69\015\uff69" +
    "\017\uff69\021\uff69\022\uff69\024\uff69\026\uff69\030\uff69\032" +
    "\uff69\034\uff69\042\uff69\043\uff69\053\uff69\055\uff69\057\uff69" +
    "\072\uff69\074\uff69\077\uff69\100\uff69\001\002\000\052\004" +
    "\uff5b\013\uff5b\015\uff5b\017\uff5b\021\uff5b\022\uff5b\024\uff5b" +
    "\026\uff5b\030\uff5b\032\uff5b\034\uff5b\042\uff5b\043\uff5b\053" +
    "\uff5b\055\uff5b\057\uff5b\072\uff5b\074\uff5b\077\uff5b\100\uff5b" +
    "\001\002\000\052\004\uff59\013\uff59\015\uff59\017\uff59\021" +
    "\uff59\022\uff59\024\uff59\026\uff59\030\uff59\032\uff59\034\uff59" +
    "\042\uff59\043\uff59\053\uff59\055\uff59\057\uff59\072\uff59\074" +
    "\uff59\077\uff59\100\uff59\001\002\000\004\027\124\001\002" +
    "\000\052\004\uff6a\013\uff6a\015\uff6a\017\uff6a\021\uff6a\022" +
    "\uff6a\024\uff6a\026\uff6a\030\uff6a\032\uff6a\034\uff6a\042\uff6a" +
    "\043\uff6a\053\uff6a\055\uff6a\057\uff6a\072\uff6a\074\uff6a\077" +
    "\uff6a\100\uff6a\001\002\000\052\004\uff6b\013\uff6b\015\uff6b" +
    "\017\uff6b\021\uff6b\022\uff6b\024\uff6b\026\uff6b\030\uff6b\032" +
    "\uff6b\034\uff6b\042\uff6b\043\uff6b\053\uff6b\055\uff6b\057\uff6b" +
    "\072\uff6b\074\uff6b\077\uff6b\100\uff6b\001\002\000\052\004" +
    "\uff6d\013\uff6d\015\uff6d\017\uff6d\021\uff6d\022\uff6d\024\uff6d" +
    "\026\uff6d\030\uff6d\032\uff6d\034\uff6d\042\uff6d\043\uff6d\053" +
    "\uff6d\055\uff6d\057\uff6d\072\uff6d\074\uff6d\077\uff6d\100\uff6d" +
    "\001\002\000\052\004\uff6c\013\uff6c\015\uff6c\017\uff6c\021" +
    "\uff6c\022\uff6c\024\uff6c\026\uff6c\030\uff6c\032\uff6c\034\uff6c" +
    "\042\uff6c\043\uff6c\053\uff6c\055\uff6c\057\uff6c\072\uff6c\074" +
    "\uff6c\077\uff6c\100\uff6c\001\002\000\004\005\125\001\002" +
    "\000\006\003\uffec\004\uffec\001\002\000\052\004\127\013" +
    "\105\015\113\017\074\021\121\022\100\024\075\026\102" +
    "\030\103\032\106\034\104\042\073\043\122\053\110\055" +
    "\115\057\076\072\101\074\116\077\123\100\072\001\002" +
    "\000\004\027\130\001\002\000\004\005\131\001\002\000" +
    "\006\003\uffed\004\uffed\001\002\000\004\011\133\001\002" +
    "\000\004\007\134\001\002\000\032\003\uff7a\005\uff7a\040" +
    "\uff7a\042\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a" +
    "\051\uff7a\076\uff7a\101\uff7a\001\002\000\006\003\ufff7\004" +
    "\ufff7\001\002\000\006\003\ufff6\004\ufff6\001\002\000\012" +
    "\016\141\022\031\024\027\026\026\001\002\000\006\003" +
    "\ufff5\004\ufff5\001\002\000\004\005\142\001\002\000\006" +
    "\003\ufffd\004\ufffd\001\002\000\004\005\150\001\002\000" +
    "\004\005\147\001\002\000\004\005\146\001\002\000\006" +
    "\003\uffee\004\uffee\001\002\000\006\003\ufff0\004\ufff0\001" +
    "\002\000\006\003\uffeb\004\uffeb\001\002\000\004\020\u01d2" +
    "\001\002\000\004\017\157\001\002\000\004\004\154\001" +
    "\002\000\004\014\155\001\002\000\004\005\156\001\002" +
    "\000\004\002\uffff\001\002\000\010\003\160\005\uff7d\041" +
    "\161\001\002\000\004\007\u01d1\001\002\000\004\006\u01ce" +
    "\001\002\000\004\005\163\001\002\000\006\003\175\004" +
    "\166\001\002\000\006\003\uffd7\004\uffd7\001\002\000\006" +
    "\003\uffde\004\uffde\001\002\000\032\020\u01cc\030\234\032" +
    "\247\034\242\036\244\037\235\053\240\055\236\057\246" +
    "\070\243\072\237\100\241\001\002\000\006\003\uffda\004" +
    "\uffda\001\002\000\006\003\uffd6\004\uffd6\001\002\000\006" +
    "\003\uffdd\004\uffdd\001\002\000\006\003\uffdb\004\uffdb\001" +
    "\002\000\006\003\175\004\222\001\002\000\006\003\uffdf" +
    "\004\uffdf\001\002\000\020\033\204\036\210\054\203\056" +
    "\202\060\207\071\206\073\205\001\002\000\006\003\uffd9" +
    "\004\uffd9\001\002\000\006\003\uffd5\004\uffd5\001\002\000" +
    "\006\003\uffd8\004\uffd8\001\002\000\006\003\uffdc\004\uffdc" +
    "\001\002\000\004\005\217\001\002\000\004\005\216\001" +
    "\002\000\004\005\215\001\002\000\004\005\214\001\002" +
    "\000\004\005\213\001\002\000\004\005\212\001\002\000" +
    "\004\005\211\001\002\000\006\003\uff83\004\uff83\001\002" +
    "\000\006\003\uff85\004\uff85\001\002\000\006\003\uff98\004" +
    "\uff98\001\002\000\006\003\uff93\004\uff93\001\002\000\006" +
    "\003\uffcc\004\uffcc\001\002\000\006\003\uffc5\004\uffc5\001" +
    "\002\000\006\003\uffbe\004\uffbe\001\002\000\006\003\uffe7" +
    "\004\uffe7\001\002\000\006\003\uffe2\004\uffe2\001\002\000" +
    "\032\020\245\030\234\032\247\034\242\036\244\037\235" +
    "\053\240\055\236\057\246\070\243\072\237\100\241\001" +
    "\002\000\006\003\uffe9\004\uffe9\001\002\000\006\003\uffe6" +
    "\004\uffe6\001\002\000\006\003\uffe1\004\uffe1\001\002\000" +
    "\006\003\uffe4\004\uffe4\001\002\000\006\003\uffe0\004\uffe0" +
    "\001\002\000\006\003\uffea\004\uffea\001\002\000\006\003" +
    "\uffe5\004\uffe5\001\002\000\006\003\uffe8\004\uffe8\001\002" +
    "\000\006\003\uffe3\004\uffe3\001\002\000\026\003\061\005" +
    "\u01bb\042\033\044\063\045\052\046\064\047\065\050\055" +
    "\051\062\076\054\001\002\000\026\003\061\040\u01b8\042" +
    "\033\044\063\045\052\046\064\047\065\050\055\051\062" +
    "\076\054\001\002\000\026\003\061\005\u0132\042\033\044" +
    "\063\045\052\046\064\047\065\050\055\051\062\076\054" +
    "\001\002\000\026\003\061\005\u010a\042\033\044\063\045" +
    "\052\046\064\047\065\050\055\051\062\076\054\001\002" +
    "\000\026\003\061\005\361\042\033\044\063\045\052\046" +
    "\064\047\065\050\055\051\062\076\054\001\002\000\026" +
    "\003\061\042\033\044\063\045\052\046\064\047\065\050" +
    "\055\051\062\076\054\101\356\001\002\000\024\003\061" +
    "\042\033\044\063\045\052\046\064\047\065\050\055\051" +
    "\062\076\054\001\002\000\026\003\061\005\324\042\033" +
    "\044\063\045\052\046\064\047\065\050\055\051\062\076" +
    "\054\001\002\000\004\005\323\001\002\000\004\005\322" +
    "\001\002\000\026\003\061\005\271\042\033\044\063\045" +
    "\052\046\064\047\065\050\055\051\062\076\054\001\002" +
    "\000\026\003\061\005\250\042\033\044\063\045\052\046" +
    "\064\047\065\050\055\051\062\076\054\001\002\000\006" +
    "\004\262\052\263\001\002\000\026\003\061\005\252\042" +
    "\033\044\063\045\052\046\064\047\065\050\055\051\062" +
    "\076\054\001\002\000\006\004\253\052\254\001\002\000" +
    "\004\033\260\001\002\000\004\004\255\001\002\000\004" +
    "\033\256\001\002\000\004\005\257\001\002\000\006\003" +
    "\uffcd\004\uffcd\001\002\000\004\005\261\001\002\000\006" +
    "\003\uffce\004\uffce\001\002\000\004\033\267\001\002\000" +
    "\004\004\264\001\002\000\004\033\265\001\002\000\004" +
    "\005\266\001\002\000\006\003\uffcf\004\uffcf\001\002\000" +
    "\004\005\270\001\002\000\006\003\uffd0\004\uffd0\001\002" +
    "\000\052\004\307\013\105\015\113\017\074\021\107\022" +
    "\100\024\075\026\102\030\103\032\106\034\104\042\073" +
    "\043\112\053\110\055\115\057\076\072\101\074\116\077" +
    "\311\100\072\001\002\000\026\003\061\005\273\042\033" +
    "\044\063\045\052\046\064\047\065\050\055\051\062\076" +
    "\054\001\002\000\052\004\274\013\105\015\113\017\074" +
    "\021\107\022\100\024\075\026\102\030\103\032\106\034" +
    "\104\042\073\043\112\053\110\055\115\057\076\072\101" +
    "\074\116\077\276\100\072\001\002\000\004\060\305\001" +
    "\002\000\052\004\302\013\105\015\113\017\074\021\121" +
    "\022\100\024\075\026\102\030\103\032\106\034\104\042" +
    "\073\043\122\053\110\055\115\057\076\072\101\074\116" +
    "\077\123\100\072\001\002\000\052\004\277\013\uff69\015" +
    "\uff69\017\uff69\021\uff69\022\uff69\024\uff69\026\uff69\030\uff69" +
    "\032\uff69\034\uff69\042\uff69\043\uff69\053\uff69\055\uff69\057" +
    "\uff69\072\uff69\074\uff69\077\uff69\100\uff69\001\002\000\004" +
    "\060\300\001\002\000\004\005\301\001\002\000\006\003" +
    "\uff88\004\uff88\001\002\000\004\060\303\001\002\000\004" +
    "\005\304\001\002\000\006\003\uff87\004\uff87\001\002\000" +
    "\004\005\306\001\002\000\006\003\uff8a\004\uff8a\001\002" +
    "\000\004\060\320\001\002\000\052\004\315\013\105\015" +
    "\113\017\074\021\121\022\100\024\075\026\102\030\103" +
    "\032\106\034\104\042\073\043\122\053\110\055\115\057" +
    "\076\072\101\074\116\077\123\100\072\001\002\000\052" +
    "\004\312\013\uff69\015\uff69\017\uff69\021\uff69\022\uff69\024" +
    "\uff69\026\uff69\030\uff69\032\uff69\034\uff69\042\uff69\043\uff69" +
    "\053\uff69\055\uff69\057\uff69\072\uff69\074\uff69\077\uff69\100" +
    "\uff69\001\002\000\004\060\313\001\002\000\004\005\314" +
    "\001\002\000\006\003\uff89\004\uff89\001\002\000\004\060" +
    "\316\001\002\000\004\005\317\001\002\000\006\003\uff86" +
    "\004\uff86\001\002\000\004\005\321\001\002\000\006\003" +
    "\uff8b\004\uff8b\001\002\000\004\004\ufffa\001\002\000\006" +
    "\003\uff84\004\uff84\001\002\000\052\004\336\013\105\015" +
    "\113\017\074\021\107\022\100\024\075\026\102\030\103" +
    "\032\106\034\104\042\073\043\112\053\110\055\115\057" +
    "\076\072\101\074\116\077\114\100\072\001\002\000\026" +
    "\003\061\005\326\042\033\044\063\045\052\046\064\047" +
    "\065\050\055\051\062\076\054\001\002\000\052\004\327" +
    "\013\105\015\113\017\074\021\107\022\100\024\075\026" +
    "\102\030\103\032\106\034\104\042\073\043\112\053\110" +
    "\055\115\057\076\072\101\074\116\077\114\100\072\001" +
    "\002\000\004\071\334\001\002\000\052\004\331\013\105" +
    "\015\113\017\074\021\121\022\100\024\075\026\102\030" +
    "\103\032\106\034\104\042\073\043\122\053\110\055\115" +
    "\057\076\072\101\074\116\077\123\100\072\001\002\000" +
    "\004\071\332\001\002\000\004\005\333\001\002\000\006" +
    "\003\uff99\004\uff99\001\002\000\004\005\335\001\002\000" +
    "\006\003\uff9b\004\uff9b\001\002\000\004\071\343\001\002" +
    "\000\052\004\340\013\105\015\113\017\074\021\121\022" +
    "\100\024\075\026\102\030\103\032\106\034\104\042\073" +
    "\043\122\053\110\055\115\057\076\072\101\074\116\077" +
    "\123\100\072\001\002\000\004\071\341\001\002\000\004" +
    "\005\342\001\002\000\006\003\uff9a\004\uff9a\001\002\000" +
    "\004\005\344\001\002\000\006\003\uff9c\004\uff9c\001\002" +
    "\000\026\003\061\005\346\042\033\044\063\045\052\046" +
    "\064\047\065\050\055\051\062\076\054\001\002\000\052" +
    "\004\347\013\105\015\113\017\074\021\107\022\100\024" +
    "\075\026\102\030\103\032\106\034\104\042\073\043\112" +
    "\053\110\055\115\057\076\072\101\074\116\077\114\100" +
    "\072\001\002\000\004\035\354\001\002\000\052\004\351" +
    "\013\105\015\113\017\074\021\121\022\100\024\075\026" +
    "\102\030\103\032\106\034\104\042\073\043\122\053\110" +
    "\055\115\057\076\072\101\074\116\077\123\100\072\001" +
    "\002\000\004\035\352\001\002\000\004\005\353\001\002" +
    "\000\006\003\uffc3\004\uffc3\001\002\000\004\005\355\001" +
    "\002\000\006\003\uffc4\004\uffc4\001\002\000\006\003\uff82" +
    "\004\uff82\001\002\000\026\003\061\042\033\044\063\045" +
    "\052\046\064\047\065\050\055\051\062\076\054\101\360" +
    "\001\002\000\006\003\uff81\004\uff81\001\002\000\052\004" +
    "\377\013\105\015\113\017\074\021\107\022\100\024\075" +
    "\026\102\030\103\032\106\034\104\042\073\043\112\053" +
    "\110\055\115\057\076\072\101\074\116\077\114\100\072" +
    "\001\002\000\026\003\061\005\363\042\033\044\063\045" +
    "\052\046\064\047\065\050\055\051\062\076\054\001\002" +
    "\000\052\004\364\013\105\015\113\017\074\021\107\022" +
    "\100\024\075\026\102\030\103\032\106\034\104\042\073" +
    "\043\112\053\110\055\115\057\076\072\101\074\116\077" +
    "\114\100\072\001\002\000\006\054\375\100\241\001\002" +
    "\000\052\004\372\013\105\015\113\017\074\021\121\022" +
    "\100\024\075\026\102\030\103\032\106\034\104\042\073" +
    "\043\122\053\110\055\115\057\076\072\101\074\116\077" +
    "\123\100\072\001\002\000\004\004\367\001\002\000\004" +
    "\054\370\001\002\000\004\005\371\001\002\000\006\003" +
    "\uffc7\004\uffc7\001\002\000\004\054\373\001\002\000\004" +
    "\005\374\001\002\000\006\003\uffc8\004\uffc8\001\002\000" +
    "\004\005\376\001\002\000\006\003\uffca\004\uffca\001\002" +
    "\000\006\054\u0108\100\241\001\002\000\052\004\u0105\013" +
    "\105\015\113\017\074\021\121\022\100\024\075\026\102" +
    "\030\103\032\106\034\104\042\073\043\122\053\110\055" +
    "\115\057\076\072\101\074\116\077\123\100\072\001\002" +
    "\000\004\004\u0102\001\002\000\004\054\u0103\001\002\000" +
    "\004\005\u0104\001\002\000\006\003\uffc6\004\uffc6\001\002" +
    "\000\004\054\u0106\001\002\000\004\005\u0107\001\002\000" +
    "\006\003\uffc9\004\uffc9\001\002\000\004\005\u0109\001\002" +
    "\000\006\003\uffcb\004\uffcb\001\002\000\006\003\u010e\004" +
    "\u012c\001\002\000\026\003\061\005\u010c\042\033\044\063" +
    "\045\052\046\064\047\065\050\055\051\062\076\054\001" +
    "\002\000\006\003\u010e\004\u0110\001\002\000\006\003\uff8c" +
    "\004\uff8c\001\002\000\004\075\u0129\001\002\000\006\003" +
    "\u010e\004\u0126\001\002\000\006\073\u0112\074\u0111\001\002" +
    "\000\026\003\061\005\u0114\042\033\044\063\045\052\046" +
    "\064\047\065\050\055\051\062\076\054\001\002\000\004" +
    "\005\u0113\001\002\000\006\003\uff96\004\uff96\001\002\000" +
    "\052\004\u011e\013\105\015\113\017\074\021\107\022\100" +
    "\024\075\026\102\030\103\032\106\034\104\042\073\043" +
    "\112\053\110\055\115\057\076\072\101\074\116\077\114" +
    "\100\072\001\002\000\026\003\061\005\u0116\042\033\044" +
    "\063\045\052\046\064\047\065\050\055\051\062\076\054" +
    "\001\002\000\052\004\u0117\013\105\015\113\017\074\021" +
    "\107\022\100\024\075\026\102\030\103\032\106\034\104" +
    "\042\073\043\112\053\110\055\115\057\076\072\101\074" +
    "\116\077\114\100\072\001\002\000\004\075\u011c\001\002" +
    "\000\052\004\u0119\013\105\015\113\017\074\021\121\022" +
    "\100\024\075\026\102\030\103\032\106\034\104\042\073" +
    "\043\122\053\110\055\115\057\076\072\101\074\116\077" +
    "\123\100\072\001\002\000\004\075\u011a\001\002\000\004" +
    "\005\u011b\001\002\000\006\003\uff8f\004\uff8f\001\002\000" +
    "\004\005\u011d\001\002\000\006\003\uff90\004\uff90\001\002" +
    "\000\004\075\u0123\001\002\000\052\004\u0120\013\105\015" +
    "\113\017\074\021\121\022\100\024\075\026\102\030\103" +
    "\032\106\034\104\042\073\043\122\053\110\055\115\057" +
    "\076\072\101\074\116\077\123\100\072\001\002\000\004" +
    "\075\u0121\001\002\000\004\005\u0122\001\002\000\006\003" +
    "\uff91\004\uff91\001\002\000\004\005\u0124\001\002\000\006" +
    "\003\uff92\004\uff92\001\002\000\006\003\uff8d\004\uff8d\001" +
    "\002\000\006\073\u0127\074\u0111\001\002\000\004\005\u0128" +
    "\001\002\000\006\003\uff94\004\uff94\001\002\000\004\005" +
    "\u012a\001\002\000\006\003\uff8e\004\uff8e\001\002\000\006" +
    "\003\u010e\004\u012f\001\002\000\006\073\u012d\074\u0111\001" +
    "\002\000\004\005\u012e\001\002\000\006\003\uff97\004\uff97" +
    "\001\002\000\006\073\u0130\074\u0111\001\002\000\004\005" +
    "\u0131\001\002\000\006\003\uff95\004\uff95\001\002\000\006" +
    "\003\u0135\004\u01b1\001\002\000\026\003\061\005\u0134\042" +
    "\033\044\063\045\052\046\064\047\065\050\055\051\062" +
    "\076\054\001\002\000\006\003\u0135\004\u0136\001\002\000" +
    "\004\062\u01af\001\002\000\006\056\u01ad\061\u013c\001\002" +
    "\000\006\003\uff9d\004\uff9d\001\002\000\006\003\u0135\004" +
    "\u0139\001\002\000\006\056\u013b\061\u013c\001\002\000\006" +
    "\003\uff9e\004\uff9e\001\002\000\004\005\u01ac\001\002\000" +
    "\026\003\061\005\u013d\042\033\044\063\045\052\046\064" +
    "\047\065\050\055\051\062\076\054\001\002\000\006\003" +
    "\u0142\004\u01a6\001\002\000\026\003\061\005\u013f\042\033" +
    "\044\063\045\052\046\064\047\065\050\055\051\062\076" +
    "\054\001\002\000\006\003\u0142\004\u0144\001\002\000\006" +
    "\003\uff9f\004\uff9f\001\002\000\006\003\u0142\004\u01a2\001" +
    "\002\000\006\064\u019c\066\u019d\001\002\000\006\003\uffa0" +
    "\004\uffa0\001\002\000\010\062\u0147\063\u0145\065\u0146\001" +
    "\002\000\026\003\061\005\u0173\042\033\044\063\045\052" +
    "\046\064\047\065\050\055\051\062\076\054\001\002\000" +
    "\026\003\061\005\u0149\042\033\044\063\045\052\046\064" +
    "\047\065\050\055\051\062\076\054\001\002\000\004\005" +
    "\u0148\001\002\000\006\003\uffbb\004\uffbb\001\002\000\054" +
    "\003\u0151\004\u0162\013\105\015\113\017\074\021\107\022" +
    "\100\024\075\026\102\030\103\032\106\034\104\042\073" +
    "\043\112\053\110\055\115\057\076\072\101\074\116\077" +
    "\114\100\072\001\002\000\026\003\061\005\u014b\042\033" +
    "\044\063\045\052\046\064\047\065\050\055\051\062\076" +
    "\054\001\002\000\054\003\u0151\004\u014e\013\105\015\113" +
    "\017\074\021\107\022\100\024\075\026\102\030\103\032" +
    "\106\034\104\042\073\043\112\053\110\055\115\057\076" +
    "\072\101\074\116\077\114\100\072\001\002\000\004\004" +
    "\u015d\001\002\000\004\004\u015a\001\002\000\012\032\247" +
    "\053\240\066\u0158\100\241\001\002\000\052\004\u0155\013" +
    "\105\015\113\017\074\021\121\022\100\024\075\026\102" +
    "\030\103\032\106\034\104\042\073\043\122\053\110\055" +
    "\115\057\076\072\101\074\116\077\123\100\072\001\002" +
    "\000\004\004\u0152\001\002\000\006\033\204\054\203\001" +
    "\002\000\004\066\u0153\001\002\000\004\005\u0154\001\002" +
    "\000\006\003\uffa5\004\uffa5\001\002\000\004\066\u0156\001" +
    "\002\000\004\005\u0157\001\002\000\006\003\uffab\004\uffab" +
    "\001\002\000\004\005\u0159\001\002\000\006\003\uffac\004" +
    "\uffac\001\002\000\004\066\u015b\001\002\000\004\005\u015c" +
    "\001\002\000\006\003\uffa9\004\uffa9\001\002\000\004\066" +
    "\u015e\001\002\000\004\005\u015f\001\002\000\006\003\uffa7" +
    "\004\uffa7\001\002\000\004\004\u0170\001\002\000\004\004" +
    "\u016d\001\002\000\012\032\247\053\240\066\u016b\100\241" +
    "\001\002\000\052\004\u0168\013\105\015\113\017\074\021" +
    "\121\022\100\024\075\026\102\030\103\032\106\034\104" +
    "\042\073\043\122\053\110\055\115\057\076\072\101\074" +
    "\116\077\123\100\072\001\002\000\004\004\u0165\001\002" +
    "\000\004\066\u0166\001\002\000\004\005\u0167\001\002\000" +
    "\006\003\uffa4\004\uffa4\001\002\000\004\066\u0169\001\002" +
    "\000\004\005\u016a\001\002\000\006\003\uffaa\004\uffaa\001" +
    "\002\000\004\005\u016c\001\002\000\006\003\uffad\004\uffad" +
    "\001\002\000\004\066\u016e\001\002\000\004\005\u016f\001" +
    "\002\000\006\003\uffa8\004\uffa8\001\002\000\004\066\u0171" +
    "\001\002\000\004\005\u0172\001\002\000\006\003\uffa6\004" +
    "\uffa6\001\002\000\054\003\u0151\004\u018b\013\105\015\113" +
    "\017\074\021\107\022\100\024\075\026\102\030\103\032" +
    "\106\034\104\042\073\043\112\053\110\055\115\057\076" +
    "\072\101\074\116\077\114\100\072\001\002\000\026\003" +
    "\061\005\u0175\042\033\044\063\045\052\046\064\047\065" +
    "\050\055\051\062\076\054\001\002\000\054\003\u0151\004" +
    "\u0178\013\105\015\113\017\074\021\107\022\100\024\075" +
    "\026\102\030\103\032\106\034\104\042\073\043\112\053" +
    "\110\055\115\057\076\072\101\074\116\077\114\100\072" +
    "\001\002\000\004\004\u0186\001\002\000\004\004\u0183\001" +
    "\002\000\012\032\247\053\240\064\u0181\100\241\001\002" +
    "\000\052\004\u017e\013\105\015\113\017\074\021\121\022" +
    "\100\024\075\026\102\030\103\032\106\034\104\042\073" +
    "\043\122\053\110\055\115\057\076\072\101\074\116\077" +
    "\123\100\072\001\002\000\004\004\u017b\001\002\000\004" +
    "\064\u017c\001\002\000\004\005\u017d\001\002\000\006\003" +
    "\uffb0\004\uffb0\001\002\000\004\064\u017f\001\002\000\004" +
    "\005\u0180\001\002\000\006\003\uffb7\004\uffb7\001\002\000" +
    "\004\005\u0182\001\002\000\006\003\uffb6\004\uffb6\001\002" +
    "\000\004\064\u0184\001\002\000\004\005\u0185\001\002\000" +
    "\006\003\uffb4\004\uffb4\001\002\000\004\064\u0187\001\002" +
    "\000\004\005\u0188\001\002\000\006\003\uffb2\004\uffb2\001" +
    "\002\000\004\004\u0199\001\002\000\004\004\u0196\001\002" +
    "\000\012\032\247\053\240\064\u0194\100\241\001\002\000" +
    "\052\004\u0191\013\105\015\113\017\074\021\121\022\100" +
    "\024\075\026\102\030\103\032\106\034\104\042\073\043" +
    "\122\053\110\055\115\057\076\072\101\074\116\077\123" +
    "\100\072\001\002\000\004\004\u018e\001\002\000\004\064" +
    "\u018f\001\002\000\004\005\u0190\001\002\000\006\003\uffaf" +
    "\004\uffaf\001\002\000\004\064\u0192\001\002\000\004\005" +
    "\u0193\001\002\000\006\003\uffb5\004\uffb5\001\002\000\004" +
    "\005\u0195\001\002\000\006\003\uffb8\004\uffb8\001\002\000" +
    "\004\064\u0197\001\002\000\004\005\u0198\001\002\000\006" +
    "\003\uffb3\004\uffb3\001\002\000\004\064\u019a\001\002\000" +
    "\004\005\u019b\001\002\000\006\003\uffb1\004\uffb1\001\002" +
    "\000\004\005\u019f\001\002\000\004\005\u019e\001\002\000" +
    "\006\003\uffa3\004\uffa3\001\002\000\006\003\uffae\004\uffae" +
    "\001\002\000\006\003\uffa2\004\uffa2\001\002\000\006\003" +
    "\uffa1\004\uffa1\001\002\000\010\062\u01a3\063\u0145\065\u0146" +
    "\001\002\000\004\005\u01a4\001\002\000\006\003\uffba\004" +
    "\uffba\001\002\000\006\003\u0142\004\u01a9\001\002\000\010" +
    "\062\u01a7\063\u0145\065\u0146\001\002\000\004\005\u01a8\001" +
    "\002\000\006\003\uffbd\004\uffbd\001\002\000\010\062\u01aa" +
    "\063\u0145\065\u0146\001\002\000\004\005\u01ab\001\002\000" +
    "\006\003\uffbc\004\uffbc\001\002\000\006\003\uffbf\004\uffbf" +
    "\001\002\000\004\005\u01ae\001\002\000\006\003\uffc1\004" +
    "\uffc1\001\002\000\004\005\u01b0\001\002\000\006\003\uffb9" +
    "\004\uffb9\001\002\000\006\056\u01b6\061\u013c\001\002\000" +
    "\006\003\u0135\004\u01b3\001\002\000\006\056\u01b4\061\u013c" +
    "\001\002\000\004\005\u01b5\001\002\000\006\003\uffc0\004" +
    "\uffc0\001\002\000\004\005\u01b7\001\002\000\006\003\uffc2" +
    "\004\uffc2\001\002\000\006\003\uff80\004\uff80\001\002\000" +
    "\026\003\061\040\u01ba\042\033\044\063\045\052\046\064" +
    "\047\065\050\055\051\062\076\054\001\002\000\006\003" +
    "\uff7f\004\uff7f\001\002\000\006\003\175\004\u01c5\001\002" +
    "\000\026\003\061\005\u01bd\042\033\044\063\045\052\046" +
    "\064\047\065\050\055\051\062\076\054\001\002\000\006" +
    "\003\175\004\u01be\001\002\000\032\030\234\031\u01c3\032" +
    "\247\034\242\036\244\037\235\053\240\055\236\057\246" +
    "\070\243\072\237\100\241\001\002\000\006\003\175\004" +
    "\u01c0\001\002\000\032\030\234\031\u01c1\032\247\034\242" +
    "\036\244\037\235\053\240\055\236\057\246\070\243\072" +
    "\237\100\241\001\002\000\004\005\u01c2\001\002\000\006" +
    "\003\uffd2\004\uffd2\001\002\000\004\005\u01c4\001\002\000" +
    "\006\003\uffd4\004\uffd4\001\002\000\032\030\234\031\u01ca" +
    "\032\247\034\242\036\244\037\235\053\240\055\236\057" +
    "\246\070\243\072\237\100\241\001\002\000\006\003\175" +
    "\004\u01c7\001\002\000\032\030\234\031\u01c8\032\247\034" +
    "\242\036\244\037\235\053\240\055\236\057\246\070\243" +
    "\072\237\100\241\001\002\000\004\005\u01c9\001\002\000" +
    "\006\003\uffd1\004\uffd1\001\002\000\004\005\u01cb\001\002" +
    "\000\006\003\uffd3\004\uffd3\001\002\000\004\005\u01cd\001" +
    "\002\000\004\004\ufff9\001\002\000\004\011\u01cf\001\002" +
    "\000\004\007\u01d0\001\002\000\004\005\uff7e\001\002\000" +
    "\004\005\uff7c\001\002\000\004\005\u01d3\001\002\000\004" +
    "\004\ufff8\001\002\000\004\005\u01d5\001\002\000\006\003" +
    "\ufffb\004\ufffb\001\002\000\004\005\u01d7\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\006\002\005\043\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\013\001" +
    "\001\000\002\001\001\000\004\004\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\022\007\021\011" +
    "\024\012\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\135\011\137\012\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\050" +
    "\015\052\016\055\020\057\001\001\000\004\010\043\001" +
    "\001\000\002\001\001\000\004\010\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\125\042\076\001\001\000" +
    "\010\010\066\015\067\016\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\110\042\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\014" +
    "\175\017\172\021\177\022\163\023\167\024\176\032\200" +
    "\033\164\036\170\037\173\040\166\041\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\227\021\231\022\217\023\223\024\230" +
    "\032\232\033\220\036\224\037\226\040\222\041\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\050\015\052\016\055\020\u01bb\001\001\000\012" +
    "\010\050\015\052\016\055\020\u01b8\001\001\000\012\010" +
    "\050\015\052\016\055\020\u0132\001\001\000\012\010\050" +
    "\015\052\016\055\020\u010a\001\001\000\012\010\050\015" +
    "\052\016\055\020\361\001\001\000\012\010\050\015\052" +
    "\016\055\020\356\001\001\000\012\010\050\015\052\016" +
    "\055\020\344\001\001\000\012\010\050\015\052\016\055" +
    "\020\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\050\015\052\016\055\020\271\001\001\000\012" +
    "\010\050\015\052\016\055\020\250\001\001\000\002\001" +
    "\001\000\010\010\066\015\067\016\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\307\042\076\001" +
    "\001\000\010\010\066\015\067\016\055\001\001\000\006" +
    "\013\274\042\076\001\001\000\002\001\001\000\004\042" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\336\042\076\001\001\000\010\010" +
    "\066\015\067\016\055\001\001\000\006\013\327\042\076" +
    "\001\001\000\002\001\001\000\004\042\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\066\015\067\016\055\001\001\000\006\013\347\042\076" +
    "\001\001\000\002\001\001\000\004\042\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\066\015\067\016\055\001\001\000\002\001\001\000\010" +
    "\013\377\040\u0100\042\076\001\001\000\010\010\066\015" +
    "\067\016\055\001\001\000\010\013\364\040\365\042\076" +
    "\001\001\000\002\001\001\000\004\042\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\u010c\035\u012a\001\001\000\010" +
    "\010\066\015\067\016\055\001\001\000\006\034\u010c\035" +
    "\u010e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\u0124\001\001\000\002\001\001\000\012\010\050\015" +
    "\052\016\055\020\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\u011e\042\076\001\001\000\010\010" +
    "\066\015\067\016\055\001\001\000\006\013\u0117\042\076" +
    "\001\001\000\002\001\001\000\004\042\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\u0136\031\u01b1\001\001\000\010\010\066\015\067" +
    "\016\055\001\001\000\006\025\u0136\031\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0139\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\050\015\052\016\055\020\u013d" +
    "\001\001\000\010\026\u013f\027\u0142\030\u01a4\001\001\000" +
    "\010\010\066\015\067\016\055\001\001\000\010\026\u013f" +
    "\027\u0142\030\u0140\001\001\000\002\001\001\000\006\026" +
    "\u019f\027\u01a0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\050\015\052\016\055\020" +
    "\u0173\001\001\000\012\010\050\015\052\016\055\020\u0149" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\u0162\021\u015f\022\u0160\040\u0163\042\076\001\001\000\010" +
    "\010\066\015\067\016\055\001\001\000\014\013\u014e\021" +
    "\u014b\022\u014c\040\u014f\042\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\u018b\021\u0188\022\u0189\040\u018c\042\076\001" +
    "\001\000\010\010\066\015\067\016\055\001\001\000\014" +
    "\013\u0178\021\u0175\022\u0176\040\u0179\042\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\u019f" +
    "\027\u01a0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\u0139\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\066\015\067\016\055\001" +
    "\001\000\002\001\001\000\032\014\175\017\u01c5\021\177" +
    "\022\163\023\167\024\176\032\200\033\164\036\170\037" +
    "\173\040\166\041\171\001\001\000\010\010\066\015\067" +
    "\016\055\001\001\000\032\014\175\017\u01be\021\177\022" +
    "\163\023\167\024\176\032\200\033\164\036\170\037\173" +
    "\040\166\041\171\001\001\000\002\001\001\000\030\014" +
    "\227\021\231\022\217\023\223\024\230\032\232\033\220" +
    "\036\224\037\226\040\222\041\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\227\021" +
    "\231\022\217\023\223\024\230\032\232\033\220\036\224" +
    "\037\226\040\222\041\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ASTNodo raiz;
    int contador;
    public static ArrayList<TError> errores;
    //METODO PARA ERROR RECUPERABLE
    public void syntax_error(Symbol s)
    {
      try
      {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("--------------Error Sintactico RECUPERABLE------------------------");
        System.out.println("Lexema: "+lexema);
        System.out.println("Fila: "+fila);
        System.out.println("Columna: "+columna);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR IRRECUPERABLE");
      }

    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      try
      {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("--------------Error Sintactico PANICO------------------------");
        System.out.println("Lexema: "+lexema);
        System.out.println("Fila: "+fila);
        System.out.println("Columna: "+columna);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR IRRECUPERABLE");
      }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // RESERVADAS ::= ruta 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // RESERVADAS ::= texto 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // RESERVADAS ::= spinner 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // RESERVADAS ::= opcion 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // RESERVADAS ::= caja 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // RESERVADAS ::= tabla 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // RESERVADAS ::= enlace 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // RESERVADAS ::= boton 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // RESERVADAS ::= imagen 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // RESERVADAS ::= panel 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // RESERVADAS ::= titulo 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // RESERVADAS ::= ccss 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // RESERVADAS ::= cjs 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // RESERVADAS ::= cuerpo 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // RESERVADAS ::= encabezado 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // RESERVADAS ::= chtml 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TXT ::= RESERVADAS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, h1.getEtiqueta());
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TXT ::= especiales 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, pal);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TXT ::= palabra 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, pal);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TXT ::= entero 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, pal);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TXT ::= TXT RESERVADAS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + h2.getEtiqueta();
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TXT ::= TXT especiales 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + pal;
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TXT ::= TXT entero 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + pal;
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TXT ::= TXT palabra 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + pal;
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NOM_A ::= valor 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NOM_A ::= alineado 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NOM_A ::= ancho 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NOM_A ::= alto 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NOM_A ::= grupo 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NOM_A ::= id 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NOM_A ::= click 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // L_ATTS ::= RUTA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // L_ATTS ::= ATRIBUTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // L_ATTS ::= L_ATTS RUTA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          padre.addHijo(h2);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // L_ATTS ::= L_ATTS ATRIBUTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          padre.addHijo(h2);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ATRIBUTO ::= error pcoma 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "ATRIBUTO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ATRIBUTO ::= NOM_A igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, h1.getEtiqueta().toUpperCase());
            parser.contador++;
            cad = cad.replace("\"","");
            ASTNodo hijo = new ASTNodo(parser.contador,cad);
            parser.contador++;
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // RUTA ::= ruta igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "RUTA");
        parser.contador++;
        cad =cad.replace("\"","");
        ASTNodo nodo = new ASTNodo(parser.contador, cadright, cadleft, cad);
        parser.contador++;
        padre.addHijo(nodo);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUTA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FONDO ::= error pcoma 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FONDO ::= 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FONDO ::= fondo igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            cad =cad.replace("\"","");
            ASTNodo nodo = new ASTNodo(parser.contador, cad);
            parser.contador++;
            padre.addHijo(nodo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TEXTO_A ::= opentag texto_a L_ATTS finTextoA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TEXTO_A");
          parser.contador++;
          tex = tex.replace("<FIN-TEXTO_A","");
          tex = tex.replace("<fin-texto_a","");
          tex = tex.replace(">","");
          tex = tex.replace("\"", "");
          ASTNodo hij = new ASTNodo(parser.contador, tex);
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO_A",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TEXTO_A ::= opentag texto_a finTextoA 
            {
              ASTNodo RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TEXTO_A");
          parser.contador++;
          tex = tex.replace("<FIN-TEXTO_A","");
          tex = tex.replace("<fin-texto_a","");
          tex = tex.replace(">","");
          tex = tex.replace("\"", "");
          ASTNodo hij = new ASTNodo(parser.contador, tex);
          parser.contador++;
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO_A",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TEXTO ::= opentag texto L_ATTS finTexto 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TEXTO");
          parser.contador++;
          tex = tex.replace("<FIN-TEXTO","");
          tex = tex.replace("<fin-texto","");
          tex = tex.replace(">","");
          tex = tex.replace("\"", "");
          ASTNodo hij = new ASTNodo(parser.contador, tex);
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TEXTO ::= opentag texto finTexto 
            {
              ASTNodo RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TEXTO");
          parser.contador++;
          tex = tex.replace("<FIN-TEXTO","");
          tex = tex.replace("<fin-texto","");
          tex = tex.replace(">","");
          tex = tex.replace("\"", "");
          ASTNodo hij = new ASTNodo(parser.contador, tex);
          parser.contador++;
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SALTO ::= error saltoFin closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "SALTO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALTO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SALTO ::= opentag saltoFin closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "SALTO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALTO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SPINNER ::= error finSpinner closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SPINNER ::= opentag spinner closetag TXT opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SPINNER ::= opentag spinner L_ATTS closetag TXT opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SPINNER ::= opentag spinner L_ATTS closetag entero opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            ASTNodo hijo = new ASTNodo(parser.contador, "CONTADOR");
            parser.contador++;
            ASTNodo con = new ASTNodo(parser.contador, cont);
            parser.contador++;
            hijo.addHijo(con);
            if(h1!=null)
            {padre.addHijo(h1);}
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SPINNER ::= opentag spinner closetag entero opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            ASTNodo hijo = new ASTNodo(parser.contador, "CONTADOR");
            parser.contador++;
            ASTNodo con = new ASTNodo(parser.contador, cont);
            parser.contador++;
            hijo.addHijo(con);
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SPINNER ::= opentag spinner L_ATTS closetag opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SPINNER ::= opentag spinner closetag opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // L_OPCIONES ::= OPCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_OPCIONES");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_OPCIONES",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // L_OPCIONES ::= L_OPCIONES OPCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_OPCIONES");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_OPCIONES",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPCION ::= error finOpcion closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPCION ::= opentag opcion L_ATTS closetag TXT opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          if(h2!=null)
          {padre.addHijo(h2);}
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPCION ::= opentag opcion L_ATTS closetag opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPCION ::= opentag opcion closetag TXT opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {hij.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPCION ::= opentag opcion closetag opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CAJA ::= error finCaja closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CAJA ::= opentag caja L_ATTS closetag L_OPCIONES opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          ASTNodo nodo = new ASTNodo(parser.contador,"TXT");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {nodo.addHijo(h2);}
          padre.addHijo(nodo);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CAJA ::= opentag caja closetag L_OPCIONES opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CAJA ::= opentag caja L_ATTS closetag opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CAJA ::= opentag caja closetag opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CAJA_TEXTO ::= error finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CAJA_TEXTO ::= opentag caja_texto L_ATTS closetag TXT opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador,"CAJA_TEXTO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              ASTNodo hij = new ASTNodo(parser.contador,"TXT");
              parser.contador++;
              if(h2!=null)
              {hij.addHijo(h2);}
              padre.addHijo(hij);
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CAJA_TEXTO ::= opentag caja_texto closetag TXT opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador,"CAJA_TEXTO");
              parser.contador++;
              ASTNodo hij = new ASTNodo(parser.contador,"TXT");
              parser.contador++;
              if(h1!=null)
              {hij.addHijo(h1);}
              padre.addHijo(hij);
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CAJA_TEXTO ::= opentag caja_texto L_ATTS closetag opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CAJA_TEXTO ::= opentag caja_texto closetag opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // L_FILAS ::= FILATABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_FILAS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FILAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // L_FILAS ::= L_FILAS FILATABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_FILAS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FILAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // L_CELDAS ::= C_ENCABEZADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // L_CELDAS ::= CELDA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // L_CELDAS ::= L_CELDAS CELDA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // L_CELDAS ::= L_CELDAS C_ENCABEZADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CELDA ::= error finCt closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CELDA ::= opentag ct closetag TEXTO opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CELDA ::= opentag ct L_ATTS closetag TEXTO opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CELDA ::= opentag ct closetag IMAGEN opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CELDA ::= opentag ct L_ATTS closetag IMAGEN opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CELDA ::= opentag ct closetag BOTON opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CELDA ::= opentag ct L_ATTS closetag BOTON opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CELDA ::= opentag ct closetag TXT opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CELDA ::= opentag ct L_ATTS closetag TXT opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CELDA ::= opentag ct L_ATTS closetag opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CELDA ::= opentag ct closetag opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CELDA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // C_ENCABEZADO ::= error finCb closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // C_ENCABEZADO ::= opentag cb closetag TEXTO opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // C_ENCABEZADO ::= opentag cb L_ATTS closetag TEXTO opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // C_ENCABEZADO ::= opentag cb closetag IMAGEN opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // C_ENCABEZADO ::= opentag cb L_ATTS closetag IMAGEN opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // C_ENCABEZADO ::= opentag cb closetag BOTON opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // C_ENCABEZADO ::= opentag cb L_ATTS closetag BOTON opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // C_ENCABEZADO ::= opentag cb closetag TXT opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // C_ENCABEZADO ::= opentag cb L_ATTS closetag opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // C_ENCABEZADO ::= opentag cb L_ATTS closetag TXT opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // C_ENCABEZADO ::= opentag cb closetag opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FILATABLA ::= error finFil_t closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FILATABLA ::= opentag fil_t L_ATTS closetag L_CELDAS opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FILATABLA ::= opentag fil_t L_ATTS closetag opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FILATABLA ::= opentag fil_t closetag L_CELDAS opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FILATABLA ::= opentag fil_t closetag opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TABLA ::= error finTabla closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TABLA ::= opentag tabla L_ATTS closetag L_FILAS opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TABLA ::= opentag tabla closetag L_FILAS opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TABLA ::= opentag tabla L_ATTS closetag opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TABLA ::= opentag tabla closetag opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ENLACE ::= opentag enlace L_ATTS closetag TXT opentag finEnlace closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"ENLACE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo hij = new ASTNodo(parser.contador,"TXT");
          parser.contador++;
          if(h2!=null)
          {hij.addHijo(h2);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENLACE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ENLACE ::= opentag enlace L_ATTS closetag opentag finEnlace closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"ENLACE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENLACE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BOTON ::= error finBoton closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BOTON ::= opentag boton closetag TEXTO opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOTON ::= opentag boton L_ATTS closetag TEXTO opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BOTON ::= opentag boton L_ATTS closetag TXT opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {hij.addHijo(h2);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOTON ::= opentag boton closetag TXT opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {hij.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOTON ::= opentag boton L_ATTS closetag opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BOTON ::= opentag boton closetag opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IMAGEN ::= error finImagen closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"IMAGEN");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IMAGEN ::= opentag imagen L_ATTS closetag path opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          ASTNodo rut = new ASTNodo(parser.contador,"PATH");
          parser.contador++;
          ASTNodo r = new ASTNodo(parser.contador,pa);
          parser.contador++;
          rut.addHijo(r);
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(rut);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMAGEN ::= opentag imagen L_ATTS closetag opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMAGEN ::= opentag imagen closetag path opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          ASTNodo rut = new ASTNodo(parser.contador,"PATH");
          parser.contador++;
          ASTNodo r = new ASTNodo(parser.contador,pa);
          parser.contador++;
          rut.addHijo(r);
          padre.addHijo(rut);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMAGEN ::= opentag imagen closetag opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"IMAGEN");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PANEL ::= opentag panel closetag L_CUERPO opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PANEL ::= opentag panel L_ATTS closetag L_CUERPO opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PANEL ::= opentag panel closetag opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PANEL ::= opentag panel L_ATTS closetag opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        //padre.addHijo(h2);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_CUERPO ::= TABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_CUERPO ::= ENLACE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L_CUERPO ::= BOTON 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L_CUERPO ::= IMAGEN 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L_CUERPO ::= PANEL 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L_CUERPO ::= TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L_CUERPO ::= TEXTO_A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L_CUERPO ::= CAJA_TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L_CUERPO ::= SPINNER 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_CUERPO ::= CAJA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_CUERPO ::= SALTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_CUERPO ::= L_CUERPO SALTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L_CUERPO ::= L_CUERPO SPINNER 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L_CUERPO ::= L_CUERPO CAJA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L_CUERPO ::= L_CUERPO CAJA_TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_CUERPO ::= L_CUERPO TEXTO_A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_CUERPO ::= L_CUERPO TABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_CUERPO ::= L_CUERPO ENLACE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_CUERPO ::= L_CUERPO BOTON 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_CUERPO ::= L_CUERPO IMAGEN 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_CUERPO ::= L_CUERPO TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_CUERPO ::= L_CUERPO PANEL 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TITULO ::= error finTitulo closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"TITULO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TITULO ::= opentag titulo L_ATTS closetag TXT opentag finTitulo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TITULO");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TITULO ::= opentag titulo closetag TXT opentag finTitulo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TITULO");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          hij.addHijo(h1);
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CCSS ::= error finCcss closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CCSS");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CCSS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CCSS ::= opentag ccss RUTA closetag opentag finCcss closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CCSS");
        parser.contador++;
        padre.addHijo(h1);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CCSS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CJS ::= error finCjs closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CJS");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CJS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CJS ::= opentag cjs RUTA closetag opentag finCjs closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CJS");
        parser.contador++;
        padre.addHijo(h1);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CJS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // L_ENCABEZADO ::= TITULO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L_ENCABEZADO ::= CCSS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_ENCABEZADO ::= CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_ENCABEZADO ::= L_ENCABEZADO CCSS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L_ENCABEZADO ::= L_ENCABEZADO CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_ENCABEZADO ::= L_ENCABEZADO TITULO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador,"L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= error finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= opentag cuerpo FONDO closetag opentag finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= opentag cuerpo FONDO closetag L_CUERPO opentag finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            padre.addHijo(h2);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENCABEZADO ::= error finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENCABEZADO ::= opentag encabezado closetag opentag finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= opentag encabezado closetag L_ENCABEZADO opentag finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  padre.addHijo(h1);
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_CHTML ::= error finChtml closetag 
            {
              ASTNodo RESULT =null;
		
                  //DESCARTO PORQUE EXISTE UN ERROR
                  System.out.println("Error en la produccion de INICIO_CHTML");
                  ASTNodo padre = new ASTNodo(parser.contador, "INICIO_CHTML");
                  parser.contador++;
                  parser.raiz = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CHTML",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_CHTML ::= NT$0 opentag chtml closetag ENCABEZADO CUERPO opentag finChtml closetag 
            {
              ASTNodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ASTNodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador,"INICIO_CHTML");
                  parser.contador++;
                  padre.addHijo(h1);
                  padre.addHijo(h2);
                  parser.raiz = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CHTML",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              ASTNodo RESULT =null;
 parser.errores = new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo start_val = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

