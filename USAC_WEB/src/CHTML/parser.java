
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 20 01:12:54 CST 2018
//----------------------------------------------------

package CHTML;

import java_cup.runtime.Symbol;
import AST.*;
import java.util.ArrayList;
import CHTML.Auxiliares.*;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 20 01:12:54 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\033\002\000\002\002" +
    "\013\000\002\002\005\000\002\003\011\000\002\003\010" +
    "\000\002\003\005\000\002\004\012\000\002\004\011\000" +
    "\002\004\005\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\011\000\002\007\005\000\002\011\011" +
    "\000\002\011\005\000\002\012\011\000\002\012\005\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\014\011\000\002\014\010\000\002\014\012\000\002\014" +
    "\011\000\002\021\010\000\002\021\011\000\002\021\011" +
    "\000\002\021\012\000\002\021\005\000\002\022\010\000" +
    "\002\022\011\000\002\022\011\000\002\022\012\000\002" +
    "\022\005\000\002\023\011\000\002\023\012\000\002\024" +
    "\010\000\002\024\011\000\002\024\011\000\002\024\012" +
    "\000\002\024\005\000\002\025\010\000\002\025\011\000" +
    "\002\025\005\000\002\026\010\000\002\026\011\000\002" +
    "\026\011\000\002\026\011\000\002\026\005\000\002\027" +
    "\010\000\002\027\011\000\002\027\011\000\002\027\011" +
    "\000\002\027\005\000\002\030\004\000\002\030\004\000" +
    "\002\030\003\000\002\030\003\000\002\031\004\000\002" +
    "\031\003\000\002\032\010\000\002\032\011\000\002\032" +
    "\011\000\002\032\012\000\002\032\005\000\002\005\006" +
    "\000\002\005\002\000\002\005\004\000\002\010\006\000" +
    "\002\015\006\000\002\015\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\003\000\002\020\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\013\004\000" +
    "\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\006\003\004\004\000\001\002\000\004\014" +
    "\u011d\001\002\000\004\004\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\013\011\001" +
    "\002\000\004\005\012\001\002\000\006\003\013\004\015" +
    "\001\002\000\004\016\u011b\001\002\000\006\003\074\004" +
    "\075\001\002\000\004\015\016\001\002\000\004\005\017" +
    "\001\002\000\006\003\021\004\024\001\002\000\006\003" +
    "\ufff2\004\ufff2\001\002\000\010\022\067\024\070\026\066" +
    "\001\002\000\006\003\ufff4\004\ufff4\001\002\000\006\003" +
    "\021\004\062\001\002\000\012\016\030\021\031\023\027" +
    "\025\026\001\002\000\006\003\ufff3\004\ufff3\001\002\000" +
    "\004\005\051\001\002\000\004\036\033\001\002\000\004" +
    "\005\043\001\002\000\004\036\033\001\002\000\004\005" +
    "\037\001\002\000\004\006\034\001\002\000\004\011\035" +
    "\001\002\000\004\007\036\001\002\000\024\003\uffab\005" +
    "\uffab\036\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\001\002\000\004\004\040\001\002\000\004\022" +
    "\041\001\002\000\004\005\042\001\002\000\006\003\ufff1" +
    "\004\ufff1\001\002\000\006\003\ufffc\004\ufffc\001\002\000" +
    "\004\005\045\001\002\000\004\004\046\001\002\000\004" +
    "\024\047\001\002\000\004\005\050\001\002\000\006\003" +
    "\uffef\004\uffef\001\002\000\004\037\052\001\002\000\006" +
    "\004\uff9d\037\uff9d\001\002\000\006\004\054\037\055\001" +
    "\002\000\004\026\056\001\002\000\006\004\uff9e\037\uff9e" +
    "\001\002\000\004\005\057\001\002\000\006\003\uffed\004" +
    "\uffed\001\002\000\006\003\ufff7\004\ufff7\001\002\000\006" +
    "\003\ufff6\004\ufff6\001\002\000\012\016\064\021\031\023" +
    "\027\025\026\001\002\000\006\003\ufff5\004\ufff5\001\002" +
    "\000\004\005\065\001\002\000\006\003\ufffd\004\ufffd\001" +
    "\002\000\004\005\073\001\002\000\004\005\072\001\002" +
    "\000\004\005\071\001\002\000\006\003\uffee\004\uffee\001" +
    "\002\000\006\003\ufff0\004\ufff0\001\002\000\006\003\uffec" +
    "\004\uffec\001\002\000\004\020\u0119\001\002\000\004\017" +
    "\102\001\002\000\004\004\077\001\002\000\004\014\100" +
    "\001\002\000\004\005\101\001\002\000\004\002\uffff\001" +
    "\002\000\010\003\103\005\uffad\035\104\001\002\000\004" +
    "\007\u0118\001\002\000\004\006\u0115\001\002\000\004\005" +
    "\106\001\002\000\012\003\114\004\110\012\117\061\112" +
    "\001\002\000\012\003\uffde\004\uffde\012\uffde\061\uffde\001" +
    "\002\000\020\020\u0113\027\146\031\150\033\143\047\145" +
    "\051\151\062\144\001\002\000\012\003\uffdd\004\uffdd\012" +
    "\uffdd\061\uffdd\001\002\000\012\003\uffe2\004\uffe2\012\uffe2" +
    "\061\uffe2\001\002\000\012\003\114\004\133\012\140\061" +
    "\135\001\002\000\012\032\124\050\123\052\122\063\125" +
    "\001\002\000\012\003\uffe0\004\uffe0\012\uffe0\061\uffe0\001" +
    "\002\000\012\003\uffdc\004\uffdc\012\uffdc\061\uffdc\001\002" +
    "\000\012\003\uffe1\004\uffe1\012\uffe1\061\uffe1\001\002\000" +
    "\012\003\uffdf\004\uffdf\012\uffdf\061\uffdf\001\002\000\012" +
    "\003\uffe3\004\uffe3\012\uffe3\061\uffe3\001\002\000\004\005" +
    "\131\001\002\000\004\005\130\001\002\000\004\005\127" +
    "\001\002\000\004\005\126\001\002\000\012\003\uffaf\004" +
    "\uffaf\012\uffaf\061\uffaf\001\002\000\012\003\uffd3\004\uffd3" +
    "\012\uffd3\061\uffd3\001\002\000\012\003\uffce\004\uffce\012" +
    "\uffce\061\uffce\001\002\000\012\003\uffc7\004\uffc7\012\uffc7" +
    "\061\uffc7\001\002\000\012\003\uffe8\004\uffe8\012\uffe8\061" +
    "\uffe8\001\002\000\020\020\147\027\146\031\150\033\143" +
    "\047\145\051\151\062\144\001\002\000\012\003\uffe7\004" +
    "\uffe7\012\uffe7\061\uffe7\001\002\000\012\003\uffe5\004\uffe5" +
    "\012\uffe5\061\uffe5\001\002\000\012\003\uffeb\004\uffeb\012" +
    "\uffeb\061\uffeb\001\002\000\012\003\uffe6\004\uffe6\012\uffe6" +
    "\061\uffe6\001\002\000\012\003\uffea\004\uffea\012\uffea\061" +
    "\uffea\001\002\000\012\003\uffe9\004\uffe9\012\uffe9\061\uffe9" +
    "\001\002\000\012\003\uffe4\004\uffe4\012\uffe4\061\uffe4\001" +
    "\002\000\022\003\161\036\033\040\164\041\153\042\163" +
    "\043\165\044\155\045\162\001\002\000\024\003\161\005" +
    "\371\036\033\040\164\041\153\042\163\043\165\044\155" +
    "\045\162\001\002\000\024\003\161\005\350\036\033\040" +
    "\164\041\153\042\163\043\165\044\155\045\162\001\002" +
    "\000\024\003\161\005\327\036\033\040\164\041\153\042" +
    "\163\043\165\044\155\045\162\001\002\000\004\005\326" +
    "\001\002\000\024\003\161\005\305\036\033\040\164\041" +
    "\153\042\163\043\165\044\155\045\162\001\002\000\024" +
    "\003\161\005\157\036\033\040\164\041\153\042\163\043" +
    "\165\044\155\045\162\001\002\000\024\003\uffa5\005\uffa5" +
    "\036\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\001\002\000\004\006\uffa3\001\002\000\024\003\uffa6" +
    "\005\uffa6\036\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\001\002\000\004\006\uffa0\001\002\000\004" +
    "\006\302\001\002\000\006\003\172\004\273\001\002\000" +
    "\024\003\161\005\171\036\033\040\164\041\153\042\163" +
    "\043\165\044\155\045\162\001\002\000\004\007\166\001" +
    "\002\000\004\006\uff9f\001\002\000\004\006\uffa2\001\002" +
    "\000\004\006\uffa4\001\002\000\004\006\uffa1\001\002\000" +
    "\024\003\uffa9\005\uffa9\036\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\001\002\000\024\003\uffa7\005" +
    "\uffa7\036\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\001\002\000\024\003\uffa8\005\uffa8\036\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\001\002" +
    "\000\006\003\172\004\173\001\002\000\004\054\271\001" +
    "\002\000\006\052\267\053\201\001\002\000\006\003\uffb4" +
    "\004\uffb4\001\002\000\006\003\172\004\176\001\002\000" +
    "\006\052\200\053\201\001\002\000\006\003\uffb5\004\uffb5" +
    "\001\002\000\004\005\266\001\002\000\004\005\202\001" +
    "\002\000\006\003\205\004\207\001\002\000\006\003\uffb6" +
    "\004\uffb6\001\002\000\006\003\205\004\263\001\002\000" +
    "\006\056\255\060\256\001\002\000\006\003\uffb7\004\uffb7" +
    "\001\002\000\010\054\212\055\210\057\211\001\002\000" +
    "\004\005\235\001\002\000\004\005\214\001\002\000\004" +
    "\005\213\001\002\000\006\003\uffc6\004\uffc6\001\002\000" +
    "\010\003\216\004\220\037\052\001\002\000\004\004\232" +
    "\001\002\000\006\032\124\050\123\001\002\000\004\004" +
    "\227\001\002\000\010\031\150\047\145\060\225\001\002" +
    "\000\006\004\222\037\055\001\002\000\004\060\223\001" +
    "\002\000\004\005\224\001\002\000\006\003\uffbd\004\uffbd" +
    "\001\002\000\004\005\226\001\002\000\006\003\uffbe\004" +
    "\uffbe\001\002\000\004\060\230\001\002\000\004\005\231" +
    "\001\002\000\006\003\uffbb\004\uffbb\001\002\000\004\060" +
    "\233\001\002\000\004\005\234\001\002\000\006\003\uffbc" +
    "\004\uffbc\001\002\000\010\003\216\004\240\037\052\001" +
    "\002\000\004\004\252\001\002\000\004\004\247\001\002" +
    "\000\010\031\150\047\145\056\245\001\002\000\006\004" +
    "\242\037\055\001\002\000\004\056\243\001\002\000\004" +
    "\005\244\001\002\000\006\003\uffc2\004\uffc2\001\002\000" +
    "\004\005\246\001\002\000\006\003\uffc3\004\uffc3\001\002" +
    "\000\004\056\250\001\002\000\004\005\251\001\002\000" +
    "\006\003\uffc0\004\uffc0\001\002\000\004\056\253\001\002" +
    "\000\004\005\254\001\002\000\006\003\uffc1\004\uffc1\001" +
    "\002\000\004\005\260\001\002\000\004\005\257\001\002" +
    "\000\006\003\uffba\004\uffba\001\002\000\006\003\uffbf\004" +
    "\uffbf\001\002\000\006\003\uffb9\004\uffb9\001\002\000\006" +
    "\003\uffb8\004\uffb8\001\002\000\010\054\264\055\210\057" +
    "\211\001\002\000\004\005\265\001\002\000\006\003\uffc5" +
    "\004\uffc5\001\002\000\012\003\uffc8\004\uffc8\012\uffc8\061" +
    "\uffc8\001\002\000\004\005\270\001\002\000\012\003\uffca" +
    "\004\uffca\012\uffca\061\uffca\001\002\000\004\005\272\001" +
    "\002\000\006\003\uffc4\004\uffc4\001\002\000\006\052\300" +
    "\053\201\001\002\000\006\003\172\004\275\001\002\000" +
    "\006\052\276\053\201\001\002\000\004\005\277\001\002" +
    "\000\012\003\uffc9\004\uffc9\012\uffc9\061\uffc9\001\002\000" +
    "\004\005\301\001\002\000\012\003\uffcb\004\uffcb\012\uffcb" +
    "\061\uffcb\001\002\000\004\011\303\001\002\000\004\007" +
    "\304\001\002\000\024\003\uffaa\005\uffaa\036\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\001\002\000" +
    "\006\004\317\046\320\001\002\000\024\003\161\005\307" +
    "\036\033\040\164\041\153\042\163\043\165\044\155\045" +
    "\162\001\002\000\006\004\310\046\311\001\002\000\004" +
    "\032\315\001\002\000\004\004\312\001\002\000\004\032" +
    "\313\001\002\000\004\005\314\001\002\000\012\003\uffd4" +
    "\004\uffd4\012\uffd4\061\uffd4\001\002\000\004\005\316\001" +
    "\002\000\012\003\uffd5\004\uffd5\012\uffd5\061\uffd5\001\002" +
    "\000\004\032\324\001\002\000\004\004\321\001\002\000" +
    "\004\032\322\001\002\000\004\005\323\001\002\000\012" +
    "\003\uffd6\004\uffd6\012\uffd6\061\uffd6\001\002\000\004\005" +
    "\325\001\002\000\012\003\uffd7\004\uffd7\012\uffd7\061\uffd7" +
    "\001\002\000\004\004\ufffa\001\002\000\012\003\114\004" +
    "\341\012\117\061\112\001\002\000\024\003\161\005\331" +
    "\036\033\040\164\041\153\042\163\043\165\044\155\045" +
    "\162\001\002\000\012\003\114\004\332\012\117\061\112" +
    "\001\002\000\020\027\146\030\337\031\150\033\143\047" +
    "\145\051\151\062\144\001\002\000\012\003\114\004\334" +
    "\012\140\061\135\001\002\000\020\027\146\030\335\031" +
    "\150\033\143\047\145\051\151\062\144\001\002\000\004" +
    "\005\336\001\002\000\012\003\uffd9\004\uffd9\012\uffd9\061" +
    "\uffd9\001\002\000\004\005\340\001\002\000\012\003\uffdb" +
    "\004\uffdb\012\uffdb\061\uffdb\001\002\000\020\027\146\030" +
    "\346\031\150\033\143\047\145\051\151\062\144\001\002" +
    "\000\012\003\114\004\343\012\140\061\135\001\002\000" +
    "\020\027\146\030\344\031\150\033\143\047\145\051\151" +
    "\062\144\001\002\000\004\005\345\001\002\000\012\003" +
    "\uffd8\004\uffd8\012\uffd8\061\uffd8\001\002\000\004\005\347" +
    "\001\002\000\012\003\uffda\004\uffda\012\uffda\061\uffda\001" +
    "\002\000\006\004\362\037\052\001\002\000\024\003\161" +
    "\005\352\036\033\040\164\041\153\042\163\043\165\044" +
    "\155\045\162\001\002\000\006\004\353\037\052\001\002" +
    "\000\004\050\360\001\002\000\006\004\355\037\055\001" +
    "\002\000\004\050\356\001\002\000\004\005\357\001\002" +
    "\000\012\003\uffcf\004\uffcf\012\uffcf\061\uffcf\001\002\000" +
    "\004\005\361\001\002\000\012\003\uffd1\004\uffd1\012\uffd1" +
    "\061\uffd1\001\002\000\004\050\367\001\002\000\006\004" +
    "\364\037\055\001\002\000\004\050\365\001\002\000\004" +
    "\005\366\001\002\000\012\003\uffd0\004\uffd0\012\uffd0\061" +
    "\uffd0\001\002\000\004\005\370\001\002\000\012\003\uffd2" +
    "\004\uffd2\012\uffd2\061\uffd2\001\002\000\006\004\u0103\037" +
    "\052\001\002\000\024\003\161\005\373\036\033\040\164" +
    "\041\153\042\163\043\165\044\155\045\162\001\002\000" +
    "\006\004\374\037\052\001\002\000\004\063\u0101\001\002" +
    "\000\006\004\376\037\055\001\002\000\004\063\377\001" +
    "\002\000\004\005\u0100\001\002\000\012\003\uffb0\004\uffb0" +
    "\012\uffb0\061\uffb0\001\002\000\004\005\u0102\001\002\000" +
    "\012\003\uffb2\004\uffb2\012\uffb2\061\uffb2\001\002\000\004" +
    "\063\u0108\001\002\000\006\004\u0105\037\055\001\002\000" +
    "\004\063\u0106\001\002\000\004\005\u0107\001\002\000\012" +
    "\003\uffb1\004\uffb1\012\uffb1\061\uffb1\001\002\000\004\005" +
    "\u0109\001\002\000\012\003\uffb3\004\uffb3\012\uffb3\061\uffb3" +
    "\001\002\000\024\003\161\005\u010b\036\033\040\164\041" +
    "\153\042\163\043\165\044\155\045\162\001\002\000\006" +
    "\004\u010c\037\052\001\002\000\004\034\u0111\001\002\000" +
    "\006\004\u010e\037\055\001\002\000\004\034\u010f\001\002" +
    "\000\004\005\u0110\001\002\000\012\003\uffcc\004\uffcc\012" +
    "\uffcc\061\uffcc\001\002\000\004\005\u0112\001\002\000\012" +
    "\003\uffcd\004\uffcd\012\uffcd\061\uffcd\001\002\000\004\005" +
    "\u0114\001\002\000\004\004\ufff9\001\002\000\004\011\u0116" +
    "\001\002\000\004\007\u0117\001\002\000\004\005\uffae\001" +
    "\002\000\004\005\uffac\001\002\000\004\005\u011a\001\002" +
    "\000\004\004\ufff8\001\002\000\004\005\u011c\001\002\000" +
    "\006\003\ufffb\004\ufffb\001\002\000\004\005\u011e\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\006\002\005\033\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\013\001" +
    "\001\000\002\001\001\000\004\004\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\022\007\021\011" +
    "\024\012\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\060\011\062\012\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\043\001\001\000\002\001\001\000\004\010" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\114\017\112\021\117\022\106\023\110" +
    "\024\115\032\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\135" +
    "\021\140\022\131\023\133\024\136\032\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\151\015\153\016\155\020\u0109\001\001\000" +
    "\012\010\151\015\153\016\155\020\371\001\001\000\012" +
    "\010\151\015\153\016\155\020\350\001\001\000\012\010" +
    "\151\015\153\016\155\020\327\001\001\000\002\001\001" +
    "\000\012\010\151\015\153\016\155\020\305\001\001\000" +
    "\012\010\151\015\153\016\155\020\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\173\031\273\001\001" +
    "\000\010\010\166\015\167\016\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\173\031\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\202\027\205\030" +
    "\203\001\001\000\002\001\001\000\006\026\260\027\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\220\021\216\022\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\240\021\236\022\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\166\015\167\016\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\114\017\341\021\117\022\106\023\110\024\115" +
    "\032\120\001\001\000\010\010\166\015\167\016\155\001" +
    "\001\000\020\014\114\017\332\021\117\022\106\023\110" +
    "\024\115\032\120\001\001\000\002\001\001\000\016\014" +
    "\135\021\140\022\131\023\133\024\136\032\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\135\021\140\022\131\023\133\024\136\032\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\362\001" +
    "\001\000\010\010\166\015\167\016\155\001\001\000\004" +
    "\013\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0103\001" +
    "\001\000\010\010\166\015\167\016\155\001\001\000\004" +
    "\013\374\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\166\015" +
    "\167\016\155\001\001\000\004\013\u010c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ASTNodo raiz;
    int contador;
    public static ArrayList<TError> errores;
    //METODO PARA ERROR RECUPERABLE
    public void syntax_error(Symbol s)
    {
      String lexema = s.value.toString();
      int fila = s.right;
      int columna = s.left;

      System.out.println("--------------Error Sintactico Recuperado- PRINCIPAL-----------------------");
      System.out.println("Lexema: "+lexema);
      System.out.println("Fila: "+fila);
      System.out.println("Columna: "+columna);

    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      try
      {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("--------------Error Sintactico PANICO------------------------");
        System.out.println("Lexema: "+lexema);
        System.out.println("Fila: "+fila);
        System.out.println("Columna: "+columna);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR IRRECUPERABLE");
      }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TXT ::= palabra 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, pal);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TXT ::= TXT palabra 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + pal;
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NOM_A ::= alineado 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NOM_A ::= ancho 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NOM_A ::= alto 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NOM_A ::= grupo 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NOM_A ::= id 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NOM_A ::= click 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // L_ATTS ::= RUTA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // L_ATTS ::= ATRIBUTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // L_ATTS ::= L_ATTS RUTA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          padre.addHijo(h2);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // L_ATTS ::= L_ATTS ATRIBUTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          padre.addHijo(h2);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ATRIBUTO ::= error pcoma 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "ATRIBUTO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ATRIBUTO ::= NOM_A igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, h1.getEtiqueta().toUpperCase());
            parser.contador++;
            cad = cad.replace("\"","");
            ASTNodo hijo = new ASTNodo(parser.contador,cad);
            parser.contador++;
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RUTA ::= ruta igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "RUTA");
        parser.contador++;
        cad =cad.replace("\"","");
        ASTNodo nodo = new ASTNodo(parser.contador, cad);
        parser.contador++;
        padre.addHijo(nodo);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUTA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FONDO ::= error pcoma 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FONDO ::= 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FONDO ::= fondo igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            cad =cad.replace("\"","");
            ASTNodo nodo = new ASTNodo(parser.contador, cad);
            parser.contador++;
            padre.addHijo(nodo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CAJA_TEXTO ::= error finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CAJA_TEXTO ::= opentag caja_texto L_ATTS closetag TXT opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador,"CAJA_TEXTO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              ASTNodo hij = new ASTNodo(parser.contador,"TXT");
              parser.contador++;
              if(h2!=null)
              {hij.addHijo(h2);}
              padre.addHijo(hij);
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CAJA_TEXTO ::= opentag caja_texto closetag TXT opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador,"CAJA_TEXTO");
              parser.contador++;
              ASTNodo hij = new ASTNodo(parser.contador,"TXT");
              parser.contador++;
              if(h1!=null)
              {hij.addHijo(h1);}
              padre.addHijo(hij);
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CAJA_TEXTO ::= opentag caja_texto L_ATTS closetag opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CAJA_TEXTO ::= opentag caja_texto closetag opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // L_FILAS ::= FILATABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_FILAS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FILAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L_FILAS ::= L_FILAS FILATABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_FILAS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FILAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // L_CELDAS ::= C_ENCABEZADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L_CELDAS ::= CELDA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L_CELDAS ::= L_CELDAS CELDA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L_CELDAS ::= L_CELDAS C_ENCABEZADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CELDA ::= error finCt closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CELDA ::= opentag ct closetag IMAGEN opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CELDA ::= opentag ct closetag BOTON opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CELDA ::= opentag ct closetag TXT opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CELDA ::= opentag ct closetag opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CELDA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // C_ENCABEZADO ::= error finCb closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // C_ENCABEZADO ::= opentag cb closetag IMAGEN opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // C_ENCABEZADO ::= opentag cb closetag BOTON opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // C_ENCABEZADO ::= opentag cb closetag TXT opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // C_ENCABEZADO ::= opentag cb closetag opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FILATABLA ::= error finFil_t closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FILATABLA ::= opentag fil_t closetag L_CELDAS opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FILATABLA ::= opentag fil_t closetag opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TABLA ::= error finTabla closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TABLA ::= opentag tabla L_ATTS closetag L_FILAS opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TABLA ::= opentag tabla closetag L_FILAS opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TABLA ::= opentag tabla L_ATTS closetag opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TABLA ::= opentag tabla closetag opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ENLACE ::= opentag enlace L_ATTS closetag TXT opentag finEnlace closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"ENLACE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo hij = new ASTNodo(parser.contador,"TXT");
          parser.contador++;
          if(h2!=null)
          {hij.addHijo(h2);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENLACE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ENLACE ::= opentag enlace L_ATTS closetag opentag finEnlace closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"ENLACE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENLACE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BOTON ::= error finBoton closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BOTON ::= opentag boton L_ATTS closetag TXT opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {hij.addHijo(h2);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BOTON ::= opentag boton closetag TXT opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {hij.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BOTON ::= opentag boton L_ATTS closetag opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BOTON ::= opentag boton closetag opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMAGEN ::= error finImagen closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"IMAGEN");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMAGEN ::= opentag imagen L_ATTS closetag path opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          ASTNodo rut = new ASTNodo(parser.contador,"PATH");
          parser.contador++;
          ASTNodo r = new ASTNodo(parser.contador,pa);
          parser.contador++;
          rut.addHijo(r);
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(rut);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IMAGEN ::= opentag imagen L_ATTS closetag opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IMAGEN ::= opentag imagen closetag path opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          ASTNodo rut = new ASTNodo(parser.contador,"PATH");
          parser.contador++;
          ASTNodo r = new ASTNodo(parser.contador,pa);
          parser.contador++;
          rut.addHijo(r);
          padre.addHijo(rut);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IMAGEN ::= opentag imagen closetag opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"IMAGEN");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PANEL ::= opentag panel closetag L_CUERPO opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PANEL ::= opentag panel L_ATTS closetag L_CUERPO opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PANEL ::= opentag panel closetag opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PANEL ::= opentag panel L_ATTS closetag opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        //padre.addHijo(h2);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L_CUERPO ::= TABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L_CUERPO ::= ENLACE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_CUERPO ::= BOTON 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_CUERPO ::= IMAGEN 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_CUERPO ::= PANEL 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L_CUERPO ::= tTexto 
            {
              ASTNodo RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            /////////////////////////////////////////////////////////////
            ASTNodo tx = null;
            auxiliarCHTML lexer = new auxiliarCHTML(new StringReader(tex));
            CHTML.Auxiliares.parser p = new CHTML.Auxiliares.parser(lexer);
            try
            {
              p.setContador(parser.contador);
              p.parse();
              parser.contador = p.getContador()+1;
              tx = p.getRaiz();
            }
            catch(Exception ex)
            {
              System.out.println("Ocurrio un error");
            }
            /////////////////////////////////////////////////////////////
            if(tx!=null){padre.addHijo(tx);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L_CUERPO ::= tTexA 
            {
              ASTNodo RESULT =null;
		int ttexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ttexa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            /////////////////////////////////////////////////////////////
            ASTNodo tx = null;
            auxiliarCHTML lexer = new auxiliarCHTML(new StringReader(ttexa));
            CHTML.Auxiliares.parser p = new CHTML.Auxiliares.parser(lexer);
            try
            {
              p.setContador(parser.contador);
              p.parse();
              parser.contador = p.getContador()+1;
              tx = p.getRaiz();
            }
            catch(Exception ex)
            {
              System.out.println("Ocurrio un error");
            }
            /////////////////////////////////////////////////////////////
            if(tx!=null){padre.addHijo(tx);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L_CUERPO ::= CAJA_TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_CUERPO ::= L_CUERPO CAJA_TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_CUERPO ::= L_CUERPO tTexA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ttexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ttexa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            ///////////////////////////////////////////////////////////////
            ASTNodo tx=null;
            auxiliarCHTML lexer = new auxiliarCHTML(new StringReader(ttexa));
            CHTML.Auxiliares.parser p = new CHTML.Auxiliares.parser(lexer);
            try
            {
              p.setContador(parser.contador);
              p.parse();
              parser.contador = p.getContador()+1;
              tx = p.getRaiz();
            }
            catch(Exception ex)
            {
              System.out.println("Ocurrio un error");
            }
            ///////////////////////////////////////////////////////////////
            padre.addHijo(h1);
            if(tx!=null){padre.addHijo(tx);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_CUERPO ::= L_CUERPO TABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_CUERPO ::= L_CUERPO ENLACE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_CUERPO ::= L_CUERPO BOTON 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_CUERPO ::= L_CUERPO IMAGEN 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_CUERPO ::= L_CUERPO tTexto 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            //////////////////////////////////////////////////////////////
            ASTNodo tx=null;
            auxiliarCHTML lexer = new auxiliarCHTML(new StringReader(tex));
            CHTML.Auxiliares.parser p = new CHTML.Auxiliares.parser(lexer);
            try
            {
              p.setContador(parser.contador);
              p.parse();
              parser.contador = p.getContador()+1;
              tx = p.getRaiz();
            }
            catch(Exception ex)
            {
              System.out.println("Ocurrio un error");
            }
            /////////////////////////////////////////////////////////////
            padre.addHijo(h1);
            if(tx!=null){padre.addHijo(tx);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L_CUERPO ::= L_CUERPO PANEL 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TITULO ::= error finTitulo closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"TITULO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TITULO ::= opentag titulo closetag TXT opentag finTitulo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TITULO");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          hij.addHijo(h1);
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CCSS ::= error finCcss closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CCSS");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CCSS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CCSS ::= opentag ccss RUTA closetag opentag finCcss closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CCSS");
        parser.contador++;
        padre.addHijo(h1);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CCSS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CJS ::= error finCjs closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CJS");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CJS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CJS ::= opentag cjs RUTA closetag opentag finCjs closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CJS");
        parser.contador++;
        padre.addHijo(h1);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CJS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // L_ENCABEZADO ::= TITULO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L_ENCABEZADO ::= CCSS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_ENCABEZADO ::= CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_ENCABEZADO ::= L_ENCABEZADO CCSS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L_ENCABEZADO ::= L_ENCABEZADO CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_ENCABEZADO ::= L_ENCABEZADO TITULO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador,"L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= error finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= opentag cuerpo FONDO closetag opentag finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            ASTNodo nodo = new ASTNodo(parser.contador, "cuerpo");
            parser.contador++;
            ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-cuerpo");
            parser.contador++;
            padre.addHijo(nodo);
            nodo.addHijo(h1);
            padre.addHijo(nodo2);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= opentag cuerpo FONDO closetag L_CUERPO opentag finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            ASTNodo nodo = new ASTNodo(parser.contador, "cuerpo");
            parser.contador++;
            ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-cuerpo");
            parser.contador++;
            padre.addHijo(nodo);
            nodo.addHijo(h1);
            padre.addHijo(h2);
            padre.addHijo(nodo2);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENCABEZADO ::= error finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENCABEZADO ::= opentag encabezado closetag opentag finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  ASTNodo nodo = new ASTNodo(parser.contador, "encabezado");
                  parser.contador++;
                  ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-encabezado");
                  parser.contador++;
                  padre.addHijo(nodo);
                  padre.addHijo(nodo2);
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= opentag encabezado closetag L_ENCABEZADO opentag finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  ASTNodo nodo = new ASTNodo(parser.contador, "encabezado");
                  parser.contador++;
                  ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-encabezado");
                  parser.contador++;
                  padre.addHijo(nodo);
                  padre.addHijo(h1);
                  padre.addHijo(nodo2);
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_CHTML ::= error finChtml closetag 
            {
              ASTNodo RESULT =null;
		
                  //DESCARTO PORQUE EXISTE UN ERROR
                  System.out.println("Error en la produccion de INICIO_CHTML");
                  ASTNodo padre = new ASTNodo(parser.contador, "INICIO_CHTML");
                  parser.contador++;
                  parser.raiz = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CHTML",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_CHTML ::= NT$0 opentag chtml closetag ENCABEZADO CUERPO opentag finChtml closetag 
            {
              ASTNodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ASTNodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador,"INICIO_CHTML");
                  parser.contador++;
                  ASTNodo nodo = new ASTNodo(parser.contador, "chtml");
                  parser.contador++;
                  ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-chtml");
                  padre.addHijo(nodo);
                  padre.addHijo(h1);
                  padre.addHijo(h2);
                  padre.addHijo(nodo2);
                  parser.raiz = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CHTML",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              ASTNodo RESULT =null;
 parser.errores = new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo start_val = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

