
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 21 18:21:12 CST 2018
//----------------------------------------------------

package CHTML;

import java_cup.runtime.Symbol;
import AST.*;
import java.util.ArrayList;
import CHTML.Auxiliares.*;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 21 18:21:12 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\004\000\002\040\002\000\002\002" +
    "\013\000\002\002\005\000\002\003\011\000\002\003\010" +
    "\000\002\003\005\000\002\004\012\000\002\004\011\000" +
    "\002\004\005\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\011\000\002\007\005\000\002\011\011" +
    "\000\002\011\005\000\002\012\011\000\002\012\012\000" +
    "\002\012\005\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\014\011\000\002\014\010\000\002\014\012\000" +
    "\002\014\011\000\002\021\010\000\002\021\011\000\002" +
    "\021\011\000\002\021\012\000\002\021\005\000\002\022" +
    "\010\000\002\022\011\000\002\022\011\000\002\022\012" +
    "\000\002\022\005\000\002\023\011\000\002\023\012\000" +
    "\002\024\010\000\002\024\011\000\002\024\011\000\002" +
    "\024\012\000\002\024\005\000\002\025\010\000\002\025" +
    "\011\000\002\025\011\000\002\025\012\000\002\025\005" +
    "\000\002\026\010\000\002\026\012\000\002\026\011\000" +
    "\002\026\011\000\002\026\012\000\002\026\011\000\002" +
    "\026\012\000\002\026\011\000\002\026\005\000\002\027" +
    "\010\000\002\027\011\000\002\027\012\000\002\027\011" +
    "\000\002\027\012\000\002\027\011\000\002\027\012\000" +
    "\002\027\011\000\002\027\005\000\002\030\004\000\002" +
    "\030\004\000\002\030\003\000\002\030\003\000\002\031" +
    "\004\000\002\031\003\000\002\032\010\000\002\032\011" +
    "\000\002\032\011\000\002\032\012\000\002\032\005\000" +
    "\002\033\010\000\002\033\011\000\002\033\011\000\002" +
    "\033\012\000\002\033\005\000\002\034\010\000\002\034" +
    "\011\000\002\034\014\000\002\034\015\000\002\034\005" +
    "\000\002\035\004\000\002\035\003\000\002\036\010\000" +
    "\002\036\011\000\002\036\011\000\002\036\012\000\002" +
    "\036\005\000\002\037\005\000\002\037\005\000\002\005" +
    "\006\000\002\005\002\000\002\005\004\000\002\010\006" +
    "\000\002\015\006\000\002\015\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\003\000\002\020\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\013\004" +
    "\000\002\013\004\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\006\003\004\004\000\001\002\000\004\014" +
    "\u019c\001\002\000\004\004\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\013\011\001" +
    "\002\000\004\005\012\001\002\000\006\003\013\004\015" +
    "\001\002\000\004\016\u019a\001\002\000\006\003\124\004" +
    "\125\001\002\000\004\015\016\001\002\000\004\005\017" +
    "\001\002\000\006\003\021\004\024\001\002\000\006\003" +
    "\ufff2\004\ufff2\001\002\000\010\022\117\024\120\026\116" +
    "\001\002\000\006\003\ufff4\004\ufff4\001\002\000\006\003" +
    "\021\004\112\001\002\000\012\016\030\021\031\023\027" +
    "\025\026\001\002\000\006\003\ufff3\004\ufff3\001\002\000" +
    "\024\003\060\005\056\037\033\041\063\042\052\043\062" +
    "\044\064\045\054\046\061\001\002\000\004\037\033\001" +
    "\002\000\004\005\043\001\002\000\004\037\033\001\002" +
    "\000\004\005\037\001\002\000\004\006\034\001\002\000" +
    "\004\011\035\001\002\000\004\007\036\001\002\000\024" +
    "\003\uff87\005\uff87\037\uff87\041\uff87\042\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\001\002\000\004\004\040\001\002" +
    "\000\004\022\041\001\002\000\004\005\042\001\002\000" +
    "\006\003\ufff1\004\ufff1\001\002\000\006\003\ufffc\004\ufffc" +
    "\001\002\000\004\005\045\001\002\000\004\004\046\001" +
    "\002\000\004\024\047\001\002\000\004\005\050\001\002" +
    "\000\006\003\uffef\004\uffef\001\002\000\024\003\uff81\005" +
    "\uff81\037\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81" +
    "\046\uff81\001\002\000\004\006\uff7f\001\002\000\024\003" +
    "\uff82\005\uff82\037\uff82\041\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\001\002\000\004\006\uff7c\001\002\000" +
    "\004\006\105\001\002\000\006\040\072\074\071\001\002" +
    "\000\024\003\060\005\070\037\033\041\063\042\052\043" +
    "\062\044\064\045\054\046\061\001\002\000\004\007\065" +
    "\001\002\000\004\006\uff7b\001\002\000\004\006\uff7e\001" +
    "\002\000\004\006\uff80\001\002\000\004\006\uff7d\001\002" +
    "\000\024\003\uff85\005\uff85\037\uff85\041\uff85\042\uff85\043" +
    "\uff85\044\uff85\045\uff85\046\uff85\001\002\000\024\003\uff83" +
    "\005\uff83\037\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\001\002\000\024\003\uff84\005\uff84\037\uff84" +
    "\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\001" +
    "\002\000\006\040\072\074\071\001\002\000\010\004\uff78" +
    "\040\uff78\074\uff78\001\002\000\010\004\uff77\040\uff77\074" +
    "\uff77\001\002\000\010\004\075\040\076\074\074\001\002" +
    "\000\010\004\uff79\040\uff79\074\uff79\001\002\000\004\026" +
    "\077\001\002\000\010\004\uff7a\040\uff7a\074\uff7a\001\002" +
    "\000\004\005\100\001\002\000\006\003\uffec\004\uffec\001" +
    "\002\000\010\004\102\040\076\074\074\001\002\000\004" +
    "\026\103\001\002\000\004\005\104\001\002\000\006\003" +
    "\uffed\004\uffed\001\002\000\004\011\106\001\002\000\004" +
    "\007\107\001\002\000\024\003\uff86\005\uff86\037\uff86\041" +
    "\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\001\002" +
    "\000\006\003\ufff7\004\ufff7\001\002\000\006\003\ufff6\004" +
    "\ufff6\001\002\000\012\016\114\021\031\023\027\025\026" +
    "\001\002\000\006\003\ufff5\004\ufff5\001\002\000\004\005" +
    "\115\001\002\000\006\003\ufffd\004\ufffd\001\002\000\004" +
    "\005\123\001\002\000\004\005\122\001\002\000\004\005" +
    "\121\001\002\000\006\003\uffee\004\uffee\001\002\000\006" +
    "\003\ufff0\004\ufff0\001\002\000\006\003\uffeb\004\uffeb\001" +
    "\002\000\004\020\u0198\001\002\000\004\017\132\001\002" +
    "\000\004\004\127\001\002\000\004\014\130\001\002\000" +
    "\004\005\131\001\002\000\004\002\uffff\001\002\000\010" +
    "\003\133\005\uff89\036\134\001\002\000\004\007\u0197\001" +
    "\002\000\004\006\u0194\001\002\000\004\005\136\001\002" +
    "\000\012\003\147\004\141\012\152\064\144\001\002\000" +
    "\012\003\uffd7\004\uffd7\012\uffd7\064\uffd7\001\002\000\012" +
    "\003\uffde\004\uffde\012\uffde\064\uffde\001\002\000\026\020" +
    "\u0192\027\207\031\220\033\213\035\216\050\212\052\210" +
    "\054\217\065\214\067\211\001\002\000\012\003\uffd6\004" +
    "\uffd6\012\uffd6\064\uffd6\001\002\000\012\003\uffdd\004\uffdd" +
    "\012\uffdd\064\uffdd\001\002\000\012\003\uffdb\004\uffdb\012" +
    "\uffdb\064\uffdb\001\002\000\012\003\147\004\175\012\204" +
    "\064\200\001\002\000\012\003\uffdf\004\uffdf\012\uffdf\064" +
    "\uffdf\001\002\000\020\032\157\035\162\051\156\053\155" +
    "\055\163\066\160\070\161\001\002\000\012\003\uffd9\004" +
    "\uffd9\012\uffd9\064\uffd9\001\002\000\012\003\uffd5\004\uffd5" +
    "\012\uffd5\064\uffd5\001\002\000\012\003\uffda\004\uffda\012" +
    "\uffda\064\uffda\001\002\000\012\003\uffd8\004\uffd8\012\uffd8" +
    "\064\uffd8\001\002\000\012\003\uffdc\004\uffdc\012\uffdc\064" +
    "\uffdc\001\002\000\004\005\172\001\002\000\004\005\171" +
    "\001\002\000\004\005\170\001\002\000\004\005\167\001" +
    "\002\000\004\005\166\001\002\000\004\005\165\001\002" +
    "\000\004\005\164\001\002\000\012\003\uff8d\004\uff8d\012" +
    "\uff8d\064\uff8d\001\002\000\012\003\uff8b\004\uff8b\012\uff8b" +
    "\064\uff8b\001\002\000\012\003\uff99\004\uff99\012\uff99\064" +
    "\uff99\001\002\000\012\003\uff9e\004\uff9e\012\uff9e\064\uff9e" +
    "\001\002\000\012\003\uffcc\004\uffcc\012\uffcc\064\uffcc\001" +
    "\002\000\012\003\uffc7\004\uffc7\012\uffc7\064\uffc7\001\002" +
    "\000\012\003\uffc0\004\uffc0\012\uffc0\064\uffc0\001\002\000" +
    "\012\003\uffe7\004\uffe7\012\uffe7\064\uffe7\001\002\000\012" +
    "\003\uffe2\004\uffe2\012\uffe2\064\uffe2\001\002\000\026\020" +
    "\215\027\207\031\220\033\213\035\216\050\212\052\210" +
    "\054\217\065\214\067\211\001\002\000\012\003\uffe6\004" +
    "\uffe6\012\uffe6\064\uffe6\001\002\000\012\003\uffe1\004\uffe1" +
    "\012\uffe1\064\uffe1\001\002\000\012\003\uffe4\004\uffe4\012" +
    "\uffe4\064\uffe4\001\002\000\012\003\uffe0\004\uffe0\012\uffe0" +
    "\064\uffe0\001\002\000\012\003\uffea\004\uffea\012\uffea\064" +
    "\uffea\001\002\000\012\003\uffe5\004\uffe5\012\uffe5\064\uffe5" +
    "\001\002\000\012\003\uffe9\004\uffe9\012\uffe9\064\uffe9\001" +
    "\002\000\012\003\uffe8\004\uffe8\012\uffe8\064\uffe8\001\002" +
    "\000\012\003\uffe3\004\uffe3\012\uffe3\064\uffe3\001\002\000" +
    "\024\003\060\005\u0181\037\033\041\063\042\052\043\062" +
    "\044\064\045\054\046\061\001\002\000\024\003\060\005" +
    "\u010b\037\033\041\063\042\052\043\062\044\064\045\054" +
    "\046\061\001\002\000\024\003\060\005\340\037\033\041" +
    "\063\042\052\043\062\044\064\045\054\046\061\001\002" +
    "\000\024\003\060\005\317\037\033\041\063\042\052\043" +
    "\062\044\064\045\054\046\061\001\002\000\022\003\060" +
    "\037\033\041\063\042\052\043\062\044\064\045\054\046" +
    "\061\001\002\000\024\003\060\005\265\037\033\041\063" +
    "\042\052\043\062\044\064\045\054\046\061\001\002\000" +
    "\004\005\264\001\002\000\004\005\263\001\002\000\024" +
    "\003\060\005\242\037\033\041\063\042\052\043\062\044" +
    "\064\045\054\046\061\001\002\000\024\003\060\005\221" +
    "\037\033\041\063\042\052\043\062\044\064\045\054\046" +
    "\061\001\002\000\006\004\233\047\234\001\002\000\024" +
    "\003\060\005\223\037\033\041\063\042\052\043\062\044" +
    "\064\045\054\046\061\001\002\000\006\004\224\047\225" +
    "\001\002\000\004\032\231\001\002\000\004\004\226\001" +
    "\002\000\004\032\227\001\002\000\004\005\230\001\002" +
    "\000\012\003\uffcd\004\uffcd\012\uffcd\064\uffcd\001\002\000" +
    "\004\005\232\001\002\000\012\003\uffce\004\uffce\012\uffce" +
    "\064\uffce\001\002\000\004\032\240\001\002\000\004\004" +
    "\235\001\002\000\004\032\236\001\002\000\004\005\237" +
    "\001\002\000\012\003\uffcf\004\uffcf\012\uffcf\064\uffcf\001" +
    "\002\000\004\005\241\001\002\000\012\003\uffd0\004\uffd0" +
    "\012\uffd0\064\uffd0\001\002\000\006\004\255\074\254\001" +
    "\002\000\024\003\060\005\244\037\033\041\063\042\052" +
    "\043\062\044\064\045\054\046\061\001\002\000\006\004" +
    "\246\074\245\001\002\000\004\004\251\001\002\000\004" +
    "\055\247\001\002\000\004\005\250\001\002\000\012\003" +
    "\uff90\004\uff90\012\uff90\064\uff90\001\002\000\004\055\252" +
    "\001\002\000\004\005\253\001\002\000\012\003\uff8e\004" +
    "\uff8e\012\uff8e\064\uff8e\001\002\000\004\004\260\001\002" +
    "\000\004\055\256\001\002\000\004\005\257\001\002\000" +
    "\012\003\uff91\004\uff91\012\uff91\064\uff91\001\002\000\004" +
    "\055\261\001\002\000\004\005\262\001\002\000\012\003" +
    "\uff8f\004\uff8f\012\uff8f\064\uff8f\001\002\000\012\003\uff8c" +
    "\004\uff8c\012\uff8c\064\uff8c\001\002\000\004\004\ufffa\001" +
    "\002\000\010\004\277\040\072\074\071\001\002\000\024" +
    "\003\060\005\267\037\033\041\063\042\052\043\062\044" +
    "\064\045\054\046\061\001\002\000\010\004\270\040\072" +
    "\074\071\001\002\000\004\066\275\001\002\000\010\004" +
    "\272\040\076\074\074\001\002\000\004\066\273\001\002" +
    "\000\004\005\274\001\002\000\012\003\uff9f\004\uff9f\012" +
    "\uff9f\064\uff9f\001\002\000\004\005\276\001\002\000\012" +
    "\003\uffa1\004\uffa1\012\uffa1\064\uffa1\001\002\000\004\066" +
    "\304\001\002\000\010\004\301\040\076\074\074\001\002" +
    "\000\004\066\302\001\002\000\004\005\303\001\002\000" +
    "\012\003\uffa0\004\uffa0\012\uffa0\064\uffa0\001\002\000\004" +
    "\005\305\001\002\000\012\003\uffa2\004\uffa2\012\uffa2\064" +
    "\uffa2\001\002\000\024\003\060\005\307\037\033\041\063" +
    "\042\052\043\062\044\064\045\054\046\061\001\002\000" +
    "\010\004\310\040\072\074\071\001\002\000\004\034\315" +
    "\001\002\000\010\004\312\040\076\074\074\001\002\000" +
    "\004\034\313\001\002\000\004\005\314\001\002\000\012" +
    "\003\uffc5\004\uffc5\012\uffc5\064\uffc5\001\002\000\004\005" +
    "\316\001\002\000\012\003\uffc6\004\uffc6\012\uffc6\064\uffc6" +
    "\001\002\000\010\004\331\040\072\074\071\001\002\000" +
    "\024\003\060\005\321\037\033\041\063\042\052\043\062" +
    "\044\064\045\054\046\061\001\002\000\010\004\322\040" +
    "\072\074\071\001\002\000\004\051\327\001\002\000\010" +
    "\004\324\040\076\074\074\001\002\000\004\051\325\001" +
    "\002\000\004\005\326\001\002\000\012\003\uffc8\004\uffc8" +
    "\012\uffc8\064\uffc8\001\002\000\004\005\330\001\002\000" +
    "\012\003\uffca\004\uffca\012\uffca\064\uffca\001\002\000\004" +
    "\051\336\001\002\000\010\004\333\040\076\074\074\001" +
    "\002\000\004\051\334\001\002\000\004\005\335\001\002" +
    "\000\012\003\uffc9\004\uffc9\012\uffc9\064\uffc9\001\002\000" +
    "\004\005\337\001\002\000\012\003\uffcb\004\uffcb\012\uffcb" +
    "\064\uffcb\001\002\000\006\003\344\004\u0105\001\002\000" +
    "\024\003\060\005\342\037\033\041\063\042\052\043\062" +
    "\044\064\045\054\046\061\001\002\000\006\003\344\004" +
    "\346\001\002\000\006\003\uff92\004\uff92\001\002\000\004" +
    "\072\u0102\001\002\000\006\003\344\004\377\001\002\000" +
    "\006\070\350\071\347\001\002\000\006\005\353\073\352" +
    "\001\002\000\004\005\351\001\002\000\012\003\uff9c\004" +
    "\uff9c\012\uff9c\064\uff9c\001\002\000\004\006\363\001\002" +
    "\000\010\004\354\040\072\074\071\001\002\000\004\072" +
    "\361\001\002\000\010\004\356\040\076\074\074\001\002" +
    "\000\004\072\357\001\002\000\004\005\360\001\002\000" +
    "\006\003\uff97\004\uff97\001\002\000\004\005\362\001\002" +
    "\000\006\003\uff98\004\uff98\001\002\000\004\011\364\001" +
    "\002\000\004\007\365\001\002\000\004\005\366\001\002" +
    "\000\010\004\367\040\072\074\071\001\002\000\004\072" +
    "\374\001\002\000\010\004\371\040\076\074\074\001\002" +
    "\000\004\072\372\001\002\000\004\005\373\001\002\000" +
    "\006\003\uff95\004\uff95\001\002\000\004\005\375\001\002" +
    "\000\006\003\uff96\004\uff96\001\002\000\006\003\uff93\004" +
    "\uff93\001\002\000\006\070\u0100\071\347\001\002\000\004" +
    "\005\u0101\001\002\000\012\003\uff9a\004\uff9a\012\uff9a\064" +
    "\uff9a\001\002\000\004\005\u0103\001\002\000\006\003\uff94" +
    "\004\uff94\001\002\000\006\003\344\004\u0108\001\002\000" +
    "\006\070\u0106\071\347\001\002\000\004\005\u0107\001\002" +
    "\000\012\003\uff9d\004\uff9d\012\uff9d\064\uff9d\001\002\000" +
    "\006\070\u0109\071\347\001\002\000\004\005\u010a\001\002" +
    "\000\012\003\uff9b\004\uff9b\012\uff9b\064\uff9b\001\002\000" +
    "\006\003\u010e\004\u017a\001\002\000\024\003\060\005\u010d" +
    "\037\033\041\063\042\052\043\062\044\064\045\054\046" +
    "\061\001\002\000\006\003\u010e\004\u010f\001\002\000\004" +
    "\057\u0178\001\002\000\006\053\u0176\056\u0115\001\002\000" +
    "\006\003\uffa3\004\uffa3\001\002\000\006\003\u010e\004\u0112" +
    "\001\002\000\006\053\u0114\056\u0115\001\002\000\006\003" +
    "\uffa4\004\uffa4\001\002\000\004\005\u0175\001\002\000\024" +
    "\003\060\005\u0116\037\033\041\063\042\052\043\062\044" +
    "\064\045\054\046\061\001\002\000\006\003\u011b\004\u016f" +
    "\001\002\000\024\003\060\005\u0118\037\033\041\063\042" +
    "\052\043\062\044\064\045\054\046\061\001\002\000\006" +
    "\003\u011b\004\u011d\001\002\000\006\003\u011b\004\u016b\001" +
    "\002\000\006\003\uffa5\004\uffa5\001\002\000\006\061\u0165" +
    "\063\u0166\001\002\000\006\003\uffa6\004\uffa6\001\002\000" +
    "\010\057\u0120\060\u011e\062\u011f\001\002\000\024\003\060" +
    "\005\u0144\037\033\041\063\042\052\043\062\044\064\045" +
    "\054\046\061\001\002\000\024\003\060\005\u0122\037\033" +
    "\041\063\042\052\043\062\044\064\045\054\046\061\001" +
    "\002\000\004\005\u0121\001\002\000\006\003\uffbd\004\uffbd" +
    "\001\002\000\012\003\u0126\004\u0137\040\072\074\071\001" +
    "\002\000\024\003\060\005\u0124\037\033\041\063\042\052" +
    "\043\062\044\064\045\054\046\061\001\002\000\012\003" +
    "\u0126\004\u0128\040\072\074\071\001\002\000\004\004\u0132" +
    "\001\002\000\006\032\157\051\156\001\002\000\004\004" +
    "\u012f\001\002\000\010\031\220\050\212\063\u012d\001\002" +
    "\000\010\004\u012a\040\076\074\074\001\002\000\004\063" +
    "\u012b\001\002\000\004\005\u012c\001\002\000\006\003\uffaf" +
    "\004\uffaf\001\002\000\004\005\u012e\001\002\000\006\003" +
    "\uffb0\004\uffb0\001\002\000\004\063\u0130\001\002\000\004" +
    "\005\u0131\001\002\000\006\003\uffab\004\uffab\001\002\000" +
    "\004\063\u0133\001\002\000\004\005\u0134\001\002\000\006" +
    "\003\uffad\004\uffad\001\002\000\004\004\u0141\001\002\000" +
    "\004\004\u013e\001\002\000\010\031\220\050\212\063\u013c" +
    "\001\002\000\010\004\u0139\040\076\074\074\001\002\000" +
    "\004\063\u013a\001\002\000\004\005\u013b\001\002\000\006" +
    "\003\uffae\004\uffae\001\002\000\004\005\u013d\001\002\000" +
    "\006\003\uffb1\004\uffb1\001\002\000\004\063\u013f\001\002" +
    "\000\004\005\u0140\001\002\000\006\003\uffaa\004\uffaa\001" +
    "\002\000\004\063\u0142\001\002\000\004\005\u0143\001\002" +
    "\000\006\003\uffac\004\uffac\001\002\000\012\003\u0126\004" +
    "\u0158\040\072\074\071\001\002\000\024\003\060\005\u0146" +
    "\037\033\041\063\042\052\043\062\044\064\045\054\046" +
    "\061\001\002\000\012\003\u0126\004\u0149\040\072\074\071" +
    "\001\002\000\004\004\u0153\001\002\000\004\004\u0150\001" +
    "\002\000\010\031\220\050\212\061\u014e\001\002\000\010" +
    "\004\u014b\040\076\074\074\001\002\000\004\061\u014c\001" +
    "\002\000\004\005\u014d\001\002\000\006\003\uffb9\004\uffb9" +
    "\001\002\000\004\005\u014f\001\002\000\006\003\uffb8\004" +
    "\uffb8\001\002\000\004\061\u0151\001\002\000\004\005\u0152" +
    "\001\002\000\006\003\uffb4\004\uffb4\001\002\000\004\061" +
    "\u0154\001\002\000\004\005\u0155\001\002\000\006\003\uffb6" +
    "\004\uffb6\001\002\000\004\004\u0162\001\002\000\004\004" +
    "\u015f\001\002\000\010\031\220\050\212\061\u015d\001\002" +
    "\000\010\004\u015a\040\076\074\074\001\002\000\004\061" +
    "\u015b\001\002\000\004\005\u015c\001\002\000\006\003\uffb7" +
    "\004\uffb7\001\002\000\004\005\u015e\001\002\000\006\003" +
    "\uffba\004\uffba\001\002\000\004\061\u0160\001\002\000\004" +
    "\005\u0161\001\002\000\006\003\uffb3\004\uffb3\001\002\000" +
    "\004\061\u0163\001\002\000\004\005\u0164\001\002\000\006" +
    "\003\uffb5\004\uffb5\001\002\000\004\005\u0168\001\002\000" +
    "\004\005\u0167\001\002\000\006\003\uffa9\004\uffa9\001\002" +
    "\000\006\003\uffb2\004\uffb2\001\002\000\006\003\uffa8\004" +
    "\uffa8\001\002\000\006\003\uffa7\004\uffa7\001\002\000\010" +
    "\057\u016c\060\u011e\062\u011f\001\002\000\004\005\u016d\001" +
    "\002\000\006\003\uffbc\004\uffbc\001\002\000\006\003\u011b" +
    "\004\u0172\001\002\000\010\057\u0170\060\u011e\062\u011f\001" +
    "\002\000\004\005\u0171\001\002\000\006\003\uffbf\004\uffbf" +
    "\001\002\000\010\057\u0173\060\u011e\062\u011f\001\002\000" +
    "\004\005\u0174\001\002\000\006\003\uffbe\004\uffbe\001\002" +
    "\000\012\003\uffc1\004\uffc1\012\uffc1\064\uffc1\001\002\000" +
    "\004\005\u0177\001\002\000\012\003\uffc3\004\uffc3\012\uffc3" +
    "\064\uffc3\001\002\000\004\005\u0179\001\002\000\006\003" +
    "\uffbb\004\uffbb\001\002\000\006\053\u017f\056\u0115\001\002" +
    "\000\006\003\u010e\004\u017c\001\002\000\006\053\u017d\056" +
    "\u0115\001\002\000\004\005\u017e\001\002\000\012\003\uffc2" +
    "\004\uffc2\012\uffc2\064\uffc2\001\002\000\004\005\u0180\001" +
    "\002\000\012\003\uffc4\004\uffc4\012\uffc4\064\uffc4\001\002" +
    "\000\012\003\147\004\u018b\012\152\064\144\001\002\000" +
    "\024\003\060\005\u0183\037\033\041\063\042\052\043\062" +
    "\044\064\045\054\046\061\001\002\000\012\003\147\004" +
    "\u0184\012\152\064\144\001\002\000\026\027\207\030\u0189" +
    "\031\220\033\213\035\216\050\212\052\210\054\217\065" +
    "\214\067\211\001\002\000\012\003\147\004\u0186\012\204" +
    "\064\200\001\002\000\026\027\207\030\u0187\031\220\033" +
    "\213\035\216\050\212\052\210\054\217\065\214\067\211" +
    "\001\002\000\004\005\u0188\001\002\000\012\003\uffd2\004" +
    "\uffd2\012\uffd2\064\uffd2\001\002\000\004\005\u018a\001\002" +
    "\000\012\003\uffd4\004\uffd4\012\uffd4\064\uffd4\001\002\000" +
    "\026\027\207\030\u0190\031\220\033\213\035\216\050\212" +
    "\052\210\054\217\065\214\067\211\001\002\000\012\003" +
    "\147\004\u018d\012\204\064\200\001\002\000\026\027\207" +
    "\030\u018e\031\220\033\213\035\216\050\212\052\210\054" +
    "\217\065\214\067\211\001\002\000\004\005\u018f\001\002" +
    "\000\012\003\uffd1\004\uffd1\012\uffd1\064\uffd1\001\002\000" +
    "\004\005\u0191\001\002\000\012\003\uffd3\004\uffd3\012\uffd3" +
    "\064\uffd3\001\002\000\004\005\u0193\001\002\000\004\004" +
    "\ufff9\001\002\000\004\011\u0195\001\002\000\004\007\u0196" +
    "\001\002\000\004\005\uff8a\001\002\000\004\005\uff88\001" +
    "\002\000\004\005\u0199\001\002\000\004\004\ufff8\001\002" +
    "\000\004\005\u019b\001\002\000\006\003\ufffb\004\ufffb\001" +
    "\002\000\004\005\u019d\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\006\002\005\040\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\013\001" +
    "\001\000\002\001\001\000\004\004\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\022\007\021\011" +
    "\024\012\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\110\011\112\012\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\050" +
    "\015\052\016\054\020\056\001\001\000\004\010\043\001" +
    "\001\000\002\001\001\000\004\010\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\100\001\001\000\010\010\065\015\066\016" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\147" +
    "\017\144\021\152\022\136\023\141\024\150\032\153\033" +
    "\137\036\142\037\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\201\021\204\022\172" +
    "\023\175\024\202\032\205\033\173\036\176\037\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\050\015\052\016\054\020\u0181" +
    "\001\001\000\012\010\050\015\052\016\054\020\u010b\001" +
    "\001\000\012\010\050\015\052\016\054\020\340\001\001" +
    "\000\012\010\050\015\052\016\054\020\317\001\001\000" +
    "\012\010\050\015\052\016\054\020\305\001\001\000\012" +
    "\010\050\015\052\016\054\020\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\050\015\052\016\054" +
    "\020\242\001\001\000\012\010\050\015\052\016\054\020" +
    "\221\001\001\000\002\001\001\000\010\010\065\015\066" +
    "\016\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\065\015\066\016\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\277\001\001\000\010\010\065" +
    "\015\066\016\054\001\001\000\004\013\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\065\015\066\016\054\001\001" +
    "\000\004\013\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\331\001" +
    "\001\000\010\010\065\015\066\016\054\001\001\000\004" +
    "\013\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\342\035" +
    "\u0103\001\001\000\010\010\065\015\066\016\054\001\001" +
    "\000\006\034\342\035\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\375\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\375\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\u010f\031\u017a" +
    "\001\001\000\010\010\065\015\066\016\054\001\001\000" +
    "\006\025\u010f\031\u0110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\050\015\052\016\054\020\u0116\001\001\000\010\026" +
    "\u0119\027\u011b\030\u016d\001\001\000\010\010\065\015\066" +
    "\016\054\001\001\000\010\026\u0119\027\u011b\030\u0118\001" +
    "\001\000\006\026\u0168\027\u0169\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\050\015\052\016\054\020\u0144\001\001\000\012" +
    "\010\050\015\052\016\054\020\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\u0137\021\u0135\022\u0134" +
    "\001\001\000\010\010\065\015\066\016\054\001\001\000" +
    "\010\013\u0128\021\u0126\022\u0124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\u0158\021\u0156\022\u0155\001\001" +
    "\000\010\010\065\015\066\016\054\001\001\000\010\013" +
    "\u0149\021\u0147\022\u0146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\u0168\027\u0169" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\147\017\u018b\021\152\022\136\023\141\024\150\032" +
    "\153\033\137\036\142\037\145\001\001\000\010\010\065" +
    "\015\066\016\054\001\001\000\026\014\147\017\u0184\021" +
    "\152\022\136\023\141\024\150\032\153\033\137\036\142" +
    "\037\145\001\001\000\002\001\001\000\024\014\201\021" +
    "\204\022\172\023\175\024\202\032\205\033\173\036\176" +
    "\037\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\201\021\204\022\172\023\175\024" +
    "\202\032\205\033\173\036\176\037\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ASTNodo raiz;
    int contador;
    public static ArrayList<TError> errores;
    //METODO PARA ERROR RECUPERABLE
    public void syntax_error(Symbol s)
    {
      String lexema = s.value.toString();
      int fila = s.right;
      int columna = s.left;

      System.out.println("--------------Error Sintactico Recuperado- PRINCIPAL-----------------------");
      System.out.println("Lexema: "+lexema);
      System.out.println("Fila: "+fila);
      System.out.println("Columna: "+columna);

    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      try
      {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("--------------Error Sintactico PANICO------------------------");
        System.out.println("Lexema: "+lexema);
        System.out.println("Fila: "+fila);
        System.out.println("Columna: "+columna);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR IRRECUPERABLE");
      }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TXT ::= palabra 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, pal);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TXT ::= entero 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, pal);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TXT ::= TXT entero 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + pal;
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TXT ::= TXT palabra 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + pal;
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NOM_A ::= alineado 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NOM_A ::= ancho 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NOM_A ::= alto 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NOM_A ::= grupo 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NOM_A ::= id 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NOM_A ::= click 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // L_ATTS ::= RUTA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // L_ATTS ::= ATRIBUTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // L_ATTS ::= L_ATTS RUTA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          padre.addHijo(h2);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // L_ATTS ::= L_ATTS ATRIBUTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          padre.addHijo(h2);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ATRIBUTO ::= error pcoma 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "ATRIBUTO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ATRIBUTO ::= NOM_A igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, h1.getEtiqueta().toUpperCase());
            parser.contador++;
            cad = cad.replace("\"","");
            ASTNodo hijo = new ASTNodo(parser.contador,cad);
            parser.contador++;
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // RUTA ::= ruta igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "RUTA");
        parser.contador++;
        cad =cad.replace("\"","");
        ASTNodo nodo = new ASTNodo(parser.contador, cad);
        parser.contador++;
        padre.addHijo(nodo);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUTA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FONDO ::= error pcoma 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FONDO ::= 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FONDO ::= fondo igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            cad =cad.replace("\"","");
            ASTNodo nodo = new ASTNodo(parser.contador, cad);
            parser.contador++;
            padre.addHijo(nodo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SALTO ::= error saltoFin closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "SALTO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALTO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SALTO ::= opentag saltoFin closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "SALTO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALTO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SPINNER ::= error finSpinner closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SPINNER ::= opentag spinner L_ATTS closetag entero opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            ASTNodo hijo = new ASTNodo(parser.contador, "CONTADOR");
            parser.contador++;
            ASTNodo con = new ASTNodo(parser.contador, cont);
            hijo.addHijo(con);
            if(h1!=null)
            {padre.addHijo(h1);}
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SPINNER ::= opentag spinner closetag entero opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            ASTNodo hijo = new ASTNodo(parser.contador, "CONTADOR");
            parser.contador++;
            ASTNodo con = new ASTNodo(parser.contador, cont);
            parser.contador++;
            hijo.addHijo(con);
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SPINNER ::= opentag spinner L_ATTS closetag opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SPINNER ::= opentag spinner closetag opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // L_OPCIONES ::= OPCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_OPCIONES");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_OPCIONES",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // L_OPCIONES ::= L_OPCIONES OPCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_OPCIONES");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_OPCIONES",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPCION ::= error finOpcion closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPCION ::= opentag opcion valor igual cadena pcoma closetag TXT opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          ASTNodo hijo = new ASTNodo(parser.contador, "VALOR");
          parser.contador++;
          cad = cad.replace("\"","");
          ASTNodo str = new ASTNodo(parser.contador,cad);
          hijo.addHijo(str);
          padre.addHijo(hijo);
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPCION ::= opentag opcion valor igual cadena pcoma closetag opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          ASTNodo hijo = new ASTNodo(parser.contador, "VALOR");
          parser.contador++;
          cad = cad.replace("\"","");
          ASTNodo str = new ASTNodo(parser.contador,cad);
          hijo.addHijo(str);
          padre.addHijo(hijo);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPCION ::= opentag opcion closetag TXT opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {hij.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPCION ::= opentag opcion closetag opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CAJA ::= error finCaja closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CAJA ::= opentag caja L_ATTS closetag L_OPCIONES opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          ASTNodo nodo = new ASTNodo(parser.contador,"TXT");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {nodo.addHijo(h2);}
          padre.addHijo(nodo);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CAJA ::= opentag caja closetag L_OPCIONES opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CAJA ::= opentag caja L_ATTS closetag opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CAJA ::= opentag caja closetag opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CAJA_TEXTO ::= error finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CAJA_TEXTO ::= opentag caja_texto L_ATTS closetag TXT opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador,"CAJA_TEXTO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              ASTNodo hij = new ASTNodo(parser.contador,"TXT");
              parser.contador++;
              if(h2!=null)
              {hij.addHijo(h2);}
              padre.addHijo(hij);
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CAJA_TEXTO ::= opentag caja_texto closetag TXT opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador,"CAJA_TEXTO");
              parser.contador++;
              ASTNodo hij = new ASTNodo(parser.contador,"TXT");
              parser.contador++;
              if(h1!=null)
              {hij.addHijo(h1);}
              padre.addHijo(hij);
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CAJA_TEXTO ::= opentag caja_texto L_ATTS closetag opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CAJA_TEXTO ::= opentag caja_texto closetag opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // L_FILAS ::= FILATABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_FILAS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FILAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // L_FILAS ::= L_FILAS FILATABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_FILAS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FILAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // L_CELDAS ::= C_ENCABEZADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // L_CELDAS ::= CELDA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // L_CELDAS ::= L_CELDAS CELDA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // L_CELDAS ::= L_CELDAS C_ENCABEZADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CELDA ::= error finCt closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CELDA ::= opentag ct closetag IMAGEN opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CELDA ::= opentag ct L_ATTS closetag IMAGEN opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CELDA ::= opentag ct closetag BOTON opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CELDA ::= opentag ct L_ATTS closetag BOTON opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CELDA ::= opentag ct closetag TXT opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CELDA ::= opentag ct L_ATTS closetag TXT opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CELDA ::= opentag ct L_ATTS closetag opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CELDA ::= opentag ct closetag opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CELDA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // C_ENCABEZADO ::= error finCb closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // C_ENCABEZADO ::= opentag cb closetag IMAGEN opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // C_ENCABEZADO ::= opentag cb L_ATTS closetag IMAGEN opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // C_ENCABEZADO ::= opentag cb closetag BOTON opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // C_ENCABEZADO ::= opentag cb L_ATTS closetag BOTON opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // C_ENCABEZADO ::= opentag cb closetag TXT opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // C_ENCABEZADO ::= opentag cb L_ATTS closetag opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // C_ENCABEZADO ::= opentag cb L_ATTS closetag TXT opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // C_ENCABEZADO ::= opentag cb closetag opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FILATABLA ::= error finFil_t closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FILATABLA ::= opentag fil_t L_ATTS closetag L_CELDAS opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FILATABLA ::= opentag fil_t L_ATTS closetag opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FILATABLA ::= opentag fil_t closetag L_CELDAS opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FILATABLA ::= opentag fil_t closetag opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TABLA ::= error finTabla closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TABLA ::= opentag tabla L_ATTS closetag L_FILAS opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TABLA ::= opentag tabla closetag L_FILAS opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TABLA ::= opentag tabla L_ATTS closetag opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TABLA ::= opentag tabla closetag opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ENLACE ::= opentag enlace L_ATTS closetag TXT opentag finEnlace closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"ENLACE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo hij = new ASTNodo(parser.contador,"TXT");
          parser.contador++;
          if(h2!=null)
          {hij.addHijo(h2);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENLACE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ENLACE ::= opentag enlace L_ATTS closetag opentag finEnlace closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"ENLACE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENLACE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOTON ::= error finBoton closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BOTON ::= opentag boton L_ATTS closetag TXT opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {hij.addHijo(h2);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOTON ::= opentag boton closetag TXT opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {hij.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOTON ::= opentag boton L_ATTS closetag opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BOTON ::= opentag boton closetag opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IMAGEN ::= error finImagen closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"IMAGEN");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IMAGEN ::= opentag imagen L_ATTS closetag path opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          ASTNodo rut = new ASTNodo(parser.contador,"PATH");
          parser.contador++;
          ASTNodo r = new ASTNodo(parser.contador,pa);
          parser.contador++;
          rut.addHijo(r);
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(rut);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMAGEN ::= opentag imagen L_ATTS closetag opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMAGEN ::= opentag imagen closetag path opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          ASTNodo rut = new ASTNodo(parser.contador,"PATH");
          parser.contador++;
          ASTNodo r = new ASTNodo(parser.contador,pa);
          parser.contador++;
          rut.addHijo(r);
          padre.addHijo(rut);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMAGEN ::= opentag imagen closetag opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"IMAGEN");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PANEL ::= opentag panel closetag L_CUERPO opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PANEL ::= opentag panel L_ATTS closetag L_CUERPO opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PANEL ::= opentag panel closetag opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PANEL ::= opentag panel L_ATTS closetag opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        //padre.addHijo(h2);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_CUERPO ::= TABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_CUERPO ::= ENLACE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L_CUERPO ::= BOTON 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L_CUERPO ::= IMAGEN 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L_CUERPO ::= PANEL 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L_CUERPO ::= tTexto 
            {
              ASTNodo RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            /////////////////////////////////////////////////////////////
            ASTNodo tx = null;
            auxiliarCHTML lexer = new auxiliarCHTML(new StringReader(tex));
            CHTML.Auxiliares.parser p = new CHTML.Auxiliares.parser(lexer);
            try
            {
              p.setContador(parser.contador);
              p.parse();
              parser.contador = p.getContador()+1;
              tx = p.getRaiz();
            }
            catch(Exception ex)
            {
              System.out.println("Ocurrio un error");
            }
            /////////////////////////////////////////////////////////////
            if(tx!=null){padre.addHijo(tx);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L_CUERPO ::= tTexA 
            {
              ASTNodo RESULT =null;
		int ttexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ttexa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            /////////////////////////////////////////////////////////////
            ASTNodo tx = null;
            auxiliarCHTML lexer = new auxiliarCHTML(new StringReader(ttexa));
            CHTML.Auxiliares.parser p = new CHTML.Auxiliares.parser(lexer);
            try
            {
              p.setContador(parser.contador);
              p.parse();
              parser.contador = p.getContador()+1;
              tx = p.getRaiz();
            }
            catch(Exception ex)
            {
              System.out.println("Ocurrio un error");
            }
            /////////////////////////////////////////////////////////////
            if(tx!=null){padre.addHijo(tx);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L_CUERPO ::= CAJA_TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L_CUERPO ::= SPINNER 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_CUERPO ::= CAJA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_CUERPO ::= SALTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_CUERPO ::= L_CUERPO SALTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L_CUERPO ::= L_CUERPO SPINNER 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L_CUERPO ::= L_CUERPO CAJA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L_CUERPO ::= L_CUERPO CAJA_TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_CUERPO ::= L_CUERPO tTexA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ttexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ttexa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            ///////////////////////////////////////////////////////////////
            ASTNodo tx=null;
            auxiliarCHTML lexer = new auxiliarCHTML(new StringReader(ttexa));
            CHTML.Auxiliares.parser p = new CHTML.Auxiliares.parser(lexer);
            try
            {
              p.setContador(parser.contador);
              p.parse();
              parser.contador = p.getContador()+1;
              tx = p.getRaiz();
            }
            catch(Exception ex)
            {
              System.out.println("Ocurrio un error");
            }
            ///////////////////////////////////////////////////////////////
            padre.addHijo(h1);
            if(tx!=null){padre.addHijo(tx);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_CUERPO ::= L_CUERPO TABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_CUERPO ::= L_CUERPO ENLACE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_CUERPO ::= L_CUERPO BOTON 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_CUERPO ::= L_CUERPO IMAGEN 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_CUERPO ::= L_CUERPO tTexto 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            //////////////////////////////////////////////////////////////
            ASTNodo tx=null;
            auxiliarCHTML lexer = new auxiliarCHTML(new StringReader(tex));
            CHTML.Auxiliares.parser p = new CHTML.Auxiliares.parser(lexer);
            try
            {
              p.setContador(parser.contador);
              p.parse();
              parser.contador = p.getContador()+1;
              tx = p.getRaiz();
            }
            catch(Exception ex)
            {
              System.out.println("Ocurrio un error");
            }
            /////////////////////////////////////////////////////////////
            padre.addHijo(h1);
            if(tx!=null){padre.addHijo(tx);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_CUERPO ::= L_CUERPO PANEL 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TITULO ::= error finTitulo closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"TITULO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TITULO ::= opentag titulo L_ATTS closetag TXT opentag finTitulo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TITULO");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TITULO ::= opentag titulo closetag TXT opentag finTitulo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TITULO");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          hij.addHijo(h1);
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CCSS ::= error finCcss closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CCSS");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CCSS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CCSS ::= opentag ccss RUTA closetag opentag finCcss closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CCSS");
        parser.contador++;
        padre.addHijo(h1);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CCSS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CJS ::= error finCjs closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CJS");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CJS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CJS ::= opentag cjs RUTA closetag opentag finCjs closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CJS");
        parser.contador++;
        padre.addHijo(h1);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CJS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // L_ENCABEZADO ::= TITULO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L_ENCABEZADO ::= CCSS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_ENCABEZADO ::= CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_ENCABEZADO ::= L_ENCABEZADO CCSS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L_ENCABEZADO ::= L_ENCABEZADO CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_ENCABEZADO ::= L_ENCABEZADO TITULO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador,"L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= error finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= opentag cuerpo FONDO closetag opentag finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            ASTNodo nodo = new ASTNodo(parser.contador, "cuerpo");
            parser.contador++;
            ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-cuerpo");
            parser.contador++;
            padre.addHijo(nodo);
            nodo.addHijo(h1);
            padre.addHijo(nodo2);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= opentag cuerpo FONDO closetag L_CUERPO opentag finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            ASTNodo nodo = new ASTNodo(parser.contador, "cuerpo");
            parser.contador++;
            ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-cuerpo");
            parser.contador++;
            padre.addHijo(nodo);
            nodo.addHijo(h1);
            padre.addHijo(h2);
            padre.addHijo(nodo2);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENCABEZADO ::= error finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENCABEZADO ::= opentag encabezado closetag opentag finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  ASTNodo nodo = new ASTNodo(parser.contador, "encabezado");
                  parser.contador++;
                  ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-encabezado");
                  parser.contador++;
                  padre.addHijo(nodo);
                  padre.addHijo(nodo2);
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= opentag encabezado closetag L_ENCABEZADO opentag finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  ASTNodo nodo = new ASTNodo(parser.contador, "encabezado");
                  parser.contador++;
                  ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-encabezado");
                  parser.contador++;
                  padre.addHijo(nodo);
                  padre.addHijo(h1);
                  padre.addHijo(nodo2);
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_CHTML ::= error finChtml closetag 
            {
              ASTNodo RESULT =null;
		
                  //DESCARTO PORQUE EXISTE UN ERROR
                  System.out.println("Error en la produccion de INICIO_CHTML");
                  ASTNodo padre = new ASTNodo(parser.contador, "INICIO_CHTML");
                  parser.contador++;
                  parser.raiz = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CHTML",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_CHTML ::= NT$0 opentag chtml closetag ENCABEZADO CUERPO opentag finChtml closetag 
            {
              ASTNodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ASTNodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador,"INICIO_CHTML");
                  parser.contador++;
                  ASTNodo nodo = new ASTNodo(parser.contador, "chtml");
                  parser.contador++;
                  ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-chtml");
                  padre.addHijo(nodo);
                  padre.addHijo(h1);
                  padre.addHijo(h2);
                  padre.addHijo(nodo2);
                  parser.raiz = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CHTML",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              ASTNodo RESULT =null;
 parser.errores = new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo start_val = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

