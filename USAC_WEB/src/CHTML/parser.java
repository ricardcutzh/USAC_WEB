
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 25 01:15:42 CST 2018
//----------------------------------------------------

package CHTML;

import java_cup.runtime.Symbol;
import AST.*;
import java.util.ArrayList;
import CHTML.Auxiliares.*;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 25 01:15:42 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\043\002\000\002\002" +
    "\013\000\002\002\005\000\002\003\011\000\002\003\010" +
    "\000\002\003\005\000\002\004\012\000\002\004\011\000" +
    "\002\004\005\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\011\000\002\007\005\000\002\011\011" +
    "\000\002\011\005\000\002\012\011\000\002\012\012\000" +
    "\002\012\005\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\014\011\000\002\014\010\000\002\014\012\000" +
    "\002\014\011\000\002\021\010\000\002\021\011\000\002" +
    "\021\011\000\002\021\012\000\002\021\005\000\002\022" +
    "\010\000\002\022\011\000\002\022\011\000\002\022\012" +
    "\000\002\022\005\000\002\023\011\000\002\023\012\000" +
    "\002\024\010\000\002\024\011\000\002\024\011\000\002" +
    "\024\012\000\002\024\005\000\002\025\010\000\002\025" +
    "\011\000\002\025\011\000\002\025\012\000\002\025\005" +
    "\000\002\026\010\000\002\026\012\000\002\026\011\000" +
    "\002\026\011\000\002\026\012\000\002\026\011\000\002" +
    "\026\012\000\002\026\011\000\002\026\005\000\002\027" +
    "\010\000\002\027\011\000\002\027\012\000\002\027\011" +
    "\000\002\027\012\000\002\027\011\000\002\027\012\000" +
    "\002\027\011\000\002\027\005\000\002\030\004\000\002" +
    "\030\004\000\002\030\003\000\002\030\003\000\002\031" +
    "\004\000\002\031\003\000\002\032\010\000\002\032\011" +
    "\000\002\032\011\000\002\032\012\000\002\032\005\000" +
    "\002\033\010\000\002\033\011\000\002\033\011\000\002" +
    "\033\012\000\002\033\005\000\002\034\010\000\002\034" +
    "\011\000\002\034\014\000\002\034\015\000\002\034\005" +
    "\000\002\035\004\000\002\035\003\000\002\036\010\000" +
    "\002\036\011\000\002\036\011\000\002\036\012\000\002" +
    "\036\005\000\002\037\005\000\002\037\005\000\002\040" +
    "\005\000\002\040\006\000\002\041\005\000\002\041\006" +
    "\000\002\005\006\000\002\005\002\000\002\005\004\000" +
    "\002\010\006\000\002\015\006\000\002\015\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\003\000\002\020" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b7\000\006\003\004\004\000\001\002\000\004\014" +
    "\u01b8\001\002\000\004\004\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\013\011\001" +
    "\002\000\004\005\012\001\002\000\006\003\013\004\015" +
    "\001\002\000\004\016\u01b6\001\002\000\006\003\150\004" +
    "\151\001\002\000\004\015\016\001\002\000\004\005\017" +
    "\001\002\000\006\003\021\004\024\001\002\000\006\003" +
    "\ufff2\004\ufff2\001\002\000\010\023\143\025\144\027\142" +
    "\001\002\000\006\003\ufff4\004\ufff4\001\002\000\006\003" +
    "\021\004\136\001\002\000\012\016\030\022\031\024\027" +
    "\026\026\001\002\000\006\003\ufff3\004\ufff3\001\002\000" +
    "\024\003\060\005\056\042\033\044\062\045\052\046\063" +
    "\047\064\050\054\051\061\001\002\000\004\042\033\001" +
    "\002\000\004\005\043\001\002\000\004\042\033\001\002" +
    "\000\004\005\037\001\002\000\004\006\034\001\002\000" +
    "\004\011\035\001\002\000\004\007\036\001\002\000\030" +
    "\003\uff83\005\uff83\040\uff83\042\uff83\044\uff83\045\uff83\046" +
    "\uff83\047\uff83\050\uff83\051\uff83\101\uff83\001\002\000\004" +
    "\004\040\001\002\000\004\023\041\001\002\000\004\005" +
    "\042\001\002\000\006\003\ufff1\004\ufff1\001\002\000\006" +
    "\003\ufffc\004\ufffc\001\002\000\004\005\045\001\002\000" +
    "\004\004\046\001\002\000\004\025\047\001\002\000\004" +
    "\005\050\001\002\000\006\003\uffef\004\uffef\001\002\000" +
    "\030\003\uff7d\005\uff7d\040\uff7d\042\uff7d\044\uff7d\045\uff7d" +
    "\046\uff7d\047\uff7d\050\uff7d\051\uff7d\101\uff7d\001\002\000" +
    "\004\006\uff7b\001\002\000\030\003\uff7e\005\uff7e\040\uff7e" +
    "\042\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\101\uff7e\001\002\000\004\006\uff78\001\002\000\004" +
    "\006\131\001\002\000\050\013\104\015\112\017\073\021" +
    "\106\022\077\024\074\026\101\030\102\032\105\034\103" +
    "\042\072\043\111\053\107\055\114\057\075\072\100\074" +
    "\115\077\113\100\071\001\002\000\024\003\060\005\070" +
    "\042\033\044\062\045\052\046\063\047\064\050\054\051" +
    "\061\001\002\000\004\007\065\001\002\000\004\006\uff77" +
    "\001\002\000\004\006\uff7c\001\002\000\004\006\uff7a\001" +
    "\002\000\004\006\uff79\001\002\000\030\003\uff81\005\uff81" +
    "\040\uff81\042\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050" +
    "\uff81\051\uff81\101\uff81\001\002\000\030\003\uff7f\005\uff7f" +
    "\040\uff7f\042\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050" +
    "\uff7f\051\uff7f\101\uff7f\001\002\000\030\003\uff80\005\uff80" +
    "\040\uff80\042\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\101\uff80\001\002\000\050\013\104\015\112" +
    "\017\073\021\106\022\077\024\074\026\101\030\102\032" +
    "\105\034\103\042\072\043\111\053\107\055\114\057\075" +
    "\072\100\074\115\077\113\100\071\001\002\000\052\004" +
    "\uff60\013\uff60\015\uff60\017\uff60\021\uff60\022\uff60\024\uff60" +
    "\026\uff60\030\uff60\032\uff60\034\uff60\042\uff60\043\uff60\053" +
    "\uff60\055\uff60\057\uff60\072\uff60\074\uff60\077\uff60\100\uff60" +
    "\001\002\000\052\004\uff5f\013\uff5f\015\uff5f\017\uff5f\021" +
    "\uff5f\022\uff5f\024\uff5f\026\uff5f\030\uff5f\032\uff5f\034\uff5f" +
    "\042\uff5f\043\uff5f\053\uff5f\055\uff5f\057\uff5f\072\uff5f\074" +
    "\uff5f\077\uff5f\100\uff5f\001\002\000\052\004\uff6c\013\uff6c" +
    "\015\uff6c\017\uff6c\021\uff6c\022\uff6c\024\uff6c\026\uff6c\030" +
    "\uff6c\032\uff6c\034\uff6c\042\uff6c\043\uff6c\053\uff6c\055\uff6c" +
    "\057\uff6c\072\uff6c\074\uff6c\077\uff6c\100\uff6c\001\002\000" +
    "\052\004\uff6a\013\uff6a\015\uff6a\017\uff6a\021\uff6a\022\uff6a" +
    "\024\uff6a\026\uff6a\030\uff6a\032\uff6a\034\uff6a\042\uff6a\043" +
    "\uff6a\053\uff6a\055\uff6a\057\uff6a\072\uff6a\074\uff6a\077\uff6a" +
    "\100\uff6a\001\002\000\052\004\uff61\013\uff61\015\uff61\017" +
    "\uff61\021\uff61\022\uff61\024\uff61\026\uff61\030\uff61\032\uff61" +
    "\034\uff61\042\uff61\043\uff61\053\uff61\055\uff61\057\uff61\072" +
    "\uff61\074\uff61\077\uff61\100\uff61\001\002\000\052\004\uff6f" +
    "\013\uff6f\015\uff6f\017\uff6f\021\uff6f\022\uff6f\024\uff6f\026" +
    "\uff6f\030\uff6f\032\uff6f\034\uff6f\042\uff6f\043\uff6f\053\uff6f" +
    "\055\uff6f\057\uff6f\072\uff6f\074\uff6f\077\uff6f\100\uff6f\001" +
    "\002\000\052\004\uff6b\013\uff6b\015\uff6b\017\uff6b\021\uff6b" +
    "\022\uff6b\024\uff6b\026\uff6b\030\uff6b\032\uff6b\034\uff6b\042" +
    "\uff6b\043\uff6b\053\uff6b\055\uff6b\057\uff6b\072\uff6b\074\uff6b" +
    "\077\uff6b\100\uff6b\001\002\000\052\004\uff63\013\uff63\015" +
    "\uff63\017\uff63\021\uff63\022\uff63\024\uff63\026\uff63\030\uff63" +
    "\032\uff63\034\uff63\042\uff63\043\uff63\053\uff63\055\uff63\057" +
    "\uff63\072\uff63\074\uff63\077\uff63\100\uff63\001\002\000\052" +
    "\004\uff69\013\uff69\015\uff69\017\uff69\021\uff69\022\uff69\024" +
    "\uff69\026\uff69\030\uff69\032\uff69\034\uff69\042\uff69\043\uff69" +
    "\053\uff69\055\uff69\057\uff69\072\uff69\074\uff69\077\uff69\100" +
    "\uff69\001\002\000\052\004\uff68\013\uff68\015\uff68\017\uff68" +
    "\021\uff68\022\uff68\024\uff68\026\uff68\030\uff68\032\uff68\034" +
    "\uff68\042\uff68\043\uff68\053\uff68\055\uff68\057\uff68\072\uff68" +
    "\074\uff68\077\uff68\100\uff68\001\002\000\052\004\uff65\013" +
    "\uff65\015\uff65\017\uff65\021\uff65\022\uff65\024\uff65\026\uff65" +
    "\030\uff65\032\uff65\034\uff65\042\uff65\043\uff65\053\uff65\055" +
    "\uff65\057\uff65\072\uff65\074\uff65\077\uff65\100\uff65\001\002" +
    "\000\052\004\uff6e\013\uff6e\015\uff6e\017\uff6e\021\uff6e\022" +
    "\uff6e\024\uff6e\026\uff6e\030\uff6e\032\uff6e\034\uff6e\042\uff6e" +
    "\043\uff6e\053\uff6e\055\uff6e\057\uff6e\072\uff6e\074\uff6e\077" +
    "\uff6e\100\uff6e\001\002\000\052\004\uff67\013\uff67\015\uff67" +
    "\017\uff67\021\uff67\022\uff67\024\uff67\026\uff67\030\uff67\032" +
    "\uff67\034\uff67\042\uff67\043\uff67\053\uff67\055\uff67\057\uff67" +
    "\072\uff67\074\uff67\077\uff67\100\uff67\001\002\000\052\004" +
    "\uff70\013\uff70\015\uff70\017\uff70\021\uff70\022\uff70\024\uff70" +
    "\026\uff70\030\uff70\032\uff70\034\uff70\042\uff70\043\uff70\053" +
    "\uff70\055\uff70\057\uff70\072\uff70\074\uff70\077\uff70\100\uff70" +
    "\001\002\000\052\004\uff66\013\uff66\015\uff66\017\uff66\021" +
    "\uff66\022\uff66\024\uff66\026\uff66\030\uff66\032\uff66\034\uff66" +
    "\042\uff66\043\uff66\053\uff66\055\uff66\057\uff66\072\uff66\074" +
    "\uff66\077\uff66\100\uff66\001\002\000\052\004\116\013\104" +
    "\015\112\017\073\021\120\022\077\024\074\026\101\030" +
    "\102\032\105\034\103\042\072\043\121\053\107\055\114" +
    "\057\075\072\100\074\115\077\122\100\071\001\002\000" +
    "\052\004\uff71\013\uff71\015\uff71\017\uff71\021\uff71\022\uff71" +
    "\024\uff71\026\uff71\030\uff71\032\uff71\034\uff71\042\uff71\043" +
    "\uff71\053\uff71\055\uff71\057\uff71\072\uff71\074\uff71\077\uff71" +
    "\100\uff71\001\002\000\052\004\uff6d\013\uff6d\015\uff6d\017" +
    "\uff6d\021\uff6d\022\uff6d\024\uff6d\026\uff6d\030\uff6d\032\uff6d" +
    "\034\uff6d\042\uff6d\043\uff6d\053\uff6d\055\uff6d\057\uff6d\072" +
    "\uff6d\074\uff6d\077\uff6d\100\uff6d\001\002\000\052\004\uff72" +
    "\013\uff72\015\uff72\017\uff72\021\uff72\022\uff72\024\uff72\026" +
    "\uff72\030\uff72\032\uff72\034\uff72\042\uff72\043\uff72\053\uff72" +
    "\055\uff72\057\uff72\072\uff72\074\uff72\077\uff72\100\uff72\001" +
    "\002\000\052\004\uff64\013\uff64\015\uff64\017\uff64\021\uff64" +
    "\022\uff64\024\uff64\026\uff64\030\uff64\032\uff64\034\uff64\042" +
    "\uff64\043\uff64\053\uff64\055\uff64\057\uff64\072\uff64\074\uff64" +
    "\077\uff64\100\uff64\001\002\000\052\004\uff62\013\uff62\015" +
    "\uff62\017\uff62\021\uff62\022\uff62\024\uff62\026\uff62\030\uff62" +
    "\032\uff62\034\uff62\042\uff62\043\uff62\053\uff62\055\uff62\057" +
    "\uff62\072\uff62\074\uff62\077\uff62\100\uff62\001\002\000\004" +
    "\027\123\001\002\000\052\004\uff73\013\uff73\015\uff73\017" +
    "\uff73\021\uff73\022\uff73\024\uff73\026\uff73\030\uff73\032\uff73" +
    "\034\uff73\042\uff73\043\uff73\053\uff73\055\uff73\057\uff73\072" +
    "\uff73\074\uff73\077\uff73\100\uff73\001\002\000\052\004\uff74" +
    "\013\uff74\015\uff74\017\uff74\021\uff74\022\uff74\024\uff74\026" +
    "\uff74\030\uff74\032\uff74\034\uff74\042\uff74\043\uff74\053\uff74" +
    "\055\uff74\057\uff74\072\uff74\074\uff74\077\uff74\100\uff74\001" +
    "\002\000\052\004\uff76\013\uff76\015\uff76\017\uff76\021\uff76" +
    "\022\uff76\024\uff76\026\uff76\030\uff76\032\uff76\034\uff76\042" +
    "\uff76\043\uff76\053\uff76\055\uff76\057\uff76\072\uff76\074\uff76" +
    "\077\uff76\100\uff76\001\002\000\052\004\uff75\013\uff75\015" +
    "\uff75\017\uff75\021\uff75\022\uff75\024\uff75\026\uff75\030\uff75" +
    "\032\uff75\034\uff75\042\uff75\043\uff75\053\uff75\055\uff75\057" +
    "\uff75\072\uff75\074\uff75\077\uff75\100\uff75\001\002\000\004" +
    "\005\124\001\002\000\006\003\uffec\004\uffec\001\002\000" +
    "\052\004\126\013\104\015\112\017\073\021\120\022\077" +
    "\024\074\026\101\030\102\032\105\034\103\042\072\043" +
    "\121\053\107\055\114\057\075\072\100\074\115\077\122" +
    "\100\071\001\002\000\004\027\127\001\002\000\004\005" +
    "\130\001\002\000\006\003\uffed\004\uffed\001\002\000\004" +
    "\011\132\001\002\000\004\007\133\001\002\000\030\003" +
    "\uff82\005\uff82\040\uff82\042\uff82\044\uff82\045\uff82\046\uff82" +
    "\047\uff82\050\uff82\051\uff82\101\uff82\001\002\000\006\003" +
    "\ufff7\004\ufff7\001\002\000\006\003\ufff6\004\ufff6\001\002" +
    "\000\012\016\140\022\031\024\027\026\026\001\002\000" +
    "\006\003\ufff5\004\ufff5\001\002\000\004\005\141\001\002" +
    "\000\006\003\ufffd\004\ufffd\001\002\000\004\005\147\001" +
    "\002\000\004\005\146\001\002\000\004\005\145\001\002" +
    "\000\006\003\uffee\004\uffee\001\002\000\006\003\ufff0\004" +
    "\ufff0\001\002\000\006\003\uffeb\004\uffeb\001\002\000\004" +
    "\020\u01b4\001\002\000\004\017\156\001\002\000\004\004" +
    "\153\001\002\000\004\014\154\001\002\000\004\005\155" +
    "\001\002\000\004\002\uffff\001\002\000\010\003\157\005" +
    "\uff85\041\161\001\002\000\004\007\u01b3\001\002\000\004" +
    "\005\165\001\002\000\004\006\162\001\002\000\004\011" +
    "\163\001\002\000\004\007\164\001\002\000\004\005\uff86" +
    "\001\002\000\006\003\177\004\170\001\002\000\006\003" +
    "\uffd7\004\uffd7\001\002\000\006\003\uffde\004\uffde\001\002" +
    "\000\032\020\u01b1\030\236\032\251\034\244\036\246\037" +
    "\237\053\242\055\240\057\250\070\245\072\241\100\243" +
    "\001\002\000\006\003\uffda\004\uffda\001\002\000\006\003" +
    "\uffd6\004\uffd6\001\002\000\006\003\uffdd\004\uffdd\001\002" +
    "\000\006\003\uffdb\004\uffdb\001\002\000\006\003\177\004" +
    "\224\001\002\000\006\003\uffdf\004\uffdf\001\002\000\020" +
    "\033\206\036\211\054\205\056\204\060\212\071\207\073" +
    "\210\001\002\000\006\003\uffd9\004\uffd9\001\002\000\006" +
    "\003\uffd5\004\uffd5\001\002\000\006\003\uffd8\004\uffd8\001" +
    "\002\000\006\003\uffdc\004\uffdc\001\002\000\004\005\221" +
    "\001\002\000\004\005\220\001\002\000\004\005\217\001" +
    "\002\000\004\005\216\001\002\000\004\005\215\001\002" +
    "\000\004\005\214\001\002\000\004\005\213\001\002\000" +
    "\006\003\uff8d\004\uff8d\001\002\000\006\003\uff8b\004\uff8b" +
    "\001\002\000\006\003\uff99\004\uff99\001\002\000\006\003" +
    "\uff9e\004\uff9e\001\002\000\006\003\uffcc\004\uffcc\001\002" +
    "\000\006\003\uffc7\004\uffc7\001\002\000\006\003\uffc0\004" +
    "\uffc0\001\002\000\006\003\uffe7\004\uffe7\001\002\000\006" +
    "\003\uffe2\004\uffe2\001\002\000\032\020\247\030\236\032" +
    "\251\034\244\036\246\037\237\053\242\055\240\057\250" +
    "\070\245\072\241\100\243\001\002\000\006\003\uffe9\004" +
    "\uffe9\001\002\000\006\003\uffe6\004\uffe6\001\002\000\006" +
    "\003\uffe1\004\uffe1\001\002\000\006\003\uffe4\004\uffe4\001" +
    "\002\000\006\003\uffe0\004\uffe0\001\002\000\006\003\uffea" +
    "\004\uffea\001\002\000\006\003\uffe5\004\uffe5\001\002\000" +
    "\006\003\uffe8\004\uffe8\001\002\000\006\003\uffe3\004\uffe3" +
    "\001\002\000\024\003\060\005\u01a0\042\033\044\062\045" +
    "\052\046\063\047\064\050\054\051\061\001\002\000\024" +
    "\003\060\040\u019d\042\033\044\062\045\052\046\063\047" +
    "\064\050\054\051\061\001\002\000\024\003\060\005\u0127" +
    "\042\033\044\062\045\052\046\063\047\064\050\054\051" +
    "\061\001\002\000\024\003\060\005\374\042\033\044\062" +
    "\045\052\046\063\047\064\050\054\051\061\001\002\000" +
    "\024\003\060\005\353\042\033\044\062\045\052\046\063" +
    "\047\064\050\054\051\061\001\002\000\024\003\060\042" +
    "\033\044\062\045\052\046\063\047\064\050\054\051\061" +
    "\101\350\001\002\000\022\003\060\042\033\044\062\045" +
    "\052\046\063\047\064\050\054\051\061\001\002\000\024" +
    "\003\060\005\316\042\033\044\062\045\052\046\063\047" +
    "\064\050\054\051\061\001\002\000\004\005\315\001\002" +
    "\000\004\005\314\001\002\000\024\003\060\005\273\042" +
    "\033\044\062\045\052\046\063\047\064\050\054\051\061" +
    "\001\002\000\024\003\060\005\252\042\033\044\062\045" +
    "\052\046\063\047\064\050\054\051\061\001\002\000\006" +
    "\004\264\052\265\001\002\000\024\003\060\005\254\042" +
    "\033\044\062\045\052\046\063\047\064\050\054\051\061" +
    "\001\002\000\006\004\255\052\256\001\002\000\004\033" +
    "\262\001\002\000\004\004\257\001\002\000\004\033\260" +
    "\001\002\000\004\005\261\001\002\000\006\003\uffcd\004" +
    "\uffcd\001\002\000\004\005\263\001\002\000\006\003\uffce" +
    "\004\uffce\001\002\000\004\033\271\001\002\000\004\004" +
    "\266\001\002\000\004\033\267\001\002\000\004\005\270" +
    "\001\002\000\006\003\uffcf\004\uffcf\001\002\000\004\005" +
    "\272\001\002\000\006\003\uffd0\004\uffd0\001\002\000\006" +
    "\004\306\077\305\001\002\000\024\003\060\005\275\042" +
    "\033\044\062\045\052\046\063\047\064\050\054\051\061" +
    "\001\002\000\006\004\277\077\276\001\002\000\004\004" +
    "\302\001\002\000\004\060\300\001\002\000\004\005\301" +
    "\001\002\000\006\003\uff90\004\uff90\001\002\000\004\060" +
    "\303\001\002\000\004\005\304\001\002\000\006\003\uff8e" +
    "\004\uff8e\001\002\000\004\004\311\001\002\000\004\060" +
    "\307\001\002\000\004\005\310\001\002\000\006\003\uff91" +
    "\004\uff91\001\002\000\004\060\312\001\002\000\004\005" +
    "\313\001\002\000\006\003\uff8f\004\uff8f\001\002\000\004" +
    "\004\ufffa\001\002\000\006\003\uff8c\004\uff8c\001\002\000" +
    "\052\004\330\013\104\015\112\017\073\021\106\022\077" +
    "\024\074\026\101\030\102\032\105\034\103\042\072\043" +
    "\111\053\107\055\114\057\075\072\100\074\115\077\113" +
    "\100\071\001\002\000\024\003\060\005\320\042\033\044" +
    "\062\045\052\046\063\047\064\050\054\051\061\001\002" +
    "\000\052\004\321\013\104\015\112\017\073\021\106\022" +
    "\077\024\074\026\101\030\102\032\105\034\103\042\072" +
    "\043\111\053\107\055\114\057\075\072\100\074\115\077" +
    "\113\100\071\001\002\000\004\071\326\001\002\000\052" +
    "\004\323\013\104\015\112\017\073\021\120\022\077\024" +
    "\074\026\101\030\102\032\105\034\103\042\072\043\121" +
    "\053\107\055\114\057\075\072\100\074\115\077\122\100" +
    "\071\001\002\000\004\071\324\001\002\000\004\005\325" +
    "\001\002\000\006\003\uff9f\004\uff9f\001\002\000\004\005" +
    "\327\001\002\000\006\003\uffa1\004\uffa1\001\002\000\004" +
    "\071\335\001\002\000\052\004\332\013\104\015\112\017" +
    "\073\021\120\022\077\024\074\026\101\030\102\032\105" +
    "\034\103\042\072\043\121\053\107\055\114\057\075\072" +
    "\100\074\115\077\122\100\071\001\002\000\004\071\333" +
    "\001\002\000\004\005\334\001\002\000\006\003\uffa0\004" +
    "\uffa0\001\002\000\004\005\336\001\002\000\006\003\uffa2" +
    "\004\uffa2\001\002\000\024\003\060\005\340\042\033\044" +
    "\062\045\052\046\063\047\064\050\054\051\061\001\002" +
    "\000\052\004\341\013\104\015\112\017\073\021\106\022" +
    "\077\024\074\026\101\030\102\032\105\034\103\042\072" +
    "\043\111\053\107\055\114\057\075\072\100\074\115\077" +
    "\113\100\071\001\002\000\004\035\346\001\002\000\052" +
    "\004\343\013\104\015\112\017\073\021\120\022\077\024" +
    "\074\026\101\030\102\032\105\034\103\042\072\043\121" +
    "\053\107\055\114\057\075\072\100\074\115\077\122\100" +
    "\071\001\002\000\004\035\344\001\002\000\004\005\345" +
    "\001\002\000\006\003\uffc5\004\uffc5\001\002\000\004\005" +
    "\347\001\002\000\006\003\uffc6\004\uffc6\001\002\000\006" +
    "\003\uff8a\004\uff8a\001\002\000\024\003\060\042\033\044" +
    "\062\045\052\046\063\047\064\050\054\051\061\101\352" +
    "\001\002\000\006\003\uff89\004\uff89\001\002\000\052\004" +
    "\365\013\104\015\112\017\073\021\106\022\077\024\074" +
    "\026\101\030\102\032\105\034\103\042\072\043\111\053" +
    "\107\055\114\057\075\072\100\074\115\077\113\100\071" +
    "\001\002\000\024\003\060\005\355\042\033\044\062\045" +
    "\052\046\063\047\064\050\054\051\061\001\002\000\052" +
    "\004\356\013\104\015\112\017\073\021\106\022\077\024" +
    "\074\026\101\030\102\032\105\034\103\042\072\043\111" +
    "\053\107\055\114\057\075\072\100\074\115\077\113\100" +
    "\071\001\002\000\004\054\363\001\002\000\052\004\360" +
    "\013\104\015\112\017\073\021\120\022\077\024\074\026" +
    "\101\030\102\032\105\034\103\042\072\043\121\053\107" +
    "\055\114\057\075\072\100\074\115\077\122\100\071\001" +
    "\002\000\004\054\361\001\002\000\004\005\362\001\002" +
    "\000\006\003\uffc8\004\uffc8\001\002\000\004\005\364\001" +
    "\002\000\006\003\uffca\004\uffca\001\002\000\004\054\372" +
    "\001\002\000\052\004\367\013\104\015\112\017\073\021" +
    "\120\022\077\024\074\026\101\030\102\032\105\034\103" +
    "\042\072\043\121\053\107\055\114\057\075\072\100\074" +
    "\115\077\122\100\071\001\002\000\004\054\370\001\002" +
    "\000\004\005\371\001\002\000\006\003\uffc9\004\uffc9\001" +
    "\002\000\004\005\373\001\002\000\006\003\uffcb\004\uffcb" +
    "\001\002\000\006\003\u0100\004\u0121\001\002\000\024\003" +
    "\060\005\376\042\033\044\062\045\052\046\063\047\064" +
    "\050\054\051\061\001\002\000\006\003\u0100\004\u0102\001" +
    "\002\000\006\003\uff92\004\uff92\001\002\000\004\075\u011e" +
    "\001\002\000\006\003\u0100\004\u011b\001\002\000\006\073" +
    "\u0104\074\u0103\001\002\000\006\005\u0107\076\u0106\001\002" +
    "\000\004\005\u0105\001\002\000\006\003\uff9c\004\uff9c\001" +
    "\002\000\004\006\u010f\001\002\000\052\004\u0108\013\104" +
    "\015\112\017\073\021\106\022\077\024\074\026\101\030" +
    "\102\032\105\034\103\042\072\043\111\053\107\055\114" +
    "\057\075\072\100\074\115\077\113\100\071\001\002\000" +
    "\004\075\u010d\001\002\000\052\004\u010a\013\104\015\112" +
    "\017\073\021\120\022\077\024\074\026\101\030\102\032" +
    "\105\034\103\042\072\043\121\053\107\055\114\057\075" +
    "\072\100\074\115\077\122\100\071\001\002\000\004\075" +
    "\u010b\001\002\000\004\005\u010c\001\002\000\006\003\uff97" +
    "\004\uff97\001\002\000\004\005\u010e\001\002\000\006\003" +
    "\uff98\004\uff98\001\002\000\004\011\u0110\001\002\000\004" +
    "\007\u0111\001\002\000\004\005\u0112\001\002\000\052\004" +
    "\u0113\013\104\015\112\017\073\021\106\022\077\024\074" +
    "\026\101\030\102\032\105\034\103\042\072\043\111\053" +
    "\107\055\114\057\075\072\100\074\115\077\113\100\071" +
    "\001\002\000\004\075\u0118\001\002\000\052\004\u0115\013" +
    "\104\015\112\017\073\021\120\022\077\024\074\026\101" +
    "\030\102\032\105\034\103\042\072\043\121\053\107\055" +
    "\114\057\075\072\100\074\115\077\122\100\071\001\002" +
    "\000\004\075\u0116\001\002\000\004\005\u0117\001\002\000" +
    "\006\003\uff95\004\uff95\001\002\000\004\005\u0119\001\002" +
    "\000\006\003\uff96\004\uff96\001\002\000\006\003\uff93\004" +
    "\uff93\001\002\000\006\073\u011c\074\u0103\001\002\000\004" +
    "\005\u011d\001\002\000\006\003\uff9a\004\uff9a\001\002\000" +
    "\004\005\u011f\001\002\000\006\003\uff94\004\uff94\001\002" +
    "\000\006\003\u0100\004\u0124\001\002\000\006\073\u0122\074" +
    "\u0103\001\002\000\004\005\u0123\001\002\000\006\003\uff9d" +
    "\004\uff9d\001\002\000\006\073\u0125\074\u0103\001\002\000" +
    "\004\005\u0126\001\002\000\006\003\uff9b\004\uff9b\001\002" +
    "\000\006\003\u012a\004\u0196\001\002\000\024\003\060\005" +
    "\u0129\042\033\044\062\045\052\046\063\047\064\050\054" +
    "\051\061\001\002\000\006\003\u012a\004\u012b\001\002\000" +
    "\004\062\u0194\001\002\000\006\056\u0192\061\u0131\001\002" +
    "\000\006\003\uffa3\004\uffa3\001\002\000\006\003\u012a\004" +
    "\u012e\001\002\000\006\056\u0130\061\u0131\001\002\000\006" +
    "\003\uffa4\004\uffa4\001\002\000\004\005\u0191\001\002\000" +
    "\024\003\060\005\u0132\042\033\044\062\045\052\046\063" +
    "\047\064\050\054\051\061\001\002\000\006\003\u0137\004" +
    "\u018b\001\002\000\024\003\060\005\u0134\042\033\044\062" +
    "\045\052\046\063\047\064\050\054\051\061\001\002\000" +
    "\006\003\u0137\004\u0139\001\002\000\006\003\u0137\004\u0187" +
    "\001\002\000\006\003\uffa5\004\uffa5\001\002\000\006\064" +
    "\u0181\066\u0182\001\002\000\006\003\uffa6\004\uffa6\001\002" +
    "\000\010\062\u013c\063\u013a\065\u013b\001\002\000\024\003" +
    "\060\005\u0160\042\033\044\062\045\052\046\063\047\064" +
    "\050\054\051\061\001\002\000\024\003\060\005\u013e\042" +
    "\033\044\062\045\052\046\063\047\064\050\054\051\061" +
    "\001\002\000\004\005\u013d\001\002\000\006\003\uffbd\004" +
    "\uffbd\001\002\000\054\003\u0145\004\u0153\013\104\015\112" +
    "\017\073\021\106\022\077\024\074\026\101\030\102\032" +
    "\105\034\103\042\072\043\111\053\107\055\114\057\075" +
    "\072\100\074\115\077\113\100\071\001\002\000\024\003" +
    "\060\005\u0140\042\033\044\062\045\052\046\063\047\064" +
    "\050\054\051\061\001\002\000\054\003\u0145\004\u0143\013" +
    "\104\015\112\017\073\021\106\022\077\024\074\026\101" +
    "\030\102\032\105\034\103\042\072\043\111\053\107\055" +
    "\114\057\075\072\100\074\115\077\113\100\071\001\002" +
    "\000\004\004\u014e\001\002\000\004\004\u014b\001\002\000" +
    "\010\032\251\053\242\066\u0149\001\002\000\052\004\u0146" +
    "\013\104\015\112\017\073\021\120\022\077\024\074\026" +
    "\101\030\102\032\105\034\103\042\072\043\121\053\107" +
    "\055\114\057\075\072\100\074\115\077\122\100\071\001" +
    "\002\000\006\033\206\054\205\001\002\000\004\066\u0147" +
    "\001\002\000\004\005\u0148\001\002\000\006\003\uffaf\004" +
    "\uffaf\001\002\000\004\005\u014a\001\002\000\006\003\uffb0" +
    "\004\uffb0\001\002\000\004\066\u014c\001\002\000\004\005" +
    "\u014d\001\002\000\006\003\uffad\004\uffad\001\002\000\004" +
    "\066\u014f\001\002\000\004\005\u0150\001\002\000\006\003" +
    "\uffab\004\uffab\001\002\000\004\004\u015d\001\002\000\004" +
    "\004\u015a\001\002\000\010\032\251\053\242\066\u0158\001" +
    "\002\000\052\004\u0155\013\104\015\112\017\073\021\120" +
    "\022\077\024\074\026\101\030\102\032\105\034\103\042" +
    "\072\043\121\053\107\055\114\057\075\072\100\074\115" +
    "\077\122\100\071\001\002\000\004\066\u0156\001\002\000" +
    "\004\005\u0157\001\002\000\006\003\uffae\004\uffae\001\002" +
    "\000\004\005\u0159\001\002\000\006\003\uffb1\004\uffb1\001" +
    "\002\000\004\066\u015b\001\002\000\004\005\u015c\001\002" +
    "\000\006\003\uffac\004\uffac\001\002\000\004\066\u015e\001" +
    "\002\000\004\005\u015f\001\002\000\006\003\uffaa\004\uffaa" +
    "\001\002\000\054\003\u0145\004\u0174\013\104\015\112\017" +
    "\073\021\106\022\077\024\074\026\101\030\102\032\105" +
    "\034\103\042\072\043\111\053\107\055\114\057\075\072" +
    "\100\074\115\077\113\100\071\001\002\000\024\003\060" +
    "\005\u0162\042\033\044\062\045\052\046\063\047\064\050" +
    "\054\051\061\001\002\000\054\003\u0145\004\u0165\013\104" +
    "\015\112\017\073\021\106\022\077\024\074\026\101\030" +
    "\102\032\105\034\103\042\072\043\111\053\107\055\114" +
    "\057\075\072\100\074\115\077\113\100\071\001\002\000" +
    "\004\004\u016f\001\002\000\004\004\u016c\001\002\000\010" +
    "\032\251\053\242\064\u016a\001\002\000\052\004\u0167\013" +
    "\104\015\112\017\073\021\120\022\077\024\074\026\101" +
    "\030\102\032\105\034\103\042\072\043\121\053\107\055" +
    "\114\057\075\072\100\074\115\077\122\100\071\001\002" +
    "\000\004\064\u0168\001\002\000\004\005\u0169\001\002\000" +
    "\006\003\uffb9\004\uffb9\001\002\000\004\005\u016b\001\002" +
    "\000\006\003\uffb8\004\uffb8\001\002\000\004\064\u016d\001" +
    "\002\000\004\005\u016e\001\002\000\006\003\uffb6\004\uffb6" +
    "\001\002\000\004\064\u0170\001\002\000\004\005\u0171\001" +
    "\002\000\006\003\uffb4\004\uffb4\001\002\000\004\004\u017e" +
    "\001\002\000\004\004\u017b\001\002\000\010\032\251\053" +
    "\242\064\u0179\001\002\000\052\004\u0176\013\104\015\112" +
    "\017\073\021\120\022\077\024\074\026\101\030\102\032" +
    "\105\034\103\042\072\043\121\053\107\055\114\057\075" +
    "\072\100\074\115\077\122\100\071\001\002\000\004\064" +
    "\u0177\001\002\000\004\005\u0178\001\002\000\006\003\uffb7" +
    "\004\uffb7\001\002\000\004\005\u017a\001\002\000\006\003" +
    "\uffba\004\uffba\001\002\000\004\064\u017c\001\002\000\004" +
    "\005\u017d\001\002\000\006\003\uffb5\004\uffb5\001\002\000" +
    "\004\064\u017f\001\002\000\004\005\u0180\001\002\000\006" +
    "\003\uffb3\004\uffb3\001\002\000\004\005\u0184\001\002\000" +
    "\004\005\u0183\001\002\000\006\003\uffa9\004\uffa9\001\002" +
    "\000\006\003\uffb2\004\uffb2\001\002\000\006\003\uffa8\004" +
    "\uffa8\001\002\000\006\003\uffa7\004\uffa7\001\002\000\010" +
    "\062\u0188\063\u013a\065\u013b\001\002\000\004\005\u0189\001" +
    "\002\000\006\003\uffbc\004\uffbc\001\002\000\006\003\u0137" +
    "\004\u018e\001\002\000\010\062\u018c\063\u013a\065\u013b\001" +
    "\002\000\004\005\u018d\001\002\000\006\003\uffbf\004\uffbf" +
    "\001\002\000\010\062\u018f\063\u013a\065\u013b\001\002\000" +
    "\004\005\u0190\001\002\000\006\003\uffbe\004\uffbe\001\002" +
    "\000\006\003\uffc1\004\uffc1\001\002\000\004\005\u0193\001" +
    "\002\000\006\003\uffc3\004\uffc3\001\002\000\004\005\u0195" +
    "\001\002\000\006\003\uffbb\004\uffbb\001\002\000\006\056" +
    "\u019b\061\u0131\001\002\000\006\003\u012a\004\u0198\001\002" +
    "\000\006\056\u0199\061\u0131\001\002\000\004\005\u019a\001" +
    "\002\000\006\003\uffc2\004\uffc2\001\002\000\004\005\u019c" +
    "\001\002\000\006\003\uffc4\004\uffc4\001\002\000\006\003" +
    "\uff88\004\uff88\001\002\000\024\003\060\040\u019f\042\033" +
    "\044\062\045\052\046\063\047\064\050\054\051\061\001" +
    "\002\000\006\003\uff87\004\uff87\001\002\000\006\003\177" +
    "\004\u01aa\001\002\000\024\003\060\005\u01a2\042\033\044" +
    "\062\045\052\046\063\047\064\050\054\051\061\001\002" +
    "\000\006\003\177\004\u01a3\001\002\000\032\030\236\031" +
    "\u01a8\032\251\034\244\036\246\037\237\053\242\055\240" +
    "\057\250\070\245\072\241\100\243\001\002\000\006\003" +
    "\177\004\u01a5\001\002\000\032\030\236\031\u01a6\032\251" +
    "\034\244\036\246\037\237\053\242\055\240\057\250\070" +
    "\245\072\241\100\243\001\002\000\004\005\u01a7\001\002" +
    "\000\006\003\uffd2\004\uffd2\001\002\000\004\005\u01a9\001" +
    "\002\000\006\003\uffd4\004\uffd4\001\002\000\032\030\236" +
    "\031\u01af\032\251\034\244\036\246\037\237\053\242\055" +
    "\240\057\250\070\245\072\241\100\243\001\002\000\006" +
    "\003\177\004\u01ac\001\002\000\032\030\236\031\u01ad\032" +
    "\251\034\244\036\246\037\237\053\242\055\240\057\250" +
    "\070\245\072\241\100\243\001\002\000\004\005\u01ae\001" +
    "\002\000\006\003\uffd1\004\uffd1\001\002\000\004\005\u01b0" +
    "\001\002\000\006\003\uffd3\004\uffd3\001\002\000\004\005" +
    "\u01b2\001\002\000\004\004\ufff9\001\002\000\004\005\uff84" +
    "\001\002\000\004\005\u01b5\001\002\000\004\004\ufff8\001" +
    "\002\000\004\005\u01b7\001\002\000\006\003\ufffb\004\ufffb" +
    "\001\002\000\004\005\u01b9\001\002\000\004\002\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b7\000\006\002\005\043\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\013\001" +
    "\001\000\002\001\001\000\004\004\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\022\007\021\011" +
    "\024\012\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\134\011\136\012\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\050" +
    "\015\052\016\054\020\056\001\001\000\004\010\043\001" +
    "\001\000\002\001\001\000\004\010\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\124\042\075\001\001\000\010\010\065\015" +
    "\066\016\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\107\042\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\177\017\174\021\201" +
    "\022\165\023\171\024\200\032\202\033\166\036\172\037" +
    "\175\040\170\041\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\231" +
    "\021\233\022\221\023\225\024\232\032\234\033\222\036" +
    "\226\037\230\040\224\041\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\050\015\052" +
    "\016\054\020\u01a0\001\001\000\012\010\050\015\052\016" +
    "\054\020\u019d\001\001\000\012\010\050\015\052\016\054" +
    "\020\u0127\001\001\000\012\010\050\015\052\016\054\020" +
    "\374\001\001\000\012\010\050\015\052\016\054\020\353" +
    "\001\001\000\012\010\050\015\052\016\054\020\350\001" +
    "\001\000\012\010\050\015\052\016\054\020\336\001\001" +
    "\000\012\010\050\015\052\016\054\020\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\050\015\052" +
    "\016\054\020\273\001\001\000\012\010\050\015\052\016" +
    "\054\020\252\001\001\000\002\001\001\000\010\010\065" +
    "\015\066\016\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\065\015\066\016\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\330\042\075\001\001" +
    "\000\010\010\065\015\066\016\054\001\001\000\006\013" +
    "\321\042\075\001\001\000\002\001\001\000\004\042\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\065\015\066\016\054\001\001\000\006\013" +
    "\341\042\075\001\001\000\002\001\001\000\004\042\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\065\015\066\016\054\001\001\000\002\001" +
    "\001\000\006\013\365\042\075\001\001\000\010\010\065" +
    "\015\066\016\054\001\001\000\006\013\356\042\075\001" +
    "\001\000\002\001\001\000\004\042\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\376" +
    "\035\u011f\001\001\000\010\010\065\015\066\016\054\001" +
    "\001\000\006\034\376\035\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u0108\042\075\001\001\000" +
    "\002\001\001\000\004\042\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\u0113\042\075\001\001\000\002\001" +
    "\001\000\004\042\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\u012b\031\u0196\001\001\000\010" +
    "\010\065\015\066\016\054\001\001\000\006\025\u012b\031" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u012e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\050\015\052" +
    "\016\054\020\u0132\001\001\000\010\026\u0135\027\u0137\030" +
    "\u0189\001\001\000\010\010\065\015\066\016\054\001\001" +
    "\000\010\026\u0135\027\u0137\030\u0134\001\001\000\006\026" +
    "\u0184\027\u0185\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\050\015" +
    "\052\016\054\020\u0160\001\001\000\012\010\050\015\052" +
    "\016\054\020\u013e\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\u0153\021\u0150\022\u0151\042\075\001\001" +
    "\000\010\010\065\015\066\016\054\001\001\000\012\013" +
    "\u0143\021\u0140\022\u0141\042\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\u0174\021\u0171" +
    "\022\u0172\042\075\001\001\000\010\010\065\015\066\016" +
    "\054\001\001\000\012\013\u0165\021\u0162\022\u0163\042\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\u0184\027\u0185\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\065\015\066\016\054\001\001\000\002" +
    "\001\001\000\032\014\177\017\u01aa\021\201\022\165\023" +
    "\171\024\200\032\202\033\166\036\172\037\175\040\170" +
    "\041\173\001\001\000\010\010\065\015\066\016\054\001" +
    "\001\000\032\014\177\017\u01a3\021\201\022\165\023\171" +
    "\024\200\032\202\033\166\036\172\037\175\040\170\041" +
    "\173\001\001\000\002\001\001\000\030\014\231\021\233" +
    "\022\221\023\225\024\232\032\234\033\222\036\226\037" +
    "\230\040\224\041\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\231\021\233\022\221" +
    "\023\225\024\232\032\234\033\222\036\226\037\230\040" +
    "\224\041\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ASTNodo raiz;
    int contador;
    public static ArrayList<TError> errores;
    //METODO PARA ERROR RECUPERABLE
    public void syntax_error(Symbol s)
    {
      try
      {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("--------------Error Sintactico RECUPERABLE------------------------");
        System.out.println("Lexema: "+lexema);
        System.out.println("Fila: "+fila);
        System.out.println("Columna: "+columna);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR IRRECUPERABLE");
      }

    }

    //METODO PARA ERRORES QUE NO SE RECUPERAN
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
      try
      {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("--------------Error Sintactico PANICO------------------------");
        System.out.println("Lexema: "+lexema);
        System.out.println("Fila: "+fila);
        System.out.println("Columna: "+columna);
      }
      catch(Exception ex)
      {
        System.out.println("ERROR IRRECUPERABLE");
      }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // RESERVADAS ::= ruta 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // RESERVADAS ::= texto 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // RESERVADAS ::= spinner 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // RESERVADAS ::= opcion 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // RESERVADAS ::= caja 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // RESERVADAS ::= tabla 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // RESERVADAS ::= enlace 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // RESERVADAS ::= boton 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // RESERVADAS ::= imagen 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // RESERVADAS ::= panel 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // RESERVADAS ::= titulo 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // RESERVADAS ::= ccss 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // RESERVADAS ::= cjs 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // RESERVADAS ::= cuerpo 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // RESERVADAS ::= encabezado 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // RESERVADAS ::= chtml 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo ret = new ASTNodo(parser.contador, pal);
            parser.contador++;
            RESULT = ret;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESERVADAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TXT ::= RESERVADAS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, h1.getEtiqueta());
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TXT ::= especiales 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, pal);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TXT ::= palabra 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, pal);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TXT ::= entero 
            {
              ASTNodo RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo ret = new ASTNodo(parser.contador, pal);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TXT ::= TXT RESERVADAS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + h2.getEtiqueta();
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TXT ::= TXT especiales 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + pal;
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TXT ::= TXT entero 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + pal;
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TXT ::= TXT palabra 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int palleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int palright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ASTNodo aux = h1;
        String cad = h1.getEtiqueta() +" " + pal;
        ASTNodo ret = new ASTNodo(parser.contador, cad);
        parser.contador++;
        RESULT = ret;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TXT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NOM_A ::= alineado 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NOM_A ::= ancho 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NOM_A ::= alto 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NOM_A ::= grupo 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NOM_A ::= id 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NOM_A ::= click 
            {
              ASTNodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo r = new ASTNodo(parser.contador,val);
            parser.contador++;
            RESULT = r;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOM_A",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // L_ATTS ::= RUTA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // L_ATTS ::= ATRIBUTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // L_ATTS ::= L_ATTS RUTA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          padre.addHijo(h2);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // L_ATTS ::= L_ATTS ATRIBUTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_ATTS");
          parser.contador++;
          padre.addHijo(h1);
          padre.addHijo(h2);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ATTS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ATRIBUTO ::= error pcoma 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "ATRIBUTO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ATRIBUTO ::= NOM_A igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, h1.getEtiqueta().toUpperCase());
            parser.contador++;
            cad = cad.replace("\"","");
            ASTNodo hijo = new ASTNodo(parser.contador,cad);
            parser.contador++;
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // RUTA ::= ruta igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "RUTA");
        parser.contador++;
        cad =cad.replace("\"","");
        ASTNodo nodo = new ASTNodo(parser.contador, cad);
        parser.contador++;
        padre.addHijo(nodo);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUTA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FONDO ::= error pcoma 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FONDO ::= 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FONDO ::= fondo igual cadena pcoma 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "FONDO");
            parser.contador++;
            cad =cad.replace("\"","");
            ASTNodo nodo = new ASTNodo(parser.contador, cad);
            parser.contador++;
            padre.addHijo(nodo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TEXTO_A ::= opentag texto_a L_ATTS finTextoA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TEXTO_A");
          parser.contador++;
          tex = tex.replace("<FIN-TEXTO_A","");
          tex = tex.replace("<fin-texto_a","");
          tex = tex.replace(">","");
          tex = tex.replace("\"", "");
          ASTNodo hij = new ASTNodo(parser.contador, tex);
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO_A",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TEXTO_A ::= opentag texto_a finTextoA 
            {
              ASTNodo RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TEXTO_A");
          parser.contador++;
          tex = tex.replace("<FIN-TEXTO_A","");
          tex = tex.replace("<fin-texto_a","");
          tex = tex.replace(">","");
          tex = tex.replace("\"", "");
          ASTNodo hij = new ASTNodo(parser.contador, tex);
          parser.contador++;
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO_A",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TEXTO ::= opentag texto L_ATTS finTexto 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TEXTO");
          parser.contador++;
          tex = tex.replace("<FIN-TEXTO","");
          tex = tex.replace("<fin-texto","");
          tex = tex.replace(">","");
          tex = tex.replace("\"", "");
          ASTNodo hij = new ASTNodo(parser.contador, tex);
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TEXTO ::= opentag texto finTexto 
            {
              ASTNodo RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TEXTO");
          parser.contador++;
          tex = tex.replace("<FIN-TEXTO","");
          tex = tex.replace("<fin-texto","");
          tex = tex.replace(">","");
          tex = tex.replace("\"", "");
          ASTNodo hij = new ASTNodo(parser.contador, tex);
          parser.contador++;
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SALTO ::= error saltoFin closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "SALTO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALTO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SALTO ::= opentag saltoFin closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "SALTO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALTO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SPINNER ::= error finSpinner closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SPINNER ::= opentag spinner L_ATTS closetag entero opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            ASTNodo hijo = new ASTNodo(parser.contador, "CONTADOR");
            parser.contador++;
            ASTNodo con = new ASTNodo(parser.contador, cont);
            hijo.addHijo(con);
            if(h1!=null)
            {padre.addHijo(h1);}
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SPINNER ::= opentag spinner closetag entero opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            ASTNodo hijo = new ASTNodo(parser.contador, "CONTADOR");
            parser.contador++;
            ASTNodo con = new ASTNodo(parser.contador, cont);
            parser.contador++;
            hijo.addHijo(con);
            padre.addHijo(hijo);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SPINNER ::= opentag spinner L_ATTS closetag opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SPINNER ::= opentag spinner closetag opentag finSpinner closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "SPINNER");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPINNER",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // L_OPCIONES ::= OPCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_OPCIONES");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_OPCIONES",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // L_OPCIONES ::= L_OPCIONES OPCION 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"L_OPCIONES");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_OPCIONES",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPCION ::= error finOpcion closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPCION ::= opentag opcion valor igual cadena pcoma closetag TXT opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          ASTNodo hijo = new ASTNodo(parser.contador, "VALOR");
          parser.contador++;
          cad = cad.replace("\"","");
          ASTNodo str = new ASTNodo(parser.contador,cad);
          hijo.addHijo(str);
          padre.addHijo(hijo);
          padre.addHijo(h1);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPCION ::= opentag opcion valor igual cadena pcoma closetag opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          ASTNodo hijo = new ASTNodo(parser.contador, "VALOR");
          parser.contador++;
          cad = cad.replace("\"","");
          ASTNodo str = new ASTNodo(parser.contador,cad);
          hijo.addHijo(str);
          padre.addHijo(hijo);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPCION ::= opentag opcion closetag TXT opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {hij.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPCION ::= opentag opcion closetag opentag finOpcion closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"OPCION");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CAJA ::= error finCaja closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CAJA ::= opentag caja L_ATTS closetag L_OPCIONES opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          ASTNodo nodo = new ASTNodo(parser.contador,"TXT");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {nodo.addHijo(h2);}
          padre.addHijo(nodo);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CAJA ::= opentag caja closetag L_OPCIONES opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CAJA ::= opentag caja L_ATTS closetag opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CAJA ::= opentag caja closetag opentag finCaja closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CAJA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CAJA_TEXTO ::= error finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CAJA_TEXTO ::= opentag caja_texto L_ATTS closetag TXT opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador,"CAJA_TEXTO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              ASTNodo hij = new ASTNodo(parser.contador,"TXT");
              parser.contador++;
              if(h2!=null)
              {hij.addHijo(h2);}
              padre.addHijo(hij);
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CAJA_TEXTO ::= opentag caja_texto closetag TXT opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador,"CAJA_TEXTO");
              parser.contador++;
              ASTNodo hij = new ASTNodo(parser.contador,"TXT");
              parser.contador++;
              if(h1!=null)
              {hij.addHijo(h1);}
              padre.addHijo(hij);
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CAJA_TEXTO ::= opentag caja_texto L_ATTS closetag opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CAJA_TEXTO ::= opentag caja_texto closetag opentag finCaja_texto closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "CAJA_TEXTO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // L_FILAS ::= FILATABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_FILAS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FILAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // L_FILAS ::= L_FILAS FILATABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "L_FILAS");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_FILAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // L_CELDAS ::= C_ENCABEZADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // L_CELDAS ::= CELDA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // L_CELDAS ::= L_CELDAS CELDA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // L_CELDAS ::= L_CELDAS C_ENCABEZADO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CELDAS");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CELDAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CELDA ::= error finCt closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CELDA ::= opentag ct closetag IMAGEN opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CELDA ::= opentag ct L_ATTS closetag IMAGEN opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CELDA ::= opentag ct closetag BOTON opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CELDA ::= opentag ct L_ATTS closetag BOTON opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CELDA ::= opentag ct closetag TXT opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CELDA ::= opentag ct L_ATTS closetag TXT opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CELDA ::= opentag ct L_ATTS closetag opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "CELDA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CELDA ::= opentag ct closetag opentag finCt closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"CELDA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CELDA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // C_ENCABEZADO ::= error finCb closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // C_ENCABEZADO ::= opentag cb closetag IMAGEN opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // C_ENCABEZADO ::= opentag cb L_ATTS closetag IMAGEN opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // C_ENCABEZADO ::= opentag cb closetag BOTON opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // C_ENCABEZADO ::= opentag cb L_ATTS closetag BOTON opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // C_ENCABEZADO ::= opentag cb closetag TXT opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // C_ENCABEZADO ::= opentag cb L_ATTS closetag opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // C_ENCABEZADO ::= opentag cb L_ATTS closetag TXT opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // C_ENCABEZADO ::= opentag cb closetag opentag finCb closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "C_ENCABEZADO");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C_ENCABEZADO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FILATABLA ::= error finFil_t closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FILATABLA ::= opentag fil_t L_ATTS closetag L_CELDAS opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              if(h2!=null)
              {padre.addHijo(h2);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FILATABLA ::= opentag fil_t L_ATTS closetag opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FILATABLA ::= opentag fil_t closetag L_CELDAS opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              if(h1!=null)
              {padre.addHijo(h1);}
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FILATABLA ::= opentag fil_t closetag opentag finFil_t closetag 
            {
              ASTNodo RESULT =null;
		
              ASTNodo padre = new ASTNodo(parser.contador, "FILATABLA");
              parser.contador++;
              RESULT = padre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILATABLA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TABLA ::= error finTabla closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TABLA ::= opentag tabla L_ATTS closetag L_FILAS opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TABLA ::= opentag tabla closetag L_FILAS opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TABLA ::= opentag tabla L_ATTS closetag opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TABLA ::= opentag tabla closetag opentag finTabla closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "TABLA");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ENLACE ::= opentag enlace L_ATTS closetag TXT opentag finEnlace closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"ENLACE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          ASTNodo hij = new ASTNodo(parser.contador,"TXT");
          parser.contador++;
          if(h2!=null)
          {hij.addHijo(h2);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENLACE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ENLACE ::= opentag enlace L_ATTS closetag opentag finEnlace closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador,"ENLACE");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENLACE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOTON ::= error finBoton closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BOTON ::= opentag boton L_ATTS closetag TXT opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {hij.addHijo(h2);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOTON ::= opentag boton closetag TXT opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          if(h1!=null)
          {hij.addHijo(h1);}
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOTON ::= opentag boton L_ATTS closetag opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BOTON ::= opentag boton closetag opentag finBoton closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador, "BOTON");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IMAGEN ::= error finImagen closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"IMAGEN");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IMAGEN ::= opentag imagen L_ATTS closetag path opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          ASTNodo rut = new ASTNodo(parser.contador,"PATH");
          parser.contador++;
          ASTNodo r = new ASTNodo(parser.contador,pa);
          parser.contador++;
          rut.addHijo(r);
          if(h1!=null)
          {padre.addHijo(h1);}
          padre.addHijo(rut);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMAGEN ::= opentag imagen L_ATTS closetag opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMAGEN ::= opentag imagen closetag path opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "IMAGEN");
          parser.contador++;
          ASTNodo rut = new ASTNodo(parser.contador,"PATH");
          parser.contador++;
          ASTNodo r = new ASTNodo(parser.contador,pa);
          parser.contador++;
          rut.addHijo(r);
          padre.addHijo(rut);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMAGEN ::= opentag imagen closetag opentag finImagen closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"IMAGEN");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PANEL ::= opentag panel closetag L_CUERPO opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PANEL ::= opentag panel L_ATTS closetag L_CUERPO opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        if(h2!=null)
        {padre.addHijo(h2);}
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PANEL ::= opentag panel closetag opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PANEL ::= opentag panel L_ATTS closetag opentag finPanel closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador, "PANEL");
        parser.contador++;
        if(h1!=null)
        {padre.addHijo(h1);}
        //padre.addHijo(h2);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PANEL",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_CUERPO ::= TABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_CUERPO ::= ENLACE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L_CUERPO ::= BOTON 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L_CUERPO ::= IMAGEN 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L_CUERPO ::= PANEL 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L_CUERPO ::= TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L_CUERPO ::= TEXTO_A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L_CUERPO ::= CAJA_TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L_CUERPO ::= SPINNER 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_CUERPO ::= CAJA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_CUERPO ::= SALTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_CUERPO ::= L_CUERPO SALTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L_CUERPO ::= L_CUERPO SPINNER 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L_CUERPO ::= L_CUERPO CAJA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L_CUERPO ::= L_CUERPO CAJA_TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_CUERPO ::= L_CUERPO TEXTO_A 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_CUERPO ::= L_CUERPO TABLA 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_CUERPO ::= L_CUERPO ENLACE 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_CUERPO ::= L_CUERPO BOTON 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_CUERPO ::= L_CUERPO IMAGEN 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_CUERPO ::= L_CUERPO TEXTO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            if(h1!=null)
            {padre.addHijo(h1);}
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_CUERPO ::= L_CUERPO PANEL 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "L_CUERPO");
            parser.contador++;
            padre.addHijo(h1);
            if(h2!=null)
            {padre.addHijo(h2);}
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CUERPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TITULO ::= error finTitulo closetag 
            {
              ASTNodo RESULT =null;
		
          ASTNodo padre = new ASTNodo(parser.contador,"TITULO");
          parser.contador++;
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TITULO ::= opentag titulo L_ATTS closetag TXT opentag finTitulo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TITULO");
          parser.contador++;
          if(h1!=null)
          {padre.addHijo(h1);}
          if(h2!=null)
          {padre.addHijo(h2);}
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TITULO ::= opentag titulo closetag TXT opentag finTitulo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
          ASTNodo padre = new ASTNodo(parser.contador, "TITULO");
          parser.contador++;
          ASTNodo hij = new ASTNodo(parser.contador, "TXT");
          parser.contador++;
          hij.addHijo(h1);
          padre.addHijo(hij);
          RESULT = padre;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CCSS ::= error finCcss closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CCSS");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CCSS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CCSS ::= opentag ccss RUTA closetag opentag finCcss closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CCSS");
        parser.contador++;
        padre.addHijo(h1);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CCSS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CJS ::= error finCjs closetag 
            {
              ASTNodo RESULT =null;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CJS");
        parser.contador++;
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CJS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CJS ::= opentag cjs RUTA closetag opentag finCjs closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ASTNodo padre = new ASTNodo(parser.contador,"CJS");
        parser.contador++;
        padre.addHijo(h1);
        RESULT = padre;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CJS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // L_ENCABEZADO ::= TITULO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L_ENCABEZADO ::= CCSS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_ENCABEZADO ::= CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_ENCABEZADO ::= L_ENCABEZADO CCSS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L_ENCABEZADO ::= L_ENCABEZADO CJS 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador, "L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_ENCABEZADO ::= L_ENCABEZADO TITULO 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ASTNodo padre = new ASTNodo(parser.contador,"L_ENCABEZADO");
                parser.contador++;
                padre.addHijo(h1);
                padre.addHijo(h2);
                RESULT = padre;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= error finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= opentag cuerpo FONDO closetag opentag finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            ASTNodo nodo = new ASTNodo(parser.contador, "cuerpo");
            parser.contador++;
            ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-cuerpo");
            parser.contador++;
            padre.addHijo(nodo);
            nodo.addHijo(h1);
            padre.addHijo(nodo2);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= opentag cuerpo FONDO closetag L_CUERPO opentag finCuerpo closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            ASTNodo padre = new ASTNodo(parser.contador, "CUERPO");
            parser.contador++;
            ASTNodo nodo = new ASTNodo(parser.contador, "cuerpo");
            parser.contador++;
            ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-cuerpo");
            parser.contador++;
            padre.addHijo(nodo);
            nodo.addHijo(h1);
            padre.addHijo(h2);
            padre.addHijo(nodo2);
            RESULT = padre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENCABEZADO ::= error finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ENCABEZADO ::= opentag encabezado closetag opentag finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  ASTNodo nodo = new ASTNodo(parser.contador, "encabezado");
                  parser.contador++;
                  ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-encabezado");
                  parser.contador++;
                  padre.addHijo(nodo);
                  padre.addHijo(nodo2);
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= opentag encabezado closetag L_ENCABEZADO opentag finEncabezado closetag 
            {
              ASTNodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador, "ENCABEZADO");
                  parser.contador++;
                  ASTNodo nodo = new ASTNodo(parser.contador, "encabezado");
                  parser.contador++;
                  ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-encabezado");
                  parser.contador++;
                  padre.addHijo(nodo);
                  padre.addHijo(h1);
                  padre.addHijo(nodo2);
                  RESULT = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_CHTML ::= error finChtml closetag 
            {
              ASTNodo RESULT =null;
		
                  //DESCARTO PORQUE EXISTE UN ERROR
                  System.out.println("Error en la produccion de INICIO_CHTML");
                  ASTNodo padre = new ASTNodo(parser.contador, "INICIO_CHTML");
                  parser.contador++;
                  parser.raiz = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CHTML",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_CHTML ::= NT$0 opentag chtml closetag ENCABEZADO CUERPO opentag finChtml closetag 
            {
              ASTNodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ASTNodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTNodo h1 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTNodo h2 = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                  ASTNodo padre = new ASTNodo(parser.contador,"INICIO_CHTML");
                  parser.contador++;
                  ASTNodo nodo = new ASTNodo(parser.contador, "chtml");
                  parser.contador++;
                  ASTNodo nodo2 = new ASTNodo(parser.contador, "fin-chtml");
                  padre.addHijo(nodo);
                  padre.addHijo(h1);
                  padre.addHijo(h2);
                  padre.addHijo(nodo2);
                  parser.raiz = padre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO_CHTML",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              ASTNodo RESULT =null;
 parser.errores = new ArrayList<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_CHTML EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTNodo start_val = (ASTNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

