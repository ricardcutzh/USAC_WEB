/* The following code was generated by JFlex 1.4.3 on 2/25/18 8:05 PM */

/*----------AREA DE COLDIGO DE USUARIO---------------------------------------------------------------*/
//------->PAQUETES E IMPORTACIONES
package CHTML;
import java_cup.runtime.*;
import AST.TError;
import java.util.ArrayList;

/*----------AREA DE OPCIONES Y DECLARACIONES---------------------------------------------------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/25/18 8:05 PM from the specification file
 * <tt>lex2.jflex</tt>
 */
public class LexCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\52\1\7\1\0\2\52\22\0\1\52\1\30\1\5\7\30"+
    "\1\12\1\30\1\47\1\4\1\0\1\11\12\1\1\25\1\46\1\10"+
    "\1\31\1\13\2\30\1\24\1\36\1\32\1\40\1\21\1\15\1\45"+
    "\1\33\1\16\1\44\1\51\1\35\1\34\1\17\1\23\1\43\1\2"+
    "\1\42\1\27\1\20\1\41\1\50\1\2\1\22\1\2\1\37\1\0"+
    "\1\6\1\0\1\30\1\3\1\0\1\24\1\36\1\32\1\40\1\21"+
    "\1\15\1\45\1\33\1\16\1\44\1\51\1\35\1\34\1\17\1\23"+
    "\1\43\1\2\1\42\1\14\1\20\1\41\1\50\1\2\1\22\1\2"+
    "\1\37\1\0\1\26\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\7\3\1\10\5\3\1\11\1\12\2\3\2\0"+
    "\1\13\5\0\5\3\1\14\7\3\1\15\4\3\1\16"+
    "\7\3\4\0\24\3\1\17\5\3\2\20\3\0\16\3"+
    "\1\21\1\22\1\23\4\3\1\24\3\3\4\0\13\3"+
    "\1\25\1\26\2\3\1\27\1\30\3\3\1\31\2\3"+
    "\1\32\1\33\1\3\1\34\1\35\1\36\1\37\4\0"+
    "\11\3\1\40\3\3\1\41\4\3\1\42\1\43\2\3"+
    "\1\44\1\45\2\3\1\46\4\0\1\3\1\47\14\3"+
    "\1\50\2\3\1\51\3\3\1\0\1\52\2\0\11\3"+
    "\1\53\1\54\5\3\1\55\1\3\1\52\2\0\1\56"+
    "\1\3\1\57\2\3\1\60\4\3\1\61\1\3\1\62"+
    "\1\63\2\3\2\0\1\3\1\64\1\65\1\3\1\66"+
    "\1\67\1\3\1\70\1\71\1\72\2\0\1\73\2\3"+
    "\1\0\1\74\2\0\2\3\2\0\2\3\1\75\2\0"+
    "\1\76\1\77\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\53\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\254\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\53\0\254"+
    "\0\u035c\0\u0387\0\u03b2\0\327\0\53\0\u03dd\0\u0408\0\u0433"+
    "\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u0387"+
    "\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u0387"+
    "\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0387\0\u0764\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2"+
    "\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0387\0\u0c99\0\u0cc4\0\u0cef"+
    "\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47"+
    "\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f"+
    "\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u0387\0\u10a1\0\u0387"+
    "\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u0387\0\u1178\0\u11a3\0\u11ce"+
    "\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u0387"+
    "\0\u0387\0\u147e\0\u14a9\0\u14d4\0\u0387\0\u14ff\0\u152a\0\u1555"+
    "\0\u0387\0\u1580\0\u15ab\0\u0387\0\u0387\0\u15d6\0\u0387\0\u0387"+
    "\0\u0387\0\u0387\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8"+
    "\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u0387"+
    "\0\u1830\0\u185b\0\u1886\0\u0387\0\u18b1\0\u18dc\0\u1907\0\u1932"+
    "\0\u0387\0\u0387\0\u195d\0\u1988\0\u0387\0\u0387\0\u19b3\0\u19de"+
    "\0\u0387\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u0387\0\u1ae0"+
    "\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38"+
    "\0\u1c63\0\u1c8e\0\u1cb9\0\u0387\0\u1ce4\0\u1d0f\0\u0387\0\u1d3a"+
    "\0\u1d65\0\u1d90\0\u1dbb\0\u11f9\0\u1de6\0\u1e11\0\u1e3c\0\u1e67"+
    "\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf"+
    "\0\u0387\0\u1fea\0\u2015\0\u2040\0\u206b\0\u2096\0\u0387\0\u20c1"+
    "\0\53\0\u20ec\0\u2117\0\u0387\0\u2142\0\u0387\0\u216d\0\u2198"+
    "\0\u0387\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u0387\0\u226f\0\u0387"+
    "\0\u0387\0\u229a\0\u22c5\0\u22f0\0\u231b\0\u2346\0\u0387\0\u0387"+
    "\0\u2371\0\u0387\0\u0387\0\u239c\0\u0387\0\u0387\0\u0387\0\u23c7"+
    "\0\u23f2\0\u0387\0\u241d\0\u2448\0\u2473\0\53\0\u249e\0\u24c9"+
    "\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0\0\u25cb\0\53\0\u25f6"+
    "\0\u2621\0\u0387\0\u0387\0\u264c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\2\1\7"+
    "\1\10\1\2\1\5\1\11\1\12\1\13\1\14\1\4"+
    "\1\15\1\16\1\4\1\17\1\20\1\5\1\2\1\12"+
    "\1\5\1\21\1\22\3\4\1\23\3\4\1\24\1\25"+
    "\1\4\1\26\1\27\1\30\1\31\1\4\1\7\54\0"+
    "\1\3\52\0\4\32\7\0\11\32\1\33\1\0\1\32"+
    "\2\0\14\32\2\0\2\32\5\0\1\5\5\0\1\5"+
    "\12\0\1\5\2\0\2\5\15\0\1\5\3\0\5\34"+
    "\1\35\1\36\44\34\11\0\1\37\41\0\10\40\1\41"+
    "\2\40\1\42\37\40\1\0\4\32\7\0\10\32\1\43"+
    "\1\33\1\0\1\32\2\0\11\32\1\44\2\32\2\0"+
    "\2\32\2\0\4\32\7\0\2\32\1\45\4\32\1\46"+
    "\1\32\1\33\1\0\1\32\2\0\14\32\2\0\2\32"+
    "\2\0\4\32\7\0\11\32\1\33\1\0\1\32\2\0"+
    "\2\32\1\47\3\32\1\50\5\32\2\0\2\32\2\0"+
    "\4\32\7\0\2\32\1\51\2\32\1\52\2\32\1\53"+
    "\1\33\1\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\3\32\1\54\5\32\1\33\1\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\11\32"+
    "\1\33\1\0\1\32\2\0\11\32\1\55\2\32\2\0"+
    "\2\32\2\0\4\32\7\0\3\32\1\56\5\32\1\33"+
    "\1\0\1\32\2\0\3\32\1\57\10\32\2\0\2\32"+
    "\2\0\4\32\7\0\4\32\1\60\3\32\1\61\1\33"+
    "\1\0\1\32\2\0\1\62\1\63\1\32\1\64\1\65"+
    "\2\32\1\66\2\32\1\67\1\32\2\0\2\32\2\0"+
    "\4\32\7\0\7\32\1\70\1\32\1\33\1\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\11\32"+
    "\1\33\1\0\1\32\2\0\7\32\1\71\4\32\2\0"+
    "\2\32\2\0\4\32\7\0\10\32\1\72\1\33\1\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\11\32\1\33\1\0\1\32\2\0\10\32\1\73\3\32"+
    "\2\0\2\32\2\0\4\32\7\0\10\32\1\74\1\33"+
    "\1\0\1\32\2\0\14\32\2\0\2\32\2\0\4\32"+
    "\7\0\11\32\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\12\0\1\75\41\0\7\34\1\0\43\34\11\0\1\76"+
    "\41\0\10\40\1\41\2\40\1\0\47\40\1\41\2\40"+
    "\1\0\1\41\1\77\11\40\1\41\33\40\1\41\2\40"+
    "\1\100\37\40\1\0\4\32\7\0\11\32\2\0\1\32"+
    "\2\0\3\32\1\101\10\32\2\0\2\32\2\0\4\32"+
    "\7\0\2\32\1\102\6\32\2\0\1\32\2\0\14\32"+
    "\2\0\2\32\2\0\4\32\7\0\3\32\1\103\5\32"+
    "\2\0\1\32\2\0\3\32\1\104\10\32\2\0\2\32"+
    "\2\0\4\32\7\0\3\32\1\105\5\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\10\32"+
    "\1\106\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\4\32\1\107\4\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\6\32\1\110"+
    "\2\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\11\32\2\0\1\32\2\0\4\32\1\111"+
    "\7\32\2\0\2\32\2\0\4\32\7\0\11\32\2\0"+
    "\1\32\2\0\1\112\2\32\1\113\10\32\2\0\2\32"+
    "\2\0\4\32\7\0\11\32\2\0\1\32\2\0\1\114"+
    "\13\32\2\0\2\32\2\0\4\32\7\0\11\32\2\0"+
    "\1\32\2\0\1\115\13\32\2\0\2\32\2\0\4\32"+
    "\7\0\2\32\1\116\1\32\1\117\4\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\11\32"+
    "\2\0\1\32\2\0\12\32\1\120\1\32\2\0\2\32"+
    "\2\0\4\32\7\0\1\121\10\32\2\0\1\121\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\4\32\1\122"+
    "\4\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\2\32\1\123\6\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\5\32\1\124"+
    "\3\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\1\125\10\32\2\0\1\125\2\0\14\32"+
    "\2\0\2\32\2\0\4\32\7\0\4\32\1\126\4\32"+
    "\2\0\1\32\2\0\14\32\2\0\2\32\2\0\4\32"+
    "\7\0\4\32\1\127\4\32\2\0\1\32\2\0\14\32"+
    "\2\0\2\32\2\0\4\32\7\0\3\32\1\130\5\32"+
    "\2\0\1\32\2\0\14\32\2\0\2\32\2\0\4\32"+
    "\7\0\11\32\2\0\1\32\2\0\7\32\1\131\4\32"+
    "\2\0\2\32\2\0\4\32\7\0\11\32\2\0\1\32"+
    "\2\0\3\32\1\132\10\32\2\0\2\32\1\0\6\133"+
    "\1\134\1\0\2\133\1\134\13\133\2\134\23\133\4\0"+
    "\1\135\46\0\10\40\1\41\2\40\1\0\2\40\1\136"+
    "\34\40\10\0\1\137\2\0\1\100\40\0\4\32\7\0"+
    "\4\32\1\140\4\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\3\32\1\141\5\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\3\32\1\142"+
    "\7\0\11\32\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\2\0\2\32\1\143\1\32\7\0\11\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\11\32"+
    "\2\0\1\32\2\0\6\32\1\144\5\32\2\0\2\32"+
    "\2\0\4\32\7\0\11\32\2\0\1\32\2\0\13\32"+
    "\1\145\2\0\2\32\2\0\4\32\7\0\11\32\2\0"+
    "\1\32\2\0\7\32\1\146\4\32\2\0\2\32\2\0"+
    "\4\32\7\0\4\32\1\147\4\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\11\32\2\0"+
    "\1\32\2\0\3\32\1\150\10\32\2\0\2\32\2\0"+
    "\4\32\7\0\10\32\1\151\2\0\1\32\2\0\14\32"+
    "\2\0\2\32\2\0\4\32\7\0\10\32\1\152\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\2\32\1\153\6\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\11\32\2\0\1\32\2\0"+
    "\1\32\1\154\12\32\2\0\2\32\2\0\4\32\7\0"+
    "\3\32\1\155\5\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\7\32\1\156\1\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\10\32\1\157\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\2\0\4\32\7\0\1\160\10\32\2\0\1\160\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\11\32\2\0"+
    "\1\32\2\0\2\32\1\161\11\32\2\0\2\32\2\0"+
    "\4\32\7\0\11\32\2\0\1\32\2\0\1\162\13\32"+
    "\2\0\2\32\2\0\4\32\7\0\11\32\2\0\1\32"+
    "\2\0\10\32\1\163\3\32\2\0\2\32\2\0\4\32"+
    "\7\0\7\32\1\164\1\32\2\0\1\32\2\0\14\32"+
    "\2\0\2\32\2\0\4\32\7\0\10\32\1\165\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\5\32\1\166\3\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\11\32\2\0\1\32\2\0"+
    "\11\32\1\167\2\32\2\0\2\32\2\0\4\32\7\0"+
    "\7\32\1\170\1\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\1\0\10\133\1\0\2\133\2\0\111\133\4\171"+
    "\1\172\5\171\1\0\40\171\10\40\1\41\2\40\1\0"+
    "\3\40\1\173\33\40\14\0\1\137\1\174\11\0\1\137"+
    "\24\0\4\32\7\0\7\32\1\175\1\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\3\32"+
    "\1\176\5\32\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\2\0\4\32\7\0\1\177\1\200\1\201\1\32\1\202"+
    "\1\203\1\32\1\204\1\32\2\0\1\177\2\0\1\205"+
    "\3\32\1\206\4\32\1\207\2\32\2\0\2\32\2\0"+
    "\4\32\7\0\4\32\1\210\4\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\7\32\1\211"+
    "\1\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\5\32\1\212\3\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\11\32\2\0"+
    "\1\32\2\0\3\32\1\213\10\32\2\0\2\32\2\0"+
    "\4\32\7\0\7\32\1\214\1\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\10\32\1\215"+
    "\2\0\1\32\2\0\14\32\2\0\2\32\2\0\4\32"+
    "\7\0\11\32\2\0\1\32\2\0\4\32\1\216\7\32"+
    "\2\0\2\32\2\0\4\32\7\0\11\32\2\0\1\32"+
    "\2\0\1\217\13\32\2\0\2\32\2\0\4\32\7\0"+
    "\7\32\1\220\1\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\7\32\1\221\1\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\5\32\1\222\3\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\2\32\1\223\1\32\7\0\11\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\11\32\2\0\1\32\2\0\3\32\1\224\10\32\2\0"+
    "\2\32\2\0\4\32\7\0\11\32\2\0\1\32\2\0"+
    "\14\32\2\0\1\32\1\225\2\0\4\32\7\0\11\32"+
    "\2\0\1\32\2\0\11\32\1\226\2\32\2\0\2\32"+
    "\2\0\4\32\7\0\3\32\1\227\5\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\11\32"+
    "\2\0\1\32\2\0\3\32\1\230\10\32\2\0\2\32"+
    "\2\0\4\32\7\0\7\32\1\231\1\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\11\32"+
    "\2\0\1\32\2\0\10\32\1\232\3\32\2\0\2\32"+
    "\1\0\4\171\1\233\52\171\1\233\4\171\1\234\41\171"+
    "\4\40\1\235\3\40\1\41\2\40\1\0\37\40\16\0"+
    "\1\236\35\0\3\32\1\237\7\0\11\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\5\32"+
    "\1\240\3\32\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\2\0\4\32\7\0\11\32\2\0\1\32\2\0\11\32"+
    "\1\241\2\32\2\0\2\32\2\0\4\32\7\0\2\32"+
    "\1\242\6\32\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\2\0\4\32\7\0\11\32\2\0\1\32\2\0\2\32"+
    "\1\243\11\32\2\0\2\32\2\0\4\32\7\0\2\32"+
    "\1\244\5\32\1\245\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\3\32\1\246\5\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\11\32\2\0\1\32\2\0\11\32\1\247\2\32\2\0"+
    "\2\32\2\0\4\32\7\0\4\32\1\250\3\32\1\251"+
    "\2\0\1\32\2\0\1\252\1\253\2\32\1\254\2\32"+
    "\1\255\2\32\1\256\1\32\2\0\2\32\2\0\4\32"+
    "\7\0\7\32\1\257\1\32\2\0\1\32\2\0\14\32"+
    "\2\0\2\32\2\0\4\32\7\0\10\32\1\260\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\3\32\1\261\5\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\7\32\1\262\1\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\2\32\1\263"+
    "\1\32\7\0\11\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\5\32\1\264\3\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\5\32\1\265\3\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\3\32\1\266\5\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\10\32\1\267\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\2\0\4\32\7\0\4\32\1\270\4\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\7\32"+
    "\1\271\1\32\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\1\0\4\171\1\233\4\171\1\272\45\171\1\233\4\171"+
    "\1\273\41\171\10\40\1\41\2\40\1\0\4\40\1\274"+
    "\32\40\17\0\1\275\34\0\4\32\7\0\1\32\1\276"+
    "\7\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\11\32\2\0\1\32\2\0\10\32\1\277"+
    "\3\32\2\0\2\32\2\0\4\32\7\0\2\32\1\300"+
    "\6\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\11\32\2\0\1\32\2\0\3\32\1\301"+
    "\10\32\2\0\2\32\2\0\4\32\7\0\10\32\1\302"+
    "\2\0\1\32\2\0\14\32\2\0\2\32\2\0\4\32"+
    "\7\0\4\32\1\303\4\32\2\0\1\32\2\0\14\32"+
    "\2\0\2\32\2\0\4\32\7\0\11\32\2\0\1\32"+
    "\2\0\4\32\1\304\7\32\2\0\2\32\2\0\4\32"+
    "\7\0\11\32\2\0\1\32\2\0\1\305\2\32\1\306"+
    "\10\32\2\0\2\32\2\0\4\32\7\0\11\32\2\0"+
    "\1\32\2\0\1\307\13\32\2\0\2\32\2\0\4\32"+
    "\7\0\11\32\2\0\1\32\2\0\12\32\1\310\1\32"+
    "\2\0\2\32\2\0\4\32\7\0\1\311\10\32\2\0"+
    "\1\311\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\4\32\1\312\4\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\5\32\1\313\3\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\1\314\10\32\2\0\1\314\2\0\14\32\2\0\2\32"+
    "\2\0\4\32\7\0\4\32\1\315\4\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\3\32"+
    "\1\316\5\32\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\2\0\4\32\7\0\10\32\1\317\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\11\32\2\0"+
    "\1\32\2\0\5\32\1\320\6\32\2\0\2\32\2\0"+
    "\4\32\7\0\11\32\2\0\1\32\2\0\6\32\1\321"+
    "\5\32\2\0\2\32\2\0\4\32\7\0\5\32\1\322"+
    "\3\32\2\0\1\32\2\0\14\32\2\0\2\32\1\0"+
    "\4\171\1\233\4\171\1\323\45\171\1\233\6\171\1\324"+
    "\37\171\10\40\1\41\2\40\1\0\5\40\1\325\31\40"+
    "\4\0\1\326\47\0\4\32\7\0\2\32\1\327\6\32"+
    "\2\0\1\32\2\0\14\32\2\0\2\32\2\0\4\32"+
    "\7\0\3\32\1\330\5\32\2\0\1\32\2\0\14\32"+
    "\2\0\2\32\2\0\2\32\1\331\1\32\7\0\11\32"+
    "\2\0\1\32\2\0\14\32\2\0\2\32\2\0\4\32"+
    "\7\0\11\32\2\0\1\32\2\0\13\32\1\332\2\0"+
    "\2\32\2\0\4\32\7\0\11\32\2\0\1\32\2\0"+
    "\7\32\1\333\4\32\2\0\2\32\2\0\4\32\7\0"+
    "\11\32\2\0\1\32\2\0\3\32\1\334\10\32\2\0"+
    "\2\32\2\0\4\32\7\0\10\32\1\335\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\10\32"+
    "\1\336\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\2\32\1\337\6\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\10\32\1\340"+
    "\2\0\1\32\2\0\14\32\2\0\2\32\2\0\4\32"+
    "\7\0\1\341\10\32\2\0\1\341\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\11\32\2\0\1\32\2\0"+
    "\2\32\1\342\11\32\2\0\2\32\2\0\4\32\7\0"+
    "\11\32\2\0\1\32\2\0\10\32\1\343\3\32\2\0"+
    "\2\32\2\0\4\32\7\0\7\32\1\344\1\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\5\32\1\345\3\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\10\32\1\346\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\2\0\4\32\7\0\7\32"+
    "\1\347\1\32\2\0\1\32\2\0\14\32\2\0\2\32"+
    "\2\0\4\32\7\0\6\32\1\350\2\32\2\0\1\32"+
    "\2\0\14\32\2\0\2\32\1\0\4\171\1\233\6\171"+
    "\1\351\37\171\10\40\1\41\2\40\1\0\6\40\1\352"+
    "\30\40\20\0\1\353\33\0\4\32\7\0\3\32\1\354"+
    "\5\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\3\32\1\355\5\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\4\32\1\356"+
    "\4\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\5\32\1\357\3\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\11\32\2\0"+
    "\1\32\2\0\3\32\1\360\10\32\2\0\2\32\2\0"+
    "\4\32\7\0\10\32\1\361\2\0\1\32\2\0\14\32"+
    "\2\0\2\32\2\0\4\32\7\0\11\32\2\0\1\32"+
    "\2\0\4\32\1\362\7\32\2\0\2\32\2\0\4\32"+
    "\7\0\11\32\2\0\1\32\2\0\1\363\13\32\2\0"+
    "\2\32\2\0\4\32\7\0\7\32\1\364\1\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\2\32\1\365"+
    "\1\32\7\0\11\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\11\32\2\0\1\32\2\0"+
    "\3\32\1\366\10\32\2\0\2\32\2\0\4\32\7\0"+
    "\11\32\2\0\1\32\2\0\11\32\1\367\2\32\2\0"+
    "\2\32\2\0\4\32\7\0\3\32\1\370\5\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\2\0\4\32\7\0"+
    "\11\32\2\0\1\32\2\0\3\32\1\371\10\32\2\0"+
    "\2\32\2\0\4\32\7\0\11\32\2\0\1\32\2\0"+
    "\6\32\1\372\5\32\2\0\2\32\2\0\4\32\7\0"+
    "\4\32\1\373\4\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\1\0\10\40\1\41\2\40\1\0\4\40\1\374"+
    "\32\40\21\0\1\375\32\0\4\32\7\0\5\32\1\376"+
    "\3\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\3\32\1\377\5\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\7\32\1\u0100"+
    "\1\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\5\32\1\u0101\3\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\5\32\1\u0102"+
    "\3\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\3\32\1\u0103\5\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\4\32\1\u0104"+
    "\4\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\7\32\1\u0105\1\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\2\0\4\32\7\0\7\32\1\u0106"+
    "\1\32\2\0\1\32\2\0\14\32\2\0\2\32\2\0"+
    "\4\32\7\0\7\32\1\u0107\1\32\2\0\1\32\2\0"+
    "\14\32\2\0\2\32\1\0\10\40\1\41\2\40\1\0"+
    "\7\40\1\u0108\27\40\22\0\1\u0109\31\0\4\32\7\0"+
    "\11\32\2\0\1\32\2\0\10\32\1\u010a\3\32\2\0"+
    "\2\32\2\0\4\32\7\0\11\32\2\0\1\32\2\0"+
    "\5\32\1\u010b\6\32\2\0\2\32\2\0\4\32\7\0"+
    "\5\32\1\u010c\3\32\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\1\0\3\40\1\u010d\4\40\1\41\2\40\1\u010e"+
    "\1\u010f\12\40\1\u010f\23\40\20\0\1\u0110\33\0\4\32"+
    "\7\0\10\32\1\u0111\2\0\1\32\2\0\14\32\2\0"+
    "\2\32\2\0\4\32\7\0\6\32\1\u0112\2\32\2\0"+
    "\1\32\2\0\14\32\2\0\2\32\1\0\10\40\1\41"+
    "\2\40\1\0\10\40\1\u0113\36\40\1\41\2\40\1\u010e"+
    "\1\u010f\12\40\1\u010f\23\40\23\0\1\u0114\30\0\4\32"+
    "\7\0\11\32\2\0\1\32\2\0\6\32\1\u0115\5\32"+
    "\2\0\2\32\2\0\4\32\7\0\4\32\1\u0116\4\32"+
    "\2\0\1\32\2\0\14\32\2\0\2\32\1\0\10\40"+
    "\1\41\2\40\1\u0117\1\u0113\12\40\1\u0113\23\40\3\0"+
    "\1\u0118\7\0\1\u010e\1\u0119\12\0\1\u0119\24\0\4\32"+
    "\7\0\7\32\1\u011a\1\32\2\0\1\32\2\0\14\32"+
    "\2\0\2\32\2\0\4\32\7\0\7\32\1\u011b\1\32"+
    "\2\0\1\32\2\0\14\32\2\0\2\32\25\0\1\u011c"+
    "\41\0\1\u010e\1\u0119\12\0\1\u0119\36\0\1\u0117\1\u011c"+
    "\12\0\1\u011c\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9847];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\17\1\1\11\3\1\2\0"+
    "\1\11\5\0\32\1\4\0\34\1\3\0\31\1\4\0"+
    "\36\1\4\0\33\1\4\0\25\1\1\0\1\1\2\0"+
    "\22\1\1\11\2\0\20\1\2\0\12\1\2\0\3\1"+
    "\1\0\1\11\2\0\2\1\2\0\2\1\1\11\2\0"+
    "\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //CODIGO DE USUARIO EN SINTAXIS JAVA
    public ArrayList<TError> LexError = new ArrayList<>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexCHTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexCHTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { /*System.out.println("Encontre:  opentag");*/ return new Symbol(Simbolos.opentag, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 33: 
          { /*System.out.println("Encontre:  fin-cb"); */return new Symbol(Simbolos.finCb, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 53: 
          { /*System.out.println("Encontre:  fin-titulo "+yytext());*/ return new Symbol(Simbolos.finTitulo, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 11: 
          { /*System.out.println("Encontre cadena: "+yytext());*/ return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 7: 
          { /*System.out.println("Encontre:  closetag");*/ return new Symbol(Simbolos.closetag, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 12: 
          { /*System.out.println("Encontre:  id");*/ return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 4: 
          { /*System.out.println("Encontre comentario: "+yytext());*/ return new Symbol(Simbolos.especiales, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 35: 
          { /*System.out.println("Encontre:  titulo "+yytext());*/ return new Symbol(Simbolos.titulo, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 51: 
          { /*System.out.println("Encontre:  fin-panel"); */return new Symbol(Simbolos.finPanel, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 19: 
          { /*System.out.println("Encontre:  ccss");*/ return new Symbol(Simbolos.ccss, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 18: 
          { /*System.out.println("Encontre:  caja");*/ return new Symbol(Simbolos.caja, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 55: 
          { /*System.out.println("Encontre:  fin-opcion"); */return new Symbol(Simbolos.finOpcion, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 17: 
          { /*System.out.println("Encontre:  alto");*/ return new Symbol(Simbolos.alto, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 32: 
          { /*System.out.println("Encontre:  fin-ct");*/ return new Symbol(Simbolos.finCt, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 1: 
          { TError errorlex = new TError(yytext(),"Error Lexico","Caracter no Reconocido", yyline, yycolumn);
                                  LexError.add(errorlex);
          }
        case 78: break;
        case 37: 
          { /*System.out.println("Encontre:  opcion"); */return new Symbol(Simbolos.opcion, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 48: 
          { /*System.out.println("Encontre:  fin-tabla");*/ return new Symbol(Simbolos.finTabla, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 54: 
          { /*System.out.println("Encontre:  fin-enlace");*/ return new Symbol(Simbolos.finEnlace, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 63: 
          { /*System.out.println("Encontre:  fin-caja_texto");*/ return new Symbol(Simbolos.finCaja_texto, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 39: 
          { /*System.out.println("Encontre:  spinner");*/ return new Symbol(Simbolos.spinner, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 25: 
          { /*System.out.println("Encontre:  ancho"); */return new Symbol(Simbolos.ancho, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 24: 
          { /*System.out.println("Encontre:  tabla");*/ return new Symbol(Simbolos.tabla, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 28: 
          { /*System.out.println("Encontre:  boton");*/ return new Symbol(Simbolos.boton, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 40: 
          { /*System.out.println("Encontre:  fin-cjs");*/ return new Symbol(Simbolos.finCjs, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 43: 
          { /*System.out.println("Encontre:  fin-caja");*/ return new Symbol(Simbolos.finCaja, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 34: 
          { /*System.out.println("Encontre:  imagen");*/ return new Symbol(Simbolos.imagen, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 3: 
          { /*System.out.println("Encontre Token titulo: "+yytext());*/ return new Symbol(Simbolos.palabra, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 59: 
          { /*System.out.println("Encontre:  fin-spinner");*/ return new Symbol(Simbolos.finSpinner, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 46: 
          { /*System.out.println("Encontre:  salto-fin");*/ return new Symbol(Simbolos.saltoFin, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 36: 
          { /*System.out.println("Encontre:  enlace");*/ return new Symbol(Simbolos.enlace, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 10: 
          { /*System.out.println("Encontre:  coma");*/ return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 5: 
          { /*System.out.println("Encontre delimitador: "+yytext()); return new Symbol(Simbolos.delim, yycolumn, yyline, yytext());*/
          }
        case 95: break;
        case 47: 
          { /*System.out.println("Encontre:  fin-fil_t");*/ return new Symbol(Simbolos.finFil_t, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 13: 
          { /*System.out.println("Encontre:  ct");*/ return new Symbol(Simbolos.ct, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 27: 
          { /*System.out.println("Encontre:  click");*/ return new Symbol(Simbolos.click, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 26: 
          { /*System.out.println("Encontre:  chtml "+yytext());*/ return new Symbol(Simbolos.chtml, yycolumn, yyline, yytext());
          }
        case 99: break;
        case 56: 
          { /*System.out.println("Encontre:  fin-cuerpo "+yytext());*/ return new Symbol(Simbolos.finCuerpo, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 57: 
          { /*System.out.println("Encontre:  encabezado "+yytext());*/ return new Symbol(Simbolos.encabezado, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 60: 
          { /*System.out.println("Encontre Token fin TEXTO: "+yytext());*/ return new Symbol(Simbolos.finTexto, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 31: 
          { /*System.out.println("Encontre:  fondo");*/ return new Symbol(Simbolos.valor, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 62: 
          { /*System.out.println("Encontre:  fin-encabezado "+yytext());*/ return new Symbol(Simbolos.finEncabezado, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 30: 
          { /*System.out.println("Encontre:  grupo");*/ return new Symbol(Simbolos.grupo, yycolumn, yyline, yytext());
          }
        case 105: break;
        case 52: 
          { /*System.out.println("Encontre:  fin-imagen");*/ return new Symbol(Simbolos.finImagen, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 41: 
          { /*System.out.println("Encontre:  salto-fin");*/ return new Symbol(Simbolos.texto_a, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 49: 
          { /*System.out.println("Encontre:  fin-chtml "+yytext());*/ return new Symbol(Simbolos.finChtml, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 58: 
          { /*System.out.println("Encontre:  caja_texto");*/ return new Symbol(Simbolos.caja_texto, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 22: 
          { /*System.out.println("Encontre:  fondo");*/ return new Symbol(Simbolos.fondo, yycolumn, yyline, yytext());
          }
        case 110: break;
        case 38: 
          { /*System.out.println("Encontre:  cuerpo "+yytext());*/ return new Symbol(Simbolos.cuerpo, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 20: 
          { /*System.out.println("Encontre:  ruta");*/ return new Symbol(Simbolos.ruta, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 23: 
          { /*System.out.println("Encontre:  salto-fin");*/ return new Symbol(Simbolos.texto, yycolumn, yyline, yytext());
          }
        case 113: break;
        case 50: 
          { /*System.out.println("Encontre:  fin-boton");*/ return new Symbol(Simbolos.finBoton, yycolumn, yyline, yytext());
          }
        case 114: break;
        case 44: 
          { /*System.out.println("Encontre:  fin-ccss");*/ return new Symbol(Simbolos.finCcss, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 2: 
          { /*System.out.println("Encontre cadena: "+yytext());*/ return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());
          }
        case 116: break;
        case 45: 
          { /*System.out.println("Encontre:  alineado");*/ return new Symbol(Simbolos.alineado, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 9: 
          { /*System.out.println("Encontre:  pcoma");*/ return new Symbol(Simbolos.pcoma, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 8: 
          { /*System.out.println("Encontre:  igual");*/ return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 42: 
          { /*System.out.println("Encontre comentario: "+yytext());*/ /*return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());*/
          }
        case 120: break;
        case 29: 
          { /*System.out.println("Encontre:  panel");*/ return new Symbol(Simbolos.panel, yycolumn, yyline, yytext());
          }
        case 121: break;
        case 15: 
          { /*System.out.println("Encontre:  cjs");*/ return new Symbol(Simbolos.cjs, yycolumn, yyline, yytext());
          }
        case 122: break;
        case 16: 
          { /*System.out.println("Encontre Token PATH: "+yytext());*/ return new Symbol(Simbolos.path, yycolumn, yyline, yytext());
          }
        case 123: break;
        case 61: 
          { /*System.out.println("Encontre Token fin TEXTO A: "+yytext());*/ return new Symbol(Simbolos.finTextoA, yycolumn, yyline, yytext());
          }
        case 124: break;
        case 21: 
          { /*System.out.println("Encontre:  fil_t");*/ return new Symbol(Simbolos.fil_t, yycolumn, yyline, yytext());
          }
        case 125: break;
        case 14: 
          { /*System.out.println("Encontre:  cb"); */return new Symbol(Simbolos.cb, yycolumn, yyline, yytext());
          }
        case 126: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
